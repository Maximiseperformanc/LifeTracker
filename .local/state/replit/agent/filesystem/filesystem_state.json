{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nLifeTrack Pro is a comprehensive personal development dashboard application built with React, Express, and PostgreSQL. The application helps users track their habits, manage goals, monitor health metrics, run focus timers (Pomodoro technique), and gain insights into their productivity patterns. It features a modern, responsive UI with data visualization and export capabilities, designed to support users in building better habits and achieving their personal development goals.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n\nThe client-side is built with **React 18** using a component-based architecture:\n\n- **UI Framework**: Utilizes shadcn/ui components built on top of Radix UI primitives for accessible, customizable UI components\n- **Styling**: TailwindCSS with CSS custom properties for theming, supporting both light and dark modes\n- **Routing**: Uses Wouter for lightweight client-side routing\n- **State Management**: React Query (TanStack Query) for server state management with optimistic updates and caching\n- **Form Handling**: React Hook Form with Zod validation for type-safe form management\n- **Build Tool**: Vite for fast development and optimized production builds\n\nThe application follows a modular structure with separate directories for pages, components (organized by feature), hooks, and utilities.\n\n## Backend Architecture\n\nThe server is built with **Express.js** following a RESTful API pattern:\n\n- **API Design**: REST endpoints organized by resource (habits, goals, health entries, timer sessions)\n- **Request Handling**: Express middleware for JSON parsing, logging, and error handling\n- **Validation**: Zod schemas shared between client and server for consistent data validation\n- **Development Setup**: Custom Vite integration for development mode with HMR support\n- **Error Handling**: Centralized error handling middleware with structured error responses\n\nThe backend implements an interface-based storage pattern, currently using in-memory storage but designed to easily switch to database implementations.\n\n## Data Storage Solutions\n\n**Database Setup**:\n- **Primary Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Migration Management**: Drizzle Kit for schema migrations and database management\n- **Connection**: Neon Database serverless connection for cloud PostgreSQL hosting\n- **Schema Design**: Normalized relational schema with separate tables for users, habits, habit entries, goals, health entries, and timer sessions\n\n**Current Implementation**: The application includes both in-memory storage (for development) and PostgreSQL integration, with the storage layer abstracted through interfaces for easy switching between implementations.\n\n## Authentication and Authorization\n\nThe application currently uses a **default user approach** for simplicity:\n- Single default user ID used across all operations\n- Session management infrastructure in place (connect-pg-simple for session store)\n- Authentication system designed but not fully implemented, allowing for easy future expansion to multi-user support\n\n## External Dependencies\n\n**Core Framework Dependencies**:\n- React 18 with TypeScript for type safety\n- Express.js for server-side API handling\n- Drizzle ORM with PostgreSQL for database operations\n- TanStack React Query for data fetching and caching\n\n**UI Component Libraries**:\n- Radix UI primitives for accessible component foundations\n- Lucide React for consistent iconography\n- Embla Carousel for carousel functionality\n- React Day Picker for date selection\n\n**Development Tools**:\n- Vite for build tooling and development server\n- TypeScript for static type checking\n- TailwindCSS for styling and responsive design\n- Replit-specific plugins for development environment integration\n\n**Database and Infrastructure**:\n- Neon Database for serverless PostgreSQL hosting\n- connect-pg-simple for PostgreSQL session storage\n- date-fns for date manipulation and formatting\n\nThe architecture supports real-time features through React Query's built-in refetching mechanisms and is designed for easy scaling with proper separation of concerns between presentation, business logic, and data access layers.","size_bytes":4271},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        surface: \"var(--surface)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        inter: [\"Inter\", \"sans-serif\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2830},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  insertHabitSchema, \n  insertHabitEntrySchema,\n  insertGoalSchema,\n  insertHealthEntrySchema,\n  insertTimerSessionSchema,\n  insertFoodItemSchema,\n  insertMealEntrySchema,\n  insertNutritionGoalSchema,\n  insertExerciseSchema,\n  insertWorkoutSchema,\n  insertSetSchema,\n  insertCardioEntrySchema,\n  insertScreenTimeAppSchema,\n  insertScreenTimeEntrySchema,\n  insertScreenTimeLimitSchema,\n  insertWatchlistItemSchema,\n  insertTodoCategorySchema,\n  insertTodoSchema,\n  insertCalendarEventSchema,\n  insertWeeklyPlanSchema,\n  insertDailyPlanSchema\n} from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const DEFAULT_USER_ID = \"default-user\";\n\n  // Habits\n  app.get(\"/api/habits\", async (req, res) => {\n    try {\n      const habits = await storage.getHabits(DEFAULT_USER_ID);\n      res.json(habits);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch habits\" });\n    }\n  });\n\n  app.post(\"/api/habits\", async (req, res) => {\n    try {\n      const validatedData = insertHabitSchema.parse(req.body);\n      const habit = await storage.createHabit(DEFAULT_USER_ID, validatedData);\n      res.json(habit);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid habit data\" });\n    }\n  });\n\n  app.put(\"/api/habits/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const habit = await storage.updateHabit(id, req.body);\n      if (!habit) {\n        return res.status(404).json({ message: \"Habit not found\" });\n      }\n      res.json(habit);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update habit\" });\n    }\n  });\n\n  app.delete(\"/api/habits/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deleteHabit(id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Habit not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete habit\" });\n    }\n  });\n\n  // Habit Entries\n  app.get(\"/api/habit-entries\", async (req, res) => {\n    try {\n      const { date } = req.query;\n      const entries = await storage.getHabitEntries(DEFAULT_USER_ID, date as string);\n      res.json(entries);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch habit entries\" });\n    }\n  });\n\n  app.post(\"/api/habit-entries\", async (req, res) => {\n    try {\n      const validatedData = insertHabitEntrySchema.parse(req.body);\n      const entry = await storage.createHabitEntry(DEFAULT_USER_ID, validatedData);\n      res.json(entry);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid habit entry data\" });\n    }\n  });\n\n  app.put(\"/api/habit-entries/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const entry = await storage.updateHabitEntry(id, req.body);\n      if (!entry) {\n        return res.status(404).json({ message: \"Habit entry not found\" });\n      }\n      res.json(entry);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update habit entry\" });\n    }\n  });\n\n  // Goals\n  app.get(\"/api/goals\", async (req, res) => {\n    try {\n      const goals = await storage.getGoals(DEFAULT_USER_ID);\n      res.json(goals);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch goals\" });\n    }\n  });\n\n  app.post(\"/api/goals\", async (req, res) => {\n    try {\n      const validatedData = insertGoalSchema.parse(req.body);\n      const goal = await storage.createGoal(DEFAULT_USER_ID, validatedData);\n      res.json(goal);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid goal data\" });\n    }\n  });\n\n  app.put(\"/api/goals/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const goal = await storage.updateGoal(id, req.body);\n      if (!goal) {\n        return res.status(404).json({ message: \"Goal not found\" });\n      }\n      res.json(goal);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update goal\" });\n    }\n  });\n\n  app.delete(\"/api/goals/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deleteGoal(id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Goal not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete goal\" });\n    }\n  });\n\n  // Health Entries\n  app.get(\"/api/health-entries\", async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      const entries = await storage.getHealthEntries(DEFAULT_USER_ID, startDate as string, endDate as string);\n      res.json(entries);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch health entries\" });\n    }\n  });\n\n  app.post(\"/api/health-entries\", async (req, res) => {\n    try {\n      const validatedData = insertHealthEntrySchema.parse(req.body);\n      const entry = await storage.createHealthEntry(DEFAULT_USER_ID, validatedData);\n      res.json(entry);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid health entry data\" });\n    }\n  });\n\n  app.put(\"/api/health-entries/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const entry = await storage.updateHealthEntry(id, req.body);\n      if (!entry) {\n        return res.status(404).json({ message: \"Health entry not found\" });\n      }\n      res.json(entry);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update health entry\" });\n    }\n  });\n\n  // Timer Sessions\n  app.get(\"/api/timer-sessions\", async (req, res) => {\n    try {\n      const { date } = req.query;\n      const sessions = await storage.getTimerSessions(DEFAULT_USER_ID, date as string);\n      res.json(sessions);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch timer sessions\" });\n    }\n  });\n\n  app.post(\"/api/timer-sessions\", async (req, res) => {\n    try {\n      const validatedData = insertTimerSessionSchema.parse(req.body);\n      const session = await storage.createTimerSession(DEFAULT_USER_ID, validatedData);\n      res.json(session);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid timer session data\" });\n    }\n  });\n\n  // Food Items - Search\n  app.get(\"/api/foods/search\", async (req, res) => {\n    try {\n      const { q, limit } = req.query;\n      if (!q) {\n        return res.status(400).json({ message: \"Query parameter 'q' is required\" });\n      }\n      const foods = await storage.searchFoodItems(q as string, limit ? parseInt(limit as string) : undefined);\n      res.json(foods);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to search foods\" });\n    }\n  });\n\n  app.get(\"/api/foods/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const food = await storage.getFoodItem(id);\n      if (!food) {\n        return res.status(404).json({ message: \"Food not found\" });\n      }\n      res.json(food);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch food\" });\n    }\n  });\n\n  app.post(\"/api/foods\", async (req, res) => {\n    try {\n      const validatedData = insertFoodItemSchema.parse(req.body);\n      const food = await storage.createFoodItem(validatedData);\n      res.json(food);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid food data\" });\n    }\n  });\n\n  // Barcode Scanning\n  app.post(\"/api/scan/barcode\", async (req, res) => {\n    try {\n      const { barcode } = req.body;\n      if (!barcode) {\n        return res.status(400).json({ message: \"Barcode is required\" });\n      }\n      \n      const food = await storage.getFoodItemByBarcode(barcode);\n      if (!food) {\n        return res.status(404).json({ message: \"Food not found for barcode\" });\n      }\n      \n      res.json({\n        food,\n        alternatives: [], // Could add similar foods here\n        confidence: 100\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to scan barcode\" });\n    }\n  });\n\n  // Meal Entries\n  app.get(\"/api/meals\", async (req, res) => {\n    try {\n      const { date } = req.query;\n      const meals = await storage.getMealEntries(DEFAULT_USER_ID, date as string);\n      res.json(meals);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch meals\" });\n    }\n  });\n\n  app.post(\"/api/log/meal\", async (req, res) => {\n    try {\n      const validatedData = insertMealEntrySchema.parse(req.body);\n      const meal = await storage.createMealEntry(DEFAULT_USER_ID, validatedData);\n      res.json(meal);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid meal data\" });\n    }\n  });\n\n  app.put(\"/api/meals/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const meal = await storage.updateMealEntry(id, req.body);\n      if (!meal) {\n        return res.status(404).json({ message: \"Meal not found\" });\n      }\n      res.json(meal);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update meal\" });\n    }\n  });\n\n  app.delete(\"/api/meals/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deleteMealEntry(id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Meal not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete meal\" });\n    }\n  });\n\n  // Daily Nutrition Totals\n  app.get(\"/api/day/:date/totals\", async (req, res) => {\n    try {\n      const { date } = req.params;\n      const meals = await storage.getMealEntries(DEFAULT_USER_ID, date);\n      const goal = await storage.getNutritionGoal(DEFAULT_USER_ID);\n      \n      // Calculate totals from all meals\n      let totals = {\n        calories: 0,\n        protein: 0,\n        carbs: 0,\n        fat: 0,\n        fiber: 0,\n        sugar: 0,\n        sodium: 0\n      };\n\n      for (const meal of meals) {\n        if (meal.totalsCache) {\n          totals.calories += meal.totalsCache.calories;\n          totals.protein += meal.totalsCache.protein;\n          totals.carbs += meal.totalsCache.carbs;\n          totals.fat += meal.totalsCache.fat;\n          totals.fiber += meal.totalsCache.fiber || 0;\n          totals.sugar += meal.totalsCache.sugar || 0;\n          totals.sodium += meal.totalsCache.sodium || 0;\n        }\n      }\n\n      // Calculate progress percentages\n      const progress = goal ? {\n        calories: Math.round((totals.calories / goal.calorieTarget) * 100),\n        protein: Math.round((totals.protein / goal.proteinTarget) * 100),\n        carbs: Math.round((totals.carbs / goal.carbsTarget) * 100),\n        fat: Math.round((totals.fat / goal.fatTarget) * 100),\n        fiber: Math.round((totals.fiber / (goal.fiberTarget || 25)) * 100),\n        sodium: Math.round((totals.sodium / (goal.sodiumTarget || 2300)) * 100)\n      } : null;\n\n      // Simple warnings\n      const warnings = [];\n      if (goal) {\n        if (totals.fiber < (goal.fiberTarget || 25) * 0.5) warnings.push(\"Low fiber intake\");\n        if (totals.sodium > (goal.sodiumTarget || 2300) * 1.5) warnings.push(\"High sodium intake\");\n        if (totals.protein < goal.proteinTarget * 0.7) warnings.push(\"Low protein intake\");\n      }\n\n      res.json({\n        date,\n        totals,\n        goals: goal || null,\n        progress,\n        warnings,\n        meals: meals.length\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to calculate daily totals\" });\n    }\n  });\n\n  // Weekly Report\n  app.get(\"/api/report/weekly\", async (req, res) => {\n    try {\n      const today = new Date();\n      const weekAgo = new Date(today);\n      weekAgo.setDate(weekAgo.getDate() - 7);\n\n      const weeklyData = [];\n      for (let d = new Date(weekAgo); d <= today; d.setDate(d.getDate() + 1)) {\n        const dateStr = d.toISOString().split('T')[0];\n        const meals = await storage.getMealEntries(DEFAULT_USER_ID, dateStr);\n        \n        let dayTotals = {\n          calories: 0,\n          protein: 0,\n          fiber: 0,\n          sugar: 0\n        };\n\n        for (const meal of meals) {\n          if (meal.totalsCache) {\n            dayTotals.calories += meal.totalsCache.calories;\n            dayTotals.protein += meal.totalsCache.protein;\n            dayTotals.fiber += meal.totalsCache.fiber || 0;\n            dayTotals.sugar += meal.totalsCache.sugar || 0;\n          }\n        }\n\n        weeklyData.push({\n          date: dateStr,\n          ...dayTotals\n        });\n      }\n\n      // Calculate averages\n      const averages = {\n        calories: Math.round(weeklyData.reduce((sum, day) => sum + day.calories, 0) / 7),\n        protein: Math.round(weeklyData.reduce((sum, day) => sum + day.protein, 0) / 7),\n        fiber: Math.round(weeklyData.reduce((sum, day) => sum + day.fiber, 0) / 7),\n        sugar: Math.round(weeklyData.reduce((sum, day) => sum + day.sugar, 0) / 7)\n      };\n\n      res.json({\n        period: \"7 days\",\n        averages,\n        daily: weeklyData,\n        trends: {\n          calories: \"stable\", // Could calculate actual trends\n          protein: \"stable\",\n          fiber: \"stable\"\n        }\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to generate weekly report\" });\n    }\n  });\n\n  // Nutrition Goals\n  app.get(\"/api/nutrition-goals\", async (req, res) => {\n    try {\n      const goal = await storage.getNutritionGoal(DEFAULT_USER_ID);\n      res.json(goal || null);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch nutrition goal\" });\n    }\n  });\n\n  app.post(\"/api/nutrition-goals\", async (req, res) => {\n    try {\n      const validatedData = insertNutritionGoalSchema.parse(req.body);\n      const goal = await storage.createNutritionGoal(DEFAULT_USER_ID, validatedData);\n      res.json(goal);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid nutrition goal data\" });\n    }\n  });\n\n  app.put(\"/api/nutrition-goals/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const goal = await storage.updateNutritionGoal(id, req.body);\n      if (!goal) {\n        return res.status(404).json({ message: \"Nutrition goal not found\" });\n      }\n      res.json(goal);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update nutrition goal\" });\n    }\n  });\n\n  // Exercises\n  app.get(\"/api/exercises\", async (req, res) => {\n    try {\n      const exercises = await storage.getExercises();\n      res.json(exercises);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch exercises\" });\n    }\n  });\n\n  app.post(\"/api/exercises\", async (req, res) => {\n    try {\n      const validatedData = insertExerciseSchema.parse(req.body);\n      const exercise = await storage.createExercise(validatedData);\n      res.json(exercise);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid exercise data\" });\n    }\n  });\n\n  // Workouts\n  app.post(\"/api/workouts/start\", async (req, res) => {\n    try {\n      const workout = await storage.startWorkout(DEFAULT_USER_ID, {\n        startedAt: new Date(),\n        endedAt: null,\n        notes: null\n      });\n      res.json({ workoutId: workout.id, workout });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to start workout\" });\n    }\n  });\n\n  app.post(\"/api/workouts/:id/set\", async (req, res) => {\n    try {\n      const { id: workoutId } = req.params;\n      const { action, setId, ...setData } = req.body;\n      \n      if (action === \"add\") {\n        const validatedData = insertSetSchema.parse({\n          ...setData,\n          workoutId\n        });\n        const set = await storage.addSetToWorkout(workoutId, validatedData);\n        res.json(set);\n      } else if (action === \"update\" && setId) {\n        const set = await storage.updateSet(setId, setData);\n        if (!set) {\n          return res.status(404).json({ message: \"Set not found\" });\n        }\n        res.json(set);\n      } else if (action === \"delete\" && setId) {\n        const deleted = await storage.deleteSet(setId);\n        if (!deleted) {\n          return res.status(404).json({ message: \"Set not found\" });\n        }\n        res.json({ success: true });\n      } else {\n        res.status(400).json({ message: \"Invalid action or missing setId\" });\n      }\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to modify set\" });\n    }\n  });\n\n  app.post(\"/api/workouts/:id/finish\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { notes } = req.body;\n      const workout = await storage.finishWorkout(id, notes);\n      if (!workout) {\n        return res.status(404).json({ message: \"Workout not found\" });\n      }\n      res.json(workout);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to finish workout\" });\n    }\n  });\n\n  app.get(\"/api/workouts/history\", async (req, res) => {\n    try {\n      const { limit, offset } = req.query;\n      const workouts = await storage.getWorkouts(\n        DEFAULT_USER_ID, \n        limit ? parseInt(limit as string) : undefined,\n        offset ? parseInt(offset as string) : undefined\n      );\n      res.json(workouts);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch workout history\" });\n    }\n  });\n\n  app.get(\"/api/workouts/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const workout = await storage.getWorkout(id);\n      if (!workout) {\n        return res.status(404).json({ message: \"Workout not found\" });\n      }\n      \n      const sets = await storage.getSetsForWorkout(id);\n      res.json({ ...workout, sets });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch workout\" });\n    }\n  });\n\n  app.delete(\"/api/workouts/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deleteWorkout(id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Workout not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete workout\" });\n    }\n  });\n\n  // Cardio\n  app.post(\"/api/cardio\", async (req, res) => {\n    try {\n      const validatedData = insertCardioEntrySchema.parse(req.body);\n      const entry = await storage.createCardioEntry(DEFAULT_USER_ID, validatedData);\n      res.json(entry);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid cardio data\" });\n    }\n  });\n\n  app.get(\"/api/cardio\", async (req, res) => {\n    try {\n      const { date } = req.query;\n      const entries = await storage.getCardioEntries(DEFAULT_USER_ID, date as string);\n      res.json(entries);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch cardio entries\" });\n    }\n  });\n\n  // Workout Export CSV\n  app.get(\"/api/export.csv\", async (req, res) => {\n    try {\n      const workouts = await storage.getWorkouts(DEFAULT_USER_ID, 1000); // Get all workouts\n      const exercises = await storage.getExercises();\n      const exerciseMap = new Map(exercises.map(e => [e.id, e.name]));\n      \n      let csvContent = \"Date,Exercise,Sets,Reps,Weight (kg),Total Volume,Duration (min)\\n\";\n      \n      for (const workout of workouts) {\n        const sets = await storage.getSetsForWorkout(workout.id);\n        const duration = workout.endedAt ? \n          Math.round((new Date(workout.endedAt).getTime() - new Date(workout.startedAt).getTime()) / 60000) : 0;\n          \n        // Group sets by exercise\n        const exerciseGroups = new Map();\n        sets.forEach(set => {\n          const exerciseName = exerciseMap.get(set.exerciseId) || \"Unknown\";\n          if (!exerciseGroups.has(exerciseName)) {\n            exerciseGroups.set(exerciseName, []);\n          }\n          exerciseGroups.get(exerciseName).push(set);\n        });\n        \n        exerciseGroups.forEach((exerciseSets, exerciseName) => {\n          const totalSets = exerciseSets.length;\n          const totalReps = exerciseSets.reduce((sum: number, set: any) => sum + set.reps, 0);\n          const totalVolume = exerciseSets.reduce((sum: number, set: any) => sum + (set.weight * set.reps), 0);\n          const avgWeight = totalSets > 0 ? exerciseSets.reduce((sum: number, set: any) => sum + set.weight, 0) / totalSets : 0;\n          \n          csvContent += `${workout.startedAt.split('T')[0]},${exerciseName},${totalSets},${totalReps},${avgWeight.toFixed(1)},${totalVolume.toFixed(1)},${duration}\\n`;\n        });\n      }\n      \n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', 'attachment; filename=\"workout-data.csv\"');\n      res.send(csvContent);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to export workout data\" });\n    }\n  });\n\n  // Screen Time Apps\n  app.get(\"/api/screen-time/apps\", async (req, res) => {\n    try {\n      const apps = await storage.getScreenTimeApps();\n      res.json(apps);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch screen time apps\" });\n    }\n  });\n\n  app.post(\"/api/screen-time/apps\", async (req, res) => {\n    try {\n      const validatedData = insertScreenTimeAppSchema.parse(req.body);\n      const app = await storage.createScreenTimeApp(validatedData);\n      res.json(app);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid app data\" });\n    }\n  });\n\n  app.put(\"/api/screen-time/apps/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const app = await storage.updateScreenTimeApp(id, req.body);\n      if (!app) {\n        return res.status(404).json({ message: \"App not found\" });\n      }\n      res.json(app);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update app\" });\n    }\n  });\n\n  // Screen Time Entries\n  app.get(\"/api/screen-time/entries\", async (req, res) => {\n    try {\n      const { date } = req.query;\n      const entries = await storage.getScreenTimeEntries(DEFAULT_USER_ID, date as string);\n      res.json(entries);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch screen time entries\" });\n    }\n  });\n\n  app.get(\"/api/screen-time/entries/week\", async (req, res) => {\n    try {\n      const { startDate } = req.query;\n      if (!startDate) {\n        return res.status(400).json({ message: \"startDate is required\" });\n      }\n      const entries = await storage.getScreenTimeEntriesByWeek(DEFAULT_USER_ID, startDate as string);\n      res.json(entries);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch weekly screen time entries\" });\n    }\n  });\n\n  app.post(\"/api/screen-time/entries\", async (req, res) => {\n    try {\n      const validatedData = insertScreenTimeEntrySchema.parse(req.body);\n      const entry = await storage.createScreenTimeEntry(DEFAULT_USER_ID, validatedData);\n      res.json(entry);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid entry data\" });\n    }\n  });\n\n  // Screen Time Limits\n  app.get(\"/api/screen-time/limits\", async (req, res) => {\n    try {\n      const limits = await storage.getScreenTimeLimits(DEFAULT_USER_ID);\n      res.json(limits);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch screen time limits\" });\n    }\n  });\n\n  app.post(\"/api/screen-time/limits\", async (req, res) => {\n    try {\n      const validatedData = insertScreenTimeLimitSchema.parse(req.body);\n      const limit = await storage.createScreenTimeLimit(DEFAULT_USER_ID, validatedData);\n      res.json(limit);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid limit data\" });\n    }\n  });\n\n  app.put(\"/api/screen-time/limits/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const limit = await storage.updateScreenTimeLimit(id, req.body);\n      if (!limit) {\n        return res.status(404).json({ message: \"Limit not found\" });\n      }\n      res.json(limit);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update limit\" });\n    }\n  });\n\n  app.delete(\"/api/screen-time/limits/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deleteScreenTimeLimit(id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Limit not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete limit\" });\n    }\n  });\n\n  // Screen Time Export\n  app.get(\"/api/screen-time/export\", async (req, res) => {\n    try {\n      const entries = await storage.getScreenTimeEntries(DEFAULT_USER_ID);\n      const apps = await storage.getScreenTimeApps();\n      const appMap = new Map(apps.map(app => [app.id, app.name]));\n\n      let csvContent = \"Date,App,Minutes,Category\\n\";\n      \n      entries.forEach(entry => {\n        const appName = appMap.get(entry.appId) || \"Unknown\";\n        const app = apps.find(a => a.id === entry.appId);\n        const category = app?.category || \"Other\";\n        csvContent += `${entry.date},${appName},${entry.minutes},${category}\\n`;\n      });\n      \n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', 'attachment; filename=\"screen-time-data.csv\"');\n      res.send(csvContent);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to export screen time data\" });\n    }\n  });\n\n  // Watchlist\n  app.get(\"/api/watchlist\", async (req, res) => {\n    try {\n      const items = await storage.getWatchlistItems(DEFAULT_USER_ID);\n      res.json(items);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch watchlist items\" });\n    }\n  });\n\n  app.post(\"/api/watchlist\", async (req, res) => {\n    try {\n      const validatedData = insertWatchlistItemSchema.parse(req.body);\n      const item = await storage.createWatchlistItem(DEFAULT_USER_ID, validatedData);\n      res.json(item);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid watchlist item data\" });\n    }\n  });\n\n  app.put(\"/api/watchlist/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const item = await storage.updateWatchlistItem(id, req.body);\n      if (!item) {\n        return res.status(404).json({ message: \"Watchlist item not found\" });\n      }\n      res.json(item);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update watchlist item\" });\n    }\n  });\n\n  app.delete(\"/api/watchlist/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deleteWatchlistItem(id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Watchlist item not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete watchlist item\" });\n    }\n  });\n\n  // Watchlist Export\n  app.get(\"/api/watchlist/export\", async (req, res) => {\n    try {\n      const items = await storage.getWatchlistItems(DEFAULT_USER_ID);\n\n      let csvContent = \"Title,Type,Source,Status,Length,Finished Date,Added Date\\n\";\n      \n      items.forEach(item => {\n        const finishedDate = item.finishedAt ? new Date(item.finishedAt).toLocaleDateString() : \"\";\n        const addedDate = new Date(item.createdAt || 0).toLocaleDateString();\n        const length = item.length ? `${item.length} min` : \"\";\n        csvContent += `\"${item.title}\",${item.type},${item.source || \"\"},${item.status},\"${length}\",${finishedDate},${addedDate}\\n`;\n      });\n      \n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', 'attachment; filename=\"watchlist-data.csv\"');\n      res.send(csvContent);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to export watchlist data\" });\n    }\n  });\n\n  // Todo Categories\n  app.get(\"/api/todo-categories\", async (req, res) => {\n    try {\n      const categories = await storage.getTodoCategories(DEFAULT_USER_ID);\n      res.json(categories);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch todo categories\" });\n    }\n  });\n\n  app.post(\"/api/todo-categories\", async (req, res) => {\n    try {\n      const validatedData = insertTodoCategorySchema.parse(req.body);\n      const category = await storage.createTodoCategory(DEFAULT_USER_ID, validatedData);\n      res.json(category);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid category data\" });\n    }\n  });\n\n  app.put(\"/api/todo-categories/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const category = await storage.updateTodoCategory(id, req.body);\n      if (!category) {\n        return res.status(404).json({ message: \"Category not found\" });\n      }\n      res.json(category);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update category\" });\n    }\n  });\n\n  app.delete(\"/api/todo-categories/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deleteTodoCategory(id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Category not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete category\" });\n    }\n  });\n\n  // Todos\n  app.get(\"/api/todos\", async (req, res) => {\n    try {\n      const { categoryId, status, dueDate } = req.query;\n      \n      let todos;\n      if (status) {\n        todos = await storage.getTodosByStatus(DEFAULT_USER_ID, status as string);\n      } else if (dueDate) {\n        todos = await storage.getTodosByDueDate(DEFAULT_USER_ID, dueDate as string);\n      } else {\n        todos = await storage.getTodos(DEFAULT_USER_ID, categoryId as string);\n      }\n      \n      res.json(todos);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch todos\" });\n    }\n  });\n\n  app.get(\"/api/todos/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const todo = await storage.getTodo(id);\n      if (!todo) {\n        return res.status(404).json({ message: \"Todo not found\" });\n      }\n      res.json(todo);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch todo\" });\n    }\n  });\n\n  app.post(\"/api/todos\", async (req, res) => {\n    try {\n      const validatedData = insertTodoSchema.parse(req.body);\n      const todo = await storage.createTodo(DEFAULT_USER_ID, validatedData);\n      res.json(todo);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid todo data\" });\n    }\n  });\n\n  app.put(\"/api/todos/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const todo = await storage.updateTodo(id, req.body);\n      if (!todo) {\n        return res.status(404).json({ message: \"Todo not found\" });\n      }\n      res.json(todo);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update todo\" });\n    }\n  });\n\n  app.delete(\"/api/todos/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deleteTodo(id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Todo not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete todo\" });\n    }\n  });\n\n  // Calendar Events\n  app.get(\"/api/calendar-events\", async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      const events = await storage.getCalendarEvents(DEFAULT_USER_ID, startDate as string, endDate as string);\n      res.json(events);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch calendar events\" });\n    }\n  });\n\n  app.post(\"/api/calendar-events\", async (req, res) => {\n    try {\n      const validatedData = insertCalendarEventSchema.parse(req.body);\n      const event = await storage.createCalendarEvent(DEFAULT_USER_ID, validatedData);\n      res.json(event);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid event data\" });\n    }\n  });\n\n  app.put(\"/api/calendar-events/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const event = await storage.updateCalendarEvent(id, req.body);\n      if (!event) {\n        return res.status(404).json({ message: \"Event not found\" });\n      }\n      res.json(event);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update event\" });\n    }\n  });\n\n  app.delete(\"/api/calendar-events/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deleteCalendarEvent(id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Event not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete event\" });\n    }\n  });\n\n  // Weekly Plans\n  app.get(\"/api/weekly-plans\", async (req, res) => {\n    try {\n      const { weekStartDate } = req.query;\n      \n      if (weekStartDate) {\n        const plan = await storage.getWeeklyPlan(DEFAULT_USER_ID, weekStartDate as string);\n        res.json(plan);\n      } else {\n        const plans = await storage.getWeeklyPlans(DEFAULT_USER_ID);\n        res.json(plans);\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch weekly plans\" });\n    }\n  });\n\n  app.post(\"/api/weekly-plans\", async (req, res) => {\n    try {\n      const validatedData = insertWeeklyPlanSchema.parse(req.body);\n      const plan = await storage.createWeeklyPlan(DEFAULT_USER_ID, validatedData);\n      res.json(plan);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid weekly plan data\" });\n    }\n  });\n\n  app.put(\"/api/weekly-plans/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const plan = await storage.updateWeeklyPlan(id, req.body);\n      if (!plan) {\n        return res.status(404).json({ message: \"Weekly plan not found\" });\n      }\n      res.json(plan);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update weekly plan\" });\n    }\n  });\n\n  app.delete(\"/api/weekly-plans/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deleteWeeklyPlan(id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Weekly plan not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete weekly plan\" });\n    }\n  });\n\n  // Daily Plans\n  app.get(\"/api/daily-plans\", async (req, res) => {\n    try {\n      const { date, weekStartDate } = req.query;\n      \n      if (date) {\n        const plan = await storage.getDailyPlan(DEFAULT_USER_ID, date as string);\n        res.json(plan);\n      } else {\n        const plans = await storage.getDailyPlans(DEFAULT_USER_ID, weekStartDate as string);\n        res.json(plans);\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch daily plans\" });\n    }\n  });\n\n  app.post(\"/api/daily-plans\", async (req, res) => {\n    try {\n      const validatedData = insertDailyPlanSchema.parse(req.body);\n      const plan = await storage.createDailyPlan(DEFAULT_USER_ID, validatedData);\n      res.json(plan);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid daily plan data\" });\n    }\n  });\n\n  app.put(\"/api/daily-plans/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const plan = await storage.updateDailyPlan(id, req.body);\n      if (!plan) {\n        return res.status(404).json({ message: \"Daily plan not found\" });\n      }\n      res.json(plan);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update daily plan\" });\n    }\n  });\n\n  app.delete(\"/api/daily-plans/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deleteDailyPlan(id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Daily plan not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete daily plan\" });\n    }\n  });\n\n  // Export data\n  app.get(\"/api/export\", async (req, res) => {\n    try {\n      const habits = await storage.getHabits(DEFAULT_USER_ID);\n      const habitEntries = await storage.getHabitEntries(DEFAULT_USER_ID);\n      const goals = await storage.getGoals(DEFAULT_USER_ID);\n      const healthEntries = await storage.getHealthEntries(DEFAULT_USER_ID);\n      const timerSessions = await storage.getTimerSessions(DEFAULT_USER_ID);\n      const mealEntries = await storage.getMealEntries(DEFAULT_USER_ID);\n      const nutritionGoal = await storage.getNutritionGoal(DEFAULT_USER_ID);\n\n      const exportData = {\n        habits,\n        habitEntries,\n        goals,\n        healthEntries,\n        timerSessions,\n        mealEntries,\n        nutritionGoal,\n        exportedAt: new Date().toISOString()\n      };\n\n      res.setHeader('Content-Type', 'application/json');\n      res.setHeader('Content-Disposition', 'attachment; filename=\"lifetrack-data.json\"');\n      res.json(exportData);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to export data\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":37307},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser,\n  type Habit,\n  type InsertHabit,\n  type HabitEntry,\n  type InsertHabitEntry,\n  type Goal,\n  type InsertGoal,\n  type HealthEntry,\n  type InsertHealthEntry,\n  type TimerSession,\n  type InsertTimerSession,\n  type FoodItem,\n  type InsertFoodItem,\n  type MealEntry,\n  type InsertMealEntry,\n  type NutritionGoal,\n  type InsertNutritionGoal,\n  type Exercise,\n  type InsertExercise,\n  type Workout,\n  type InsertWorkout,\n  type Set,\n  type InsertSet,\n  type CardioEntry,\n  type InsertCardioEntry,\n  type ScreenTimeApp,\n  type InsertScreenTimeApp,\n  type ScreenTimeEntry,\n  type InsertScreenTimeEntry,\n  type ScreenTimeLimit,\n  type InsertScreenTimeLimit,\n  type WatchlistItem,\n  type InsertWatchlistItem,\n  type TodoCategory,\n  type InsertTodoCategory,\n  type Todo,\n  type InsertTodo,\n  type CalendarEvent,\n  type InsertCalendarEvent,\n  type WeeklyPlan,\n  type InsertWeeklyPlan,\n  type DailyPlan,\n  type InsertDailyPlan\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Habits\n  getHabits(userId: string): Promise<Habit[]>;\n  createHabit(userId: string, habit: InsertHabit): Promise<Habit>;\n  updateHabit(id: string, habit: Partial<Habit>): Promise<Habit | undefined>;\n  deleteHabit(id: string): Promise<boolean>;\n\n  // Habit Entries\n  getHabitEntries(userId: string, date?: string): Promise<HabitEntry[]>;\n  createHabitEntry(userId: string, entry: InsertHabitEntry): Promise<HabitEntry>;\n  updateHabitEntry(id: string, entry: Partial<HabitEntry>): Promise<HabitEntry | undefined>;\n\n  // Goals\n  getGoals(userId: string): Promise<Goal[]>;\n  createGoal(userId: string, goal: InsertGoal): Promise<Goal>;\n  updateGoal(id: string, goal: Partial<Goal>): Promise<Goal | undefined>;\n  deleteGoal(id: string): Promise<boolean>;\n\n  // Health Entries\n  getHealthEntries(userId: string, startDate?: string, endDate?: string): Promise<HealthEntry[]>;\n  createHealthEntry(userId: string, entry: InsertHealthEntry): Promise<HealthEntry>;\n  updateHealthEntry(id: string, entry: Partial<HealthEntry>): Promise<HealthEntry | undefined>;\n\n  // Timer Sessions\n  getTimerSessions(userId: string, date?: string): Promise<TimerSession[]>;\n  createTimerSession(userId: string, session: InsertTimerSession): Promise<TimerSession>;\n\n  // Food Items\n  searchFoodItems(query: string, limit?: number): Promise<FoodItem[]>;\n  getFoodItem(id: string): Promise<FoodItem | undefined>;\n  getFoodItemByBarcode(barcode: string): Promise<FoodItem | undefined>;\n  createFoodItem(foodItem: InsertFoodItem): Promise<FoodItem>;\n\n  // Meal Entries\n  getMealEntries(userId: string, date?: string): Promise<MealEntry[]>;\n  createMealEntry(userId: string, entry: InsertMealEntry): Promise<MealEntry>;\n  updateMealEntry(id: string, entry: Partial<MealEntry>): Promise<MealEntry | undefined>;\n  deleteMealEntry(id: string): Promise<boolean>;\n\n  // Nutrition Goals\n  getNutritionGoal(userId: string): Promise<NutritionGoal | undefined>;\n  createNutritionGoal(userId: string, goal: InsertNutritionGoal): Promise<NutritionGoal>;\n  updateNutritionGoal(id: string, goal: Partial<NutritionGoal>): Promise<NutritionGoal | undefined>;\n\n  // Exercises\n  getExercises(): Promise<Exercise[]>;\n  createExercise(exercise: InsertExercise): Promise<Exercise>;\n  \n  // Workouts\n  getWorkouts(userId: string, limit?: number, offset?: number): Promise<Workout[]>;\n  getWorkout(id: string): Promise<Workout | undefined>;\n  startWorkout(userId: string, workout: InsertWorkout): Promise<Workout>;\n  finishWorkout(id: string, notes?: string): Promise<Workout | undefined>;\n  deleteWorkout(id: string): Promise<boolean>;\n  \n  // Sets\n  getSetsForWorkout(workoutId: string): Promise<Set[]>;\n  addSetToWorkout(workoutId: string, set: InsertSet): Promise<Set>;\n  updateSet(id: string, set: Partial<Set>): Promise<Set | undefined>;\n  deleteSet(id: string): Promise<boolean>;\n  \n  // Cardio\n  getCardioEntries(userId: string, date?: string): Promise<CardioEntry[]>;\n  createCardioEntry(userId: string, entry: InsertCardioEntry): Promise<CardioEntry>;\n\n  // Screen Time Apps\n  getScreenTimeApps(): Promise<ScreenTimeApp[]>;\n  createScreenTimeApp(app: InsertScreenTimeApp): Promise<ScreenTimeApp>;\n  updateScreenTimeApp(id: string, app: Partial<ScreenTimeApp>): Promise<ScreenTimeApp | undefined>;\n\n  // Screen Time Entries\n  getScreenTimeEntries(userId: string, date?: string): Promise<ScreenTimeEntry[]>;\n  createScreenTimeEntry(userId: string, entry: InsertScreenTimeEntry): Promise<ScreenTimeEntry>;\n  getScreenTimeEntriesByWeek(userId: string, startDate: string): Promise<ScreenTimeEntry[]>;\n\n  // Screen Time Limits\n  getScreenTimeLimits(userId: string): Promise<ScreenTimeLimit[]>;\n  createScreenTimeLimit(userId: string, limit: InsertScreenTimeLimit): Promise<ScreenTimeLimit>;\n  updateScreenTimeLimit(id: string, limit: Partial<ScreenTimeLimit>): Promise<ScreenTimeLimit | undefined>;\n  deleteScreenTimeLimit(id: string): Promise<boolean>;\n\n  // Watchlist\n  getWatchlistItems(userId: string): Promise<WatchlistItem[]>;\n  createWatchlistItem(userId: string, item: InsertWatchlistItem): Promise<WatchlistItem>;\n  updateWatchlistItem(id: string, item: Partial<WatchlistItem>): Promise<WatchlistItem | undefined>;\n  deleteWatchlistItem(id: string): Promise<boolean>;\n\n  // Todo Categories\n  getTodoCategories(userId: string): Promise<TodoCategory[]>;\n  createTodoCategory(userId: string, category: InsertTodoCategory): Promise<TodoCategory>;\n  updateTodoCategory(id: string, category: Partial<TodoCategory>): Promise<TodoCategory | undefined>;\n  deleteTodoCategory(id: string): Promise<boolean>;\n\n  // Todos\n  getTodos(userId: string, categoryId?: string): Promise<Todo[]>;\n  getTodo(id: string): Promise<Todo | undefined>;\n  createTodo(userId: string, todo: InsertTodo): Promise<Todo>;\n  updateTodo(id: string, todo: Partial<Todo>): Promise<Todo | undefined>;\n  deleteTodo(id: string): Promise<boolean>;\n  getTodosByStatus(userId: string, status: string): Promise<Todo[]>;\n  getTodosByDueDate(userId: string, date: string): Promise<Todo[]>;\n\n  // Calendar Events\n  getCalendarEvents(userId: string, startDate?: string, endDate?: string): Promise<CalendarEvent[]>;\n  createCalendarEvent(userId: string, event: InsertCalendarEvent): Promise<CalendarEvent>;\n  updateCalendarEvent(id: string, event: Partial<CalendarEvent>): Promise<CalendarEvent | undefined>;\n  deleteCalendarEvent(id: string): Promise<boolean>;\n\n  // Weekly Plans\n  getWeeklyPlans(userId: string): Promise<WeeklyPlan[]>;\n  getWeeklyPlan(userId: string, weekStartDate: string): Promise<WeeklyPlan | undefined>;\n  createWeeklyPlan(userId: string, plan: InsertWeeklyPlan): Promise<WeeklyPlan>;\n  updateWeeklyPlan(id: string, plan: Partial<WeeklyPlan>): Promise<WeeklyPlan | undefined>;\n  deleteWeeklyPlan(id: string): Promise<boolean>;\n\n  // Daily Plans\n  getDailyPlans(userId: string, weekStartDate?: string): Promise<DailyPlan[]>;\n  getDailyPlan(userId: string, date: string): Promise<DailyPlan | undefined>;\n  createDailyPlan(userId: string, plan: InsertDailyPlan): Promise<DailyPlan>;\n  updateDailyPlan(id: string, plan: Partial<DailyPlan>): Promise<DailyPlan | undefined>;\n  deleteDailyPlan(id: string): Promise<boolean>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private habits: Map<string, Habit>;\n  private habitEntries: Map<string, HabitEntry>;\n  private goals: Map<string, Goal>;\n  private healthEntries: Map<string, HealthEntry>;\n  private timerSessions: Map<string, TimerSession>;\n  private foodItems: Map<string, FoodItem>;\n  private mealEntries: Map<string, MealEntry>;\n  private nutritionGoals: Map<string, NutritionGoal>;\n  private exercises: Map<string, Exercise>;\n  private workouts: Map<string, Workout>;\n  private sets: Map<string, Set>;\n  private cardioEntries: Map<string, CardioEntry>;\n  private screenTimeApps: Map<string, ScreenTimeApp>;\n  private screenTimeEntries: Map<string, ScreenTimeEntry>;\n  private screenTimeLimits: Map<string, ScreenTimeLimit>;\n  private watchlistItems: Map<string, WatchlistItem>;\n  private todoCategories: Map<string, TodoCategory>;\n  private todos: Map<string, Todo>;\n  private calendarEvents: Map<string, CalendarEvent>;\n  private weeklyPlans: Map<string, WeeklyPlan>;\n  private dailyPlans: Map<string, DailyPlan>;\n\n  constructor() {\n    this.users = new Map();\n    this.habits = new Map();\n    this.habitEntries = new Map();\n    this.goals = new Map();\n    this.healthEntries = new Map();\n    this.timerSessions = new Map();\n    this.foodItems = new Map();\n    this.mealEntries = new Map();\n    this.nutritionGoals = new Map();\n    this.exercises = new Map();\n    this.workouts = new Map();\n    this.sets = new Map();\n    this.cardioEntries = new Map();\n    this.screenTimeApps = new Map();\n    this.screenTimeEntries = new Map();\n    this.screenTimeLimits = new Map();\n    this.watchlistItems = new Map();\n    this.todoCategories = new Map();\n    this.todos = new Map();\n    this.calendarEvents = new Map();\n    this.weeklyPlans = new Map();\n    this.dailyPlans = new Map();\n\n    // Create a default user for demo purposes\n    const defaultUser: User = {\n      id: \"default-user\",\n      username: \"demo\",\n      password: \"demo\"\n    };\n    this.users.set(defaultUser.id, defaultUser);\n    \n    // Seed some common food items for testing\n    this.seedFoodDatabase();\n    \n    // Seed basic exercises\n    this.seedExerciseDatabase();\n    \n    // Seed screen time apps\n    this.seedScreenTimeApps();\n    \n    // Seed todo categories\n    this.seedTodoCategories();\n  }\n\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  // Habits\n  async getHabits(userId: string): Promise<Habit[]> {\n    return Array.from(this.habits.values()).filter(habit => habit.userId === userId);\n  }\n\n  async createHabit(userId: string, insertHabit: InsertHabit): Promise<Habit> {\n    const id = randomUUID();\n    const habit: Habit = { \n      id, \n      userId,\n      name: insertHabit.name,\n      description: insertHabit.description || null,\n      trackingType: insertHabit.trackingType || \"boolean\",\n      unit: insertHabit.unit || null,\n      targetValue: insertHabit.targetValue || null,\n      frequency: insertHabit.frequency || \"daily\",\n      frequencyDays: insertHabit.frequencyDays || null,\n      icon: insertHabit.icon || null,\n      color: insertHabit.color || \"#1976D2\",\n      isArchived: false,\n      streakDays: 0,\n      createdAt: new Date()\n    };\n    this.habits.set(id, habit);\n    return habit;\n  }\n\n  async updateHabit(id: string, updateHabit: Partial<Habit>): Promise<Habit | undefined> {\n    const existing = this.habits.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...updateHabit };\n    this.habits.set(id, updated);\n    return updated;\n  }\n\n  async deleteHabit(id: string): Promise<boolean> {\n    return this.habits.delete(id);\n  }\n\n  // Habit Entries\n  async getHabitEntries(userId: string, date?: string): Promise<HabitEntry[]> {\n    return Array.from(this.habitEntries.values()).filter(entry => \n      entry.userId === userId && (!date || entry.date === date)\n    );\n  }\n\n  async createHabitEntry(userId: string, insertEntry: InsertHabitEntry): Promise<HabitEntry> {\n    const id = randomUUID();\n    const entry: HabitEntry = { \n      id, \n      userId,\n      habitId: insertEntry.habitId,\n      completed: insertEntry.completed || false,\n      value: insertEntry.value || null,\n      notes: insertEntry.notes || null,\n      date: insertEntry.date,\n      createdAt: new Date()\n    };\n    this.habitEntries.set(id, entry);\n    return entry;\n  }\n\n  async updateHabitEntry(id: string, updateEntry: Partial<HabitEntry>): Promise<HabitEntry | undefined> {\n    const existing = this.habitEntries.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...updateEntry };\n    this.habitEntries.set(id, updated);\n    return updated;\n  }\n\n  // Goals\n  async getGoals(userId: string): Promise<Goal[]> {\n    return Array.from(this.goals.values()).filter(goal => goal.userId === userId);\n  }\n\n  async createGoal(userId: string, insertGoal: InsertGoal): Promise<Goal> {\n    const id = randomUUID();\n    const goal: Goal = { \n      id, \n      userId,\n      title: insertGoal.title,\n      description: insertGoal.description || null,\n      deadline: insertGoal.deadline || null,\n      progress: insertGoal.progress || 0,\n      category: insertGoal.category || \"personal\",\n      createdAt: new Date()\n    };\n    this.goals.set(id, goal);\n    return goal;\n  }\n\n  async updateGoal(id: string, updateGoal: Partial<Goal>): Promise<Goal | undefined> {\n    const existing = this.goals.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...updateGoal };\n    this.goals.set(id, updated);\n    return updated;\n  }\n\n  async deleteGoal(id: string): Promise<boolean> {\n    return this.goals.delete(id);\n  }\n\n  // Health Entries\n  async getHealthEntries(userId: string, startDate?: string, endDate?: string): Promise<HealthEntry[]> {\n    return Array.from(this.healthEntries.values()).filter(entry => {\n      if (entry.userId !== userId) return false;\n      if (startDate && entry.date < startDate) return false;\n      if (endDate && entry.date > endDate) return false;\n      return true;\n    });\n  }\n\n  async createHealthEntry(userId: string, insertEntry: InsertHealthEntry): Promise<HealthEntry> {\n    const id = randomUUID();\n    const entry: HealthEntry = { \n      id, \n      userId,\n      date: insertEntry.date,\n      sleepHours: insertEntry.sleepHours || null,\n      sleepQuality: insertEntry.sleepQuality || null,\n      exerciseMinutes: insertEntry.exerciseMinutes || null,\n      exerciseType: insertEntry.exerciseType || null,\n      caloriesBurned: insertEntry.caloriesBurned || null,\n      mood: insertEntry.mood || null,\n      notes: insertEntry.notes || null,\n      createdAt: new Date()\n    };\n    this.healthEntries.set(id, entry);\n    return entry;\n  }\n\n  async updateHealthEntry(id: string, updateEntry: Partial<HealthEntry>): Promise<HealthEntry | undefined> {\n    const existing = this.healthEntries.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...updateEntry };\n    this.healthEntries.set(id, updated);\n    return updated;\n  }\n\n  // Timer Sessions\n  async getTimerSessions(userId: string, date?: string): Promise<TimerSession[]> {\n    return Array.from(this.timerSessions.values()).filter(session => \n      session.userId === userId && (!date || session.date === date)\n    );\n  }\n\n  async createTimerSession(userId: string, insertSession: InsertTimerSession): Promise<TimerSession> {\n    const id = randomUUID();\n    const session: TimerSession = { \n      id, \n      userId,\n      duration: insertSession.duration,\n      type: insertSession.type || \"pomodoro\",\n      completed: insertSession.completed || false,\n      date: insertSession.date,\n      createdAt: new Date()\n    };\n    this.timerSessions.set(id, session);\n    return session;\n  }\n\n  // Food Items\n  async searchFoodItems(query: string, limit = 20): Promise<FoodItem[]> {\n    const results: FoodItem[] = [];\n    const searchTerm = query.toLowerCase();\n    \n    for (const food of Array.from(this.foodItems.values())) {\n      if (\n        food.name.toLowerCase().includes(searchTerm) ||\n        (food.brand && food.brand.toLowerCase().includes(searchTerm))\n      ) {\n        results.push(food);\n        if (results.length >= limit) break;\n      }\n    }\n    \n    return results;\n  }\n\n  async getFoodItem(id: string): Promise<FoodItem | undefined> {\n    return this.foodItems.get(id);\n  }\n\n  async getFoodItemByBarcode(barcode: string): Promise<FoodItem | undefined> {\n    for (const food of Array.from(this.foodItems.values())) {\n      if (food.barcode === barcode) {\n        return food;\n      }\n    }\n    return undefined;\n  }\n\n  async createFoodItem(insertFoodItem: InsertFoodItem): Promise<FoodItem> {\n    const id = randomUUID();\n    const foodItem: FoodItem = {\n      id,\n      name: insertFoodItem.name,\n      brand: insertFoodItem.brand || null,\n      barcode: insertFoodItem.barcode || null,\n      servings: insertFoodItem.servings || null,\n      nutrients: insertFoodItem.nutrients,\n      source: insertFoodItem.source,\n      verified: insertFoodItem.verified || false,\n      createdAt: new Date()\n    };\n    this.foodItems.set(id, foodItem);\n    return foodItem;\n  }\n\n  // Meal Entries\n  async getMealEntries(userId: string, date?: string): Promise<MealEntry[]> {\n    return Array.from(this.mealEntries.values()).filter(entry => \n      entry.userId === userId && (!date || entry.date === date)\n    );\n  }\n\n  async createMealEntry(userId: string, insertEntry: InsertMealEntry): Promise<MealEntry> {\n    const id = randomUUID();\n    const entry: MealEntry = {\n      id,\n      userId,\n      date: insertEntry.date,\n      mealType: insertEntry.mealType,\n      datetime: insertEntry.datetime,\n      items: insertEntry.items,\n      source: insertEntry.source,\n      totalsCache: insertEntry.totalsCache || null,\n      createdAt: new Date()\n    };\n    this.mealEntries.set(id, entry);\n    return entry;\n  }\n\n  async updateMealEntry(id: string, updateEntry: Partial<MealEntry>): Promise<MealEntry | undefined> {\n    const existing = this.mealEntries.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...updateEntry };\n    this.mealEntries.set(id, updated);\n    return updated;\n  }\n\n  async deleteMealEntry(id: string): Promise<boolean> {\n    return this.mealEntries.delete(id);\n  }\n\n  // Nutrition Goals\n  async getNutritionGoal(userId: string): Promise<NutritionGoal | undefined> {\n    for (const goal of Array.from(this.nutritionGoals.values())) {\n      if (goal.userId === userId && goal.isActive) {\n        return goal;\n      }\n    }\n    return undefined;\n  }\n\n  async createNutritionGoal(userId: string, insertGoal: InsertNutritionGoal): Promise<NutritionGoal> {\n    const id = randomUUID();\n    const goal: NutritionGoal = {\n      id,\n      userId,\n      calorieTarget: insertGoal.calorieTarget,\n      proteinTarget: insertGoal.proteinTarget,\n      carbsTarget: insertGoal.carbsTarget,\n      fatTarget: insertGoal.fatTarget,\n      fiberTarget: insertGoal.fiberTarget || 25,\n      sodiumTarget: insertGoal.sodiumTarget || 2300,\n      isActive: true,\n      createdAt: new Date()\n    };\n    this.nutritionGoals.set(id, goal);\n    return goal;\n  }\n\n  async updateNutritionGoal(id: string, updateGoal: Partial<NutritionGoal>): Promise<NutritionGoal | undefined> {\n    const existing = this.nutritionGoals.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...updateGoal };\n    this.nutritionGoals.set(id, updated);\n    return updated;\n  }\n\n  private seedFoodDatabase(): void {\n    // Common foods with accurate nutritional data\n    const commonFoods = [\n      {\n        name: \"Banana\",\n        brand: null,\n        barcode: \"123456789012\",\n        servings: [\n          { unit: \"medium\", grams: 118, description: \"1 medium banana (7-8 inches)\" },\n          { unit: \"large\", grams: 136, description: \"1 large banana (8-9 inches)\" },\n          { unit: \"cup\", grams: 150, description: \"1 cup sliced\" }\n        ],\n        nutrients: {\n          calories: 89,\n          protein: 1.1,\n          carbs: 22.8,\n          fat: 0.3,\n          fiber: 2.6,\n          sugar: 12.2,\n          sodium: 1,\n          potassium: 358,\n          vitaminB12: 0\n        },\n        source: \"usda\" as const,\n        verified: true\n      },\n      {\n        name: \"Chicken Breast\",\n        brand: null,\n        barcode: \"234567890123\",\n        servings: [\n          { unit: \"breast\", grams: 172, description: \"1 breast, boneless, skinless\" },\n          { unit: \"cup\", grams: 140, description: \"1 cup diced\" },\n          { unit: \"oz\", grams: 28.35, description: \"1 ounce\" }\n        ],\n        nutrients: {\n          calories: 165,\n          protein: 31,\n          carbs: 0,\n          fat: 3.6,\n          fiber: 0,\n          sugar: 0,\n          sodium: 74,\n          potassium: 256,\n          iron: 0.9\n        },\n        source: \"usda\" as const,\n        verified: true\n      },\n      {\n        name: \"Brown Rice\",\n        brand: null,\n        barcode: \"345678901234\",\n        servings: [\n          { unit: \"cup\", grams: 195, description: \"1 cup cooked\" },\n          { unit: \"cup-dry\", grams: 185, description: \"1 cup uncooked\" }\n        ],\n        nutrients: {\n          calories: 111,\n          protein: 2.6,\n          carbs: 23,\n          fat: 0.9,\n          fiber: 1.8,\n          sugar: 0.4,\n          sodium: 5,\n          magnesium: 43,\n          iron: 0.4\n        },\n        source: \"usda\" as const,\n        verified: true\n      },\n      {\n        name: \"Greek Yogurt\",\n        brand: \"Generic\",\n        barcode: \"456789012345\",\n        servings: [\n          { unit: \"cup\", grams: 245, description: \"1 cup (8 fl oz)\" },\n          { unit: \"container\", grams: 170, description: \"1 container (6 oz)\" }\n        ],\n        nutrients: {\n          calories: 59,\n          protein: 10,\n          carbs: 3.6,\n          fat: 0.4,\n          fiber: 0,\n          sugar: 3.2,\n          sodium: 36,\n          calcium: 110,\n          vitaminB12: 0.5\n        },\n        source: \"usda\" as const,\n        verified: true\n      },\n      {\n        name: \"Almonds\",\n        brand: null,\n        barcode: \"567890123456\",\n        servings: [\n          { unit: \"oz\", grams: 28, description: \"1 ounce (23 almonds)\" },\n          { unit: \"cup\", grams: 143, description: \"1 cup whole\" }\n        ],\n        nutrients: {\n          calories: 579,\n          protein: 21.2,\n          carbs: 21.6,\n          fat: 49.9,\n          fiber: 12.5,\n          sugar: 4.4,\n          sodium: 1,\n          calcium: 269,\n          magnesium: 270,\n          iron: 3.7\n        },\n        source: \"usda\" as const,\n        verified: true\n      }\n    ];\n\n    commonFoods.forEach(food => {\n      const id = randomUUID();\n      this.foodItems.set(id, {\n        id,\n        name: food.name,\n        brand: food.brand,\n        barcode: food.barcode,\n        servings: food.servings,\n        nutrients: food.nutrients,\n        source: food.source,\n        verified: food.verified,\n        createdAt: new Date()\n      });\n    });\n  }\n\n  private seedExerciseDatabase() {\n    const basicExercises = [\n      \"Squat\",\n      \"Bench Press\", \n      \"Deadlift\",\n      \"Overhead Press\",\n      \"Barbell Row\",\n      \"Pull-up\",\n      \"Chin-up\",\n      \"Dip\",\n      \"Lat Pulldown\",\n      \"Leg Press\",\n      \"Leg Curl\",\n      \"Leg Extension\",\n      \"Calf Raise\",\n      \"Bicep Curl\",\n      \"Tricep Extension\",\n      \"Shoulder Raise\",\n      \"Push-up\",\n      \"Plank\",\n      \"Lunge\",\n      \"Hip Thrust\"\n    ];\n\n    basicExercises.forEach(name => {\n      const id = randomUUID();\n      this.exercises.set(id, {\n        id,\n        name,\n        isCustom: false,\n        createdAt: new Date()\n      });\n    });\n  }\n\n  // Exercise methods\n  async getExercises(): Promise<Exercise[]> {\n    return Array.from(this.exercises.values()).sort((a, b) => a.name.localeCompare(b.name));\n  }\n\n  async createExercise(exercise: InsertExercise): Promise<Exercise> {\n    const id = randomUUID();\n    const now = new Date();\n    const newExercise: Exercise = {\n      id,\n      name: exercise.name,\n      isCustom: exercise.isCustom ?? true,\n      createdAt: now\n    };\n    this.exercises.set(id, newExercise);\n    return newExercise;\n  }\n\n  // Workout methods\n  async getWorkouts(userId: string, limit = 20, offset = 0): Promise<Workout[]> {\n    const userWorkouts = Array.from(this.workouts.values())\n      .filter(workout => workout.userId === userId)\n      .sort((a, b) => new Date(b.startedAt).getTime() - new Date(a.startedAt).getTime())\n      .slice(offset, offset + limit);\n    return userWorkouts;\n  }\n\n  async getWorkout(id: string): Promise<Workout | undefined> {\n    return this.workouts.get(id);\n  }\n\n  async startWorkout(userId: string, workout: InsertWorkout): Promise<Workout> {\n    const id = randomUUID();\n    const now = new Date();\n    const newWorkout: Workout = {\n      id,\n      userId,\n      startedAt: workout.startedAt || now,\n      endedAt: workout.endedAt ?? null,\n      notes: workout.notes ?? null,\n      createdAt: now\n    };\n    this.workouts.set(id, newWorkout);\n    return newWorkout;\n  }\n\n  async finishWorkout(id: string, notes?: string): Promise<Workout | undefined> {\n    const workout = this.workouts.get(id);\n    if (!workout) return undefined;\n    \n    const updatedWorkout: Workout = {\n      ...workout,\n      endedAt: new Date(),\n      notes: notes ?? workout.notes\n    };\n    this.workouts.set(id, updatedWorkout);\n    return updatedWorkout;\n  }\n\n  async deleteWorkout(id: string): Promise<boolean> {\n    // Also delete all sets for this workout\n    for (const [setId, set] of this.sets.entries()) {\n      if (set.workoutId === id) {\n        this.sets.delete(setId);\n      }\n    }\n    return this.workouts.delete(id);\n  }\n\n  // Set methods\n  async getSetsForWorkout(workoutId: string): Promise<Set[]> {\n    return Array.from(this.sets.values())\n      .filter(set => set.workoutId === workoutId)\n      .sort((a, b) => (a.orderIndex ?? 0) - (b.orderIndex ?? 0));\n  }\n\n  async addSetToWorkout(workoutId: string, set: InsertSet): Promise<Set> {\n    const id = randomUUID();\n    const now = new Date();\n    \n    // Get current max order index for this workout\n    const existingSets = await this.getSetsForWorkout(workoutId);\n    const maxOrderIndex = existingSets.reduce((max, s) => Math.max(max, s.orderIndex ?? 0), -1);\n    \n    const newSet: Set = {\n      id,\n      workoutId: set.workoutId,\n      exerciseId: set.exerciseId,\n      weight: set.weight,\n      reps: set.reps,\n      orderIndex: set.orderIndex ?? (maxOrderIndex + 1),\n      createdAt: now\n    };\n    this.sets.set(id, newSet);\n    return newSet;\n  }\n\n  async updateSet(id: string, set: Partial<Set>): Promise<Set | undefined> {\n    const existingSet = this.sets.get(id);\n    if (!existingSet) return undefined;\n    \n    const updatedSet: Set = { ...existingSet, ...set };\n    this.sets.set(id, updatedSet);\n    return updatedSet;\n  }\n\n  async deleteSet(id: string): Promise<boolean> {\n    return this.sets.delete(id);\n  }\n\n  // Cardio methods\n  async getCardioEntries(userId: string, date?: string): Promise<CardioEntry[]> {\n    let entries = Array.from(this.cardioEntries.values())\n      .filter(entry => entry.userId === userId);\n    \n    if (date) {\n      entries = entries.filter(entry => entry.date === date);\n    }\n    \n    return entries.sort((a, b) => new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime());\n  }\n\n  async createCardioEntry(userId: string, entry: InsertCardioEntry): Promise<CardioEntry> {\n    const id = randomUUID();\n    const now = new Date();\n    const newEntry: CardioEntry = {\n      id,\n      userId,\n      date: entry.date,\n      type: entry.type,\n      durationSec: entry.durationSec,\n      distanceMeters: entry.distanceMeters ?? null,\n      notes: entry.notes ?? null,\n      createdAt: now\n    };\n    this.cardioEntries.set(id, newEntry);\n    return newEntry;\n  }\n\n  // Screen Time Apps methods\n  async getScreenTimeApps(): Promise<ScreenTimeApp[]> {\n    return Array.from(this.screenTimeApps.values()).filter(app => !app.isExcluded);\n  }\n\n  async createScreenTimeApp(app: InsertScreenTimeApp): Promise<ScreenTimeApp> {\n    const id = randomUUID();\n    const now = new Date();\n    const newApp: ScreenTimeApp = {\n      id,\n      name: app.name,\n      category: app.category || \"Other\",\n      isExcluded: app.isExcluded || false,\n      createdAt: now\n    };\n    this.screenTimeApps.set(id, newApp);\n    return newApp;\n  }\n\n  async updateScreenTimeApp(id: string, app: Partial<ScreenTimeApp>): Promise<ScreenTimeApp | undefined> {\n    const existingApp = this.screenTimeApps.get(id);\n    if (!existingApp) return undefined;\n    \n    const updatedApp: ScreenTimeApp = { ...existingApp, ...app };\n    this.screenTimeApps.set(id, updatedApp);\n    return updatedApp;\n  }\n\n  // Screen Time Entries methods\n  async getScreenTimeEntries(userId: string, date?: string): Promise<ScreenTimeEntry[]> {\n    let entries = Array.from(this.screenTimeEntries.values())\n      .filter(entry => entry.userId === userId);\n    \n    if (date) {\n      entries = entries.filter(entry => entry.date === date);\n    }\n    \n    return entries.sort((a, b) => new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime());\n  }\n\n  async createScreenTimeEntry(userId: string, entry: InsertScreenTimeEntry): Promise<ScreenTimeEntry> {\n    const id = randomUUID();\n    const now = new Date();\n    const newEntry: ScreenTimeEntry = {\n      id,\n      userId,\n      appId: entry.appId,\n      date: entry.date,\n      minutes: entry.minutes,\n      createdAt: now\n    };\n    this.screenTimeEntries.set(id, newEntry);\n    return newEntry;\n  }\n\n  async getScreenTimeEntriesByWeek(userId: string, startDate: string): Promise<ScreenTimeEntry[]> {\n    const start = new Date(startDate);\n    const end = new Date(start);\n    end.setDate(start.getDate() + 6);\n    \n    return Array.from(this.screenTimeEntries.values())\n      .filter(entry => {\n        if (entry.userId !== userId) return false;\n        const entryDate = new Date(entry.date);\n        return entryDate >= start && entryDate <= end;\n      })\n      .sort((a, b) => a.date.localeCompare(b.date));\n  }\n\n  // Screen Time Limits methods\n  async getScreenTimeLimits(userId: string): Promise<ScreenTimeLimit[]> {\n    return Array.from(this.screenTimeLimits.values())\n      .filter(limit => limit.userId === userId && limit.isActive);\n  }\n\n  async createScreenTimeLimit(userId: string, limit: InsertScreenTimeLimit): Promise<ScreenTimeLimit> {\n    const id = randomUUID();\n    const now = new Date();\n    const newLimit: ScreenTimeLimit = {\n      id,\n      userId,\n      appId: limit.appId || null,\n      limitMinutes: limit.limitMinutes,\n      isActive: limit.isActive ?? true,\n      createdAt: now\n    };\n    this.screenTimeLimits.set(id, newLimit);\n    return newLimit;\n  }\n\n  async updateScreenTimeLimit(id: string, limit: Partial<ScreenTimeLimit>): Promise<ScreenTimeLimit | undefined> {\n    const existingLimit = this.screenTimeLimits.get(id);\n    if (!existingLimit) return undefined;\n    \n    const updatedLimit: ScreenTimeLimit = { ...existingLimit, ...limit };\n    this.screenTimeLimits.set(id, updatedLimit);\n    return updatedLimit;\n  }\n\n  async deleteScreenTimeLimit(id: string): Promise<boolean> {\n    return this.screenTimeLimits.delete(id);\n  }\n\n  // Watchlist methods\n  async getWatchlistItems(userId: string): Promise<WatchlistItem[]> {\n    return Array.from(this.watchlistItems.values())\n      .filter(item => item.userId === userId)\n      .sort((a, b) => new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime());\n  }\n\n  async createWatchlistItem(userId: string, item: InsertWatchlistItem): Promise<WatchlistItem> {\n    const id = randomUUID();\n    const now = new Date();\n    const newItem: WatchlistItem = {\n      id,\n      userId,\n      title: item.title,\n      type: item.type,\n      source: item.source || null,\n      link: item.link || null,\n      length: item.length || null,\n      status: item.status || \"To Watch\",\n      finishedAt: item.finishedAt || null,\n      notes: item.notes || null,\n      createdAt: now\n    };\n    this.watchlistItems.set(id, newItem);\n    return newItem;\n  }\n\n  async updateWatchlistItem(id: string, item: Partial<WatchlistItem>): Promise<WatchlistItem | undefined> {\n    const existingItem = this.watchlistItems.get(id);\n    if (!existingItem) return undefined;\n    \n    const updatedItem: WatchlistItem = { ...existingItem, ...item };\n    \n    // If status changed to \"Done\", set finishedAt\n    if (item.status === \"Done\" && existingItem.status !== \"Done\") {\n      updatedItem.finishedAt = new Date();\n    }\n    \n    this.watchlistItems.set(id, updatedItem);\n    return updatedItem;\n  }\n\n  async deleteWatchlistItem(id: string): Promise<boolean> {\n    return this.watchlistItems.delete(id);\n  }\n\n  private seedTodoCategories() {\n    const defaultCategories = [\n      { name: \"Work\", color: \"#3B82F6\", icon: \"💼\", description: \"Professional tasks and projects\" },\n      { name: \"Personal\", color: \"#10B981\", icon: \"🏠\", description: \"Personal life and family tasks\" },\n      { name: \"Health\", color: \"#F59E0B\", icon: \"💪\", description: \"Health, fitness, and wellness\" },\n      { name: \"Learning\", color: \"#8B5CF6\", icon: \"📚\", description: \"Education and skill development\" },\n      { name: \"Finance\", color: \"#EF4444\", icon: \"💰\", description: \"Money, bills, and financial planning\" },\n      { name: \"Travel\", color: \"#06B6D4\", icon: \"✈️\", description: \"Trip planning and travel tasks\" },\n      { name: \"Shopping\", color: \"#EC4899\", icon: \"🛒\", description: \"Shopping lists and purchases\" },\n      { name: \"Social\", color: \"#84CC16\", icon: \"👥\", description: \"Social events and relationships\" }\n    ];\n\n    defaultCategories.forEach((category, index) => {\n      const id = randomUUID();\n      const todoCategory: TodoCategory = {\n        id,\n        userId: \"default-user\",\n        name: category.name,\n        color: category.color,\n        icon: category.icon,\n        description: category.description,\n        orderIndex: index,\n        isArchived: false,\n        createdAt: new Date()\n      };\n      this.todoCategories.set(id, todoCategory);\n    });\n  }\n\n  private seedScreenTimeApps() {\n    const commonApps = [\n      { name: \"Instagram\", category: \"Social\" },\n      { name: \"TikTok\", category: \"Social\" },\n      { name: \"Facebook\", category: \"Social\" },\n      { name: \"Twitter/X\", category: \"Social\" },\n      { name: \"YouTube\", category: \"Entertainment\" },\n      { name: \"Netflix\", category: \"Entertainment\" },\n      { name: \"Spotify\", category: \"Entertainment\" },\n      { name: \"Chrome\", category: \"Productivity\" },\n      { name: \"Safari\", category: \"Productivity\" },\n      { name: \"Slack\", category: \"Productivity\" },\n      { name: \"Microsoft Teams\", category: \"Productivity\" },\n      { name: \"Zoom\", category: \"Productivity\" },\n      { name: \"Gmail\", category: \"Productivity\" },\n      { name: \"WhatsApp\", category: \"Communication\" },\n      { name: \"Messages\", category: \"Communication\" },\n      { name: \"Discord\", category: \"Communication\" },\n      { name: \"Candy Crush\", category: \"Games\" },\n      { name: \"Among Us\", category: \"Games\" },\n      { name: \"Fortnite\", category: \"Games\" },\n      { name: \"Pokemon GO\", category: \"Games\" }\n    ];\n\n    commonApps.forEach(app => {\n      const id = randomUUID();\n      const screenTimeApp: ScreenTimeApp = {\n        id,\n        name: app.name,\n        category: app.category,\n        isExcluded: false,\n        createdAt: new Date()\n      };\n      this.screenTimeApps.set(id, screenTimeApp);\n    });\n  }\n\n  private seedTodoCategories() {\n    const defaultCategories = [\n      { name: \"Work\", color: \"#3B82F6\", icon: \"💼\", description: \"Professional tasks and projects\" },\n      { name: \"Personal\", color: \"#10B981\", icon: \"🏠\", description: \"Personal life and family tasks\" },\n      { name: \"Health\", color: \"#F59E0B\", icon: \"💪\", description: \"Health, fitness, and wellness\" },\n      { name: \"Learning\", color: \"#8B5CF6\", icon: \"📚\", description: \"Education and skill development\" },\n      { name: \"Finance\", color: \"#EF4444\", icon: \"💰\", description: \"Money, bills, and financial planning\" },\n      { name: \"Travel\", color: \"#06B6D4\", icon: \"✈️\", description: \"Trip planning and travel tasks\" },\n      { name: \"Shopping\", color: \"#EC4899\", icon: \"🛒\", description: \"Shopping lists and purchases\" },\n      { name: \"Social\", color: \"#84CC16\", icon: \"👥\", description: \"Social events and relationships\" }\n    ];\n\n    defaultCategories.forEach((category, index) => {\n      const id = randomUUID();\n      const todoCategory: TodoCategory = {\n        id,\n        userId: \"default-user\",\n        name: category.name,\n        color: category.color,\n        icon: category.icon,\n        description: category.description,\n        orderIndex: index,\n        isArchived: false,\n        createdAt: new Date()\n      };\n      this.todoCategories.set(id, todoCategory);\n    });\n  }\n\n  // Todo Categories methods\n  async getTodoCategories(userId: string): Promise<TodoCategory[]> {\n    return Array.from(this.todoCategories.values())\n      .filter(category => category.userId === userId && !category.isArchived)\n      .sort((a, b) => a.orderIndex - b.orderIndex);\n  }\n\n  async createTodoCategory(userId: string, category: InsertTodoCategory): Promise<TodoCategory> {\n    const id = randomUUID();\n    const now = new Date();\n    const newCategory: TodoCategory = {\n      id,\n      userId,\n      name: category.name,\n      color: category.color || \"#3B82F6\",\n      icon: category.icon || \"📝\",\n      description: category.description || null,\n      orderIndex: category.orderIndex || 0,\n      isArchived: category.isArchived || false,\n      createdAt: now\n    };\n    this.todoCategories.set(id, newCategory);\n    return newCategory;\n  }\n\n  async updateTodoCategory(id: string, category: Partial<TodoCategory>): Promise<TodoCategory | undefined> {\n    const existingCategory = this.todoCategories.get(id);\n    if (!existingCategory) return undefined;\n    \n    const updatedCategory: TodoCategory = { ...existingCategory, ...category };\n    this.todoCategories.set(id, updatedCategory);\n    return updatedCategory;\n  }\n\n  async deleteTodoCategory(id: string): Promise<boolean> {\n    return this.todoCategories.delete(id);\n  }\n\n  // Todos methods\n  async getTodos(userId: string, categoryId?: string): Promise<Todo[]> {\n    let todos = Array.from(this.todos.values())\n      .filter(todo => todo.userId === userId);\n    \n    if (categoryId) {\n      todos = todos.filter(todo => todo.categoryId === categoryId);\n    }\n    \n    return todos.sort((a, b) => {\n      // Sort by priority (urgent > high > medium > low), then by due date\n      const priorityOrder = { \"urgent\": 0, \"high\": 1, \"medium\": 2, \"low\": 3 };\n      const aPriority = priorityOrder[a.priority as keyof typeof priorityOrder] || 2;\n      const bPriority = priorityOrder[b.priority as keyof typeof priorityOrder] || 2;\n      \n      if (aPriority !== bPriority) return aPriority - bPriority;\n      \n      // If same priority, sort by due date\n      if (a.dueDate && b.dueDate) return a.dueDate.localeCompare(b.dueDate);\n      if (a.dueDate) return -1;\n      if (b.dueDate) return 1;\n      \n      return new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime();\n    });\n  }\n\n  async getTodo(id: string): Promise<Todo | undefined> {\n    return this.todos.get(id);\n  }\n\n  async createTodo(userId: string, todo: InsertTodo): Promise<Todo> {\n    const id = randomUUID();\n    const now = new Date();\n    const newTodo: Todo = {\n      id,\n      userId,\n      categoryId: todo.categoryId,\n      title: todo.title,\n      description: todo.description || null,\n      priority: todo.priority || \"medium\",\n      status: todo.status || \"pending\",\n      isUrgent: todo.isUrgent || false,\n      isImportant: todo.isImportant || false,\n      priorityScore: todo.priorityScore || 3,\n      dueDate: todo.dueDate || null,\n      dueTime: todo.dueTime || null,\n      estimatedMinutes: todo.estimatedMinutes || null,\n      tags: todo.tags || null,\n      dependencies: todo.dependencies || null,\n      notes: todo.notes || null,\n      completedAt: null,\n      orderIndex: todo.orderIndex || 0,\n      createdAt: now\n    };\n    this.todos.set(id, newTodo);\n    return newTodo;\n  }\n\n  async updateTodo(id: string, todo: Partial<Todo>): Promise<Todo | undefined> {\n    const existingTodo = this.todos.get(id);\n    if (!existingTodo) return undefined;\n    \n    const updatedTodo: Todo = { ...existingTodo, ...todo };\n    \n    // If status changed to \"completed\", set completedAt\n    if (todo.status === \"completed\" && existingTodo.status !== \"completed\") {\n      updatedTodo.completedAt = new Date();\n    }\n    \n    this.todos.set(id, updatedTodo);\n    return updatedTodo;\n  }\n\n  async deleteTodo(id: string): Promise<boolean> {\n    return this.todos.delete(id);\n  }\n\n  async getTodosByStatus(userId: string, status: string): Promise<Todo[]> {\n    return Array.from(this.todos.values())\n      .filter(todo => todo.userId === userId && todo.status === status);\n  }\n\n  async getTodosByDueDate(userId: string, date: string): Promise<Todo[]> {\n    return Array.from(this.todos.values())\n      .filter(todo => todo.userId === userId && todo.dueDate === date);\n  }\n\n  // Calendar Events methods\n  async getCalendarEvents(userId: string, startDate?: string, endDate?: string): Promise<CalendarEvent[]> {\n    let events = Array.from(this.calendarEvents.values())\n      .filter(event => event.userId === userId);\n    \n    if (startDate && endDate) {\n      events = events.filter(event => {\n        return event.startDate >= startDate && event.startDate <= endDate;\n      });\n    }\n    \n    return events.sort((a, b) => {\n      const dateCompare = a.startDate.localeCompare(b.startDate);\n      if (dateCompare !== 0) return dateCompare;\n      if (a.startTime && b.startTime) return a.startTime.localeCompare(b.startTime);\n      return 0;\n    });\n  }\n\n  async createCalendarEvent(userId: string, event: InsertCalendarEvent): Promise<CalendarEvent> {\n    const id = randomUUID();\n    const now = new Date();\n    const newEvent: CalendarEvent = {\n      id,\n      userId,\n      title: event.title,\n      description: event.description || null,\n      eventType: event.eventType || \"appointment\",\n      startDate: event.startDate,\n      startTime: event.startTime || null,\n      endDate: event.endDate || null,\n      endTime: event.endTime || null,\n      location: event.location || null,\n      isAllDay: event.isAllDay || false,\n      isRecurring: event.isRecurring || false,\n      recurringPattern: event.recurringPattern || null,\n      reminder: event.reminder || null,\n      color: event.color || \"#3B82F6\",\n      createdAt: now\n    };\n    this.calendarEvents.set(id, newEvent);\n    return newEvent;\n  }\n\n  async updateCalendarEvent(id: string, event: Partial<CalendarEvent>): Promise<CalendarEvent | undefined> {\n    const existingEvent = this.calendarEvents.get(id);\n    if (!existingEvent) return undefined;\n    \n    const updatedEvent: CalendarEvent = { ...existingEvent, ...event };\n    this.calendarEvents.set(id, updatedEvent);\n    return updatedEvent;\n  }\n\n  async deleteCalendarEvent(id: string): Promise<boolean> {\n    return this.calendarEvents.delete(id);\n  }\n\n  // Weekly Plans methods\n  async getWeeklyPlans(userId: string): Promise<WeeklyPlan[]> {\n    return Array.from(this.weeklyPlans.values())\n      .filter(plan => plan.userId === userId)\n      .sort((a, b) => b.weekStartDate.localeCompare(a.weekStartDate));\n  }\n\n  async getWeeklyPlan(userId: string, weekStartDate: string): Promise<WeeklyPlan | undefined> {\n    return Array.from(this.weeklyPlans.values())\n      .find(plan => plan.userId === userId && plan.weekStartDate === weekStartDate);\n  }\n\n  async createWeeklyPlan(userId: string, plan: InsertWeeklyPlan): Promise<WeeklyPlan> {\n    const id = randomUUID();\n    const now = new Date();\n    const newPlan: WeeklyPlan = {\n      id,\n      userId,\n      weekStartDate: plan.weekStartDate,\n      title: plan.title,\n      goals: plan.goals || null,\n      priorities: plan.priorities || null,\n      notes: plan.notes || null,\n      reflection: plan.reflection || null,\n      createdAt: now\n    };\n    this.weeklyPlans.set(id, newPlan);\n    return newPlan;\n  }\n\n  async updateWeeklyPlan(id: string, plan: Partial<WeeklyPlan>): Promise<WeeklyPlan | undefined> {\n    const existingPlan = this.weeklyPlans.get(id);\n    if (!existingPlan) return undefined;\n    \n    const updatedPlan: WeeklyPlan = { ...existingPlan, ...plan };\n    this.weeklyPlans.set(id, updatedPlan);\n    return updatedPlan;\n  }\n\n  async deleteWeeklyPlan(id: string): Promise<boolean> {\n    return this.weeklyPlans.delete(id);\n  }\n\n  // Daily Plans methods\n  async getDailyPlans(userId: string, weekStartDate?: string): Promise<DailyPlan[]> {\n    let plans = Array.from(this.dailyPlans.values())\n      .filter(plan => plan.userId === userId);\n    \n    if (weekStartDate) {\n      const weekEnd = new Date(weekStartDate);\n      weekEnd.setDate(weekEnd.getDate() + 6);\n      const weekEndStr = weekEnd.toISOString().split('T')[0];\n      \n      plans = plans.filter(plan => plan.date >= weekStartDate && plan.date <= weekEndStr);\n    }\n    \n    return plans.sort((a, b) => a.date.localeCompare(b.date));\n  }\n\n  async getDailyPlan(userId: string, date: string): Promise<DailyPlan | undefined> {\n    return Array.from(this.dailyPlans.values())\n      .find(plan => plan.userId === userId && plan.date === date);\n  }\n\n  async createDailyPlan(userId: string, plan: InsertDailyPlan): Promise<DailyPlan> {\n    const id = randomUUID();\n    const now = new Date();\n    const newPlan: DailyPlan = {\n      id,\n      userId,\n      weeklyPlanId: plan.weeklyPlanId || null,\n      date: plan.date,\n      title: plan.title,\n      timeBlocks: plan.timeBlocks || null,\n      priorities: plan.priorities || null,\n      reflection: plan.reflection || null,\n      energyLevel: plan.energyLevel || null,\n      moodRating: plan.moodRating || null,\n      createdAt: now\n    };\n    this.dailyPlans.set(id, newPlan);\n    return newPlan;\n  }\n\n  async updateDailyPlan(id: string, plan: Partial<DailyPlan>): Promise<DailyPlan | undefined> {\n    const existingPlan = this.dailyPlans.get(id);\n    if (!existingPlan) return undefined;\n    \n    const updatedPlan: DailyPlan = { ...existingPlan, ...plan };\n    this.dailyPlans.set(id, updatedPlan);\n    return updatedPlan;\n  }\n\n  async deleteDailyPlan(id: string): Promise<boolean> {\n    return this.dailyPlans.delete(id);\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":46363},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, boolean, timestamp, real, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const habits = pgTable(\"habits\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  trackingType: text(\"tracking_type\").notNull().default(\"boolean\"), // boolean, numeric, duration, custom\n  unit: text(\"unit\"), // e.g., \"glasses\", \"pages\", \"minutes\", \"miles\", \"steps\"\n  targetValue: real(\"target_value\"), // target amount (e.g., 8 glasses, 30 minutes)\n  frequency: text(\"frequency\").notNull().default(\"daily\"), // daily, weekly, custom\n  frequencyDays: text(\"frequency_days\").array(), // [\"monday\", \"tuesday\"] for weekly, or custom schedule\n  icon: text(\"icon\"), // icon identifier\n  color: text(\"color\").default(\"#1976D2\"), // hex color for the habit\n  isArchived: boolean(\"is_archived\").default(false),\n  streakDays: integer(\"streak_days\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const habitEntries = pgTable(\"habit_entries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  habitId: varchar(\"habit_id\").notNull(),\n  userId: varchar(\"user_id\").notNull(),\n  completed: boolean(\"completed\").default(false),\n  value: real(\"value\"), // numeric value for tracking (e.g., 8 glasses, 5 miles)\n  notes: text(\"notes\"), // optional notes for the entry\n  date: text(\"date\").notNull(), // YYYY-MM-DD format\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const goals = pgTable(\"goals\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  deadline: text(\"deadline\"), // YYYY-MM-DD format\n  progress: integer(\"progress\").default(0), // 0-100\n  category: text(\"category\").default(\"personal\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const healthEntries = pgTable(\"health_entries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  date: text(\"date\").notNull(), // YYYY-MM-DD format\n  sleepHours: real(\"sleep_hours\"),\n  sleepQuality: integer(\"sleep_quality\"), // 1-10\n  exerciseMinutes: integer(\"exercise_minutes\").default(0),\n  exerciseType: text(\"exercise_type\"),\n  caloriesBurned: integer(\"calories_burned\").default(0),\n  mood: integer(\"mood\"), // 1-10\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const timerSessions = pgTable(\"timer_sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  duration: integer(\"duration\").notNull(), // in minutes\n  type: text(\"type\").default(\"pomodoro\"), // pomodoro, break, long-break\n  completed: boolean(\"completed\").default(false),\n  date: text(\"date\").notNull(), // YYYY-MM-DD format\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Workout Tables\nexport const exercises = pgTable(\"exercises\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  isCustom: boolean(\"is_custom\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const workouts = pgTable(\"workouts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  startedAt: timestamp(\"started_at\").notNull(),\n  endedAt: timestamp(\"ended_at\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const sets = pgTable(\"sets\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  workoutId: varchar(\"workout_id\").notNull(),\n  exerciseId: varchar(\"exercise_id\").notNull(),\n  weight: real(\"weight\").notNull(), // in kg or lb\n  reps: integer(\"reps\").notNull(),\n  orderIndex: integer(\"order_index\").default(0), // for ordering within workout\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const cardioEntries = pgTable(\"cardio_entries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  date: text(\"date\").notNull(), // YYYY-MM-DD format\n  type: text(\"type\").notNull(), // run, ride, row, other\n  durationSec: integer(\"duration_sec\").notNull(),\n  distanceMeters: real(\"distance_meters\"), // optional\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Nutrition Tables\nexport const foodItems = pgTable(\"food_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  brand: text(\"brand\"),\n  barcode: text(\"barcode\"),\n  servings: jsonb(\"servings\").$type<Array<{\n    unit: string;\n    grams: number;\n    description?: string;\n  }>>(),\n  nutrients: jsonb(\"nutrients\").$type<{\n    // Macros (per 100g)\n    calories: number;\n    protein: number;\n    carbs: number;\n    fat: number;\n    // Key micros (per 100g) \n    fiber?: number;\n    sugar?: number;\n    sodium?: number;\n    calcium?: number;\n    iron?: number;\n    potassium?: number;\n    magnesium?: number;\n    vitaminD?: number;\n    vitaminB12?: number;\n  }>().notNull(),\n  source: text(\"source\").notNull(), // 'usda', 'openfoodfacts', 'user'\n  verified: boolean(\"verified\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const mealEntries = pgTable(\"meal_entries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  date: text(\"date\").notNull(), // YYYY-MM-DD format\n  mealType: text(\"meal_type\").notNull(), // 'breakfast', 'lunch', 'dinner', 'snack'\n  datetime: timestamp(\"datetime\").notNull(),\n  items: jsonb(\"items\").$type<Array<{\n    foodId: string;\n    quantity: number;\n    servingGrams: number;\n    notes?: string;\n  }>>().notNull(),\n  source: text(\"source\").notNull(), // 'search', 'barcode', 'manual'\n  totalsCache: jsonb(\"totals_cache\").$type<{\n    calories: number;\n    protein: number;\n    carbs: number;\n    fat: number;\n    fiber?: number;\n    sugar?: number;\n    sodium?: number;\n  }>(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const nutritionGoals = pgTable(\"nutrition_goals\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  calorieTarget: integer(\"calorie_target\").notNull(),\n  proteinTarget: integer(\"protein_target\").notNull(), // grams\n  carbsTarget: integer(\"carbs_target\").notNull(), // grams  \n  fatTarget: integer(\"fat_target\").notNull(), // grams\n  fiberTarget: integer(\"fiber_target\").default(25), // grams\n  sodiumTarget: integer(\"sodium_target\").default(2300), // mg\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n});\n\nexport const insertHabitSchema = createInsertSchema(habits).omit({\n  id: true,\n  userId: true,\n  streakDays: true,\n  createdAt: true,\n}).extend({\n  trackingType: z.enum([\"boolean\", \"numeric\", \"duration\", \"custom\"]),\n  frequency: z.enum([\"daily\", \"weekly\", \"custom\"]),\n  frequencyDays: z.array(z.string()).optional(),\n});\n\nexport const insertHabitEntrySchema = createInsertSchema(habitEntries).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n});\n\nexport const insertGoalSchema = createInsertSchema(goals).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n});\n\nexport const insertHealthEntrySchema = createInsertSchema(healthEntries).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n});\n\nexport const insertTimerSessionSchema = createInsertSchema(timerSessions).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n});\n\nexport const insertFoodItemSchema = createInsertSchema(foodItems).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertMealEntrySchema = createInsertSchema(mealEntries).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n});\n\nexport const insertNutritionGoalSchema = createInsertSchema(nutritionGoals).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n});\n\nexport const insertExerciseSchema = createInsertSchema(exercises).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertWorkoutSchema = createInsertSchema(workouts).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n});\n\nexport const insertSetSchema = createInsertSchema(sets).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCardioEntrySchema = createInsertSchema(cardioEntries).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n});\n\n// Content Tables - Screen Time\nexport const screenTimeApps = pgTable(\"screen_time_apps\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  category: text(\"category\").default(\"Other\"), // Social, Productivity, Entertainment, Games, etc.\n  isExcluded: boolean(\"is_excluded\").default(false), // privacy toggle\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const screenTimeEntries = pgTable(\"screen_time_entries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  appId: varchar(\"app_id\").notNull(),\n  date: text(\"date\").notNull(), // YYYY-MM-DD format\n  minutes: integer(\"minutes\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const screenTimeLimits = pgTable(\"screen_time_limits\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  appId: varchar(\"app_id\"), // null for daily total limit\n  limitMinutes: integer(\"limit_minutes\").notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Content Tables - Watchlist\nexport const watchlistItems = pgTable(\"watchlist_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  title: text(\"title\").notNull(),\n  type: text(\"type\").notNull(), // movie, show, podcast, other\n  source: text(\"source\"), // Netflix, Spotify, YouTube, etc.\n  link: text(\"link\"), // URL if added via link\n  length: integer(\"length\"), // runtime in minutes (optional)\n  status: text(\"status\").notNull().default(\"To Watch\"), // \"To Watch\", \"In Progress\", \"Done\"\n  finishedAt: timestamp(\"finished_at\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertScreenTimeAppSchema = createInsertSchema(screenTimeApps).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertScreenTimeEntrySchema = createInsertSchema(screenTimeEntries).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n});\n\nexport const insertScreenTimeLimitSchema = createInsertSchema(screenTimeLimits).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n});\n\nexport const insertWatchlistItemSchema = createInsertSchema(watchlistItems).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n}).extend({\n  type: z.enum([\"movie\", \"show\", \"podcast\", \"other\"]),\n  status: z.enum([\"To Watch\", \"In Progress\", \"Done\"]),\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\nexport type InsertHabit = z.infer<typeof insertHabitSchema>;\nexport type Habit = typeof habits.$inferSelect;\n\nexport type InsertHabitEntry = z.infer<typeof insertHabitEntrySchema>;\nexport type HabitEntry = typeof habitEntries.$inferSelect;\n\nexport type InsertGoal = z.infer<typeof insertGoalSchema>;\nexport type Goal = typeof goals.$inferSelect;\n\nexport type InsertHealthEntry = z.infer<typeof insertHealthEntrySchema>;\nexport type HealthEntry = typeof healthEntries.$inferSelect;\n\nexport type InsertTimerSession = z.infer<typeof insertTimerSessionSchema>;\nexport type TimerSession = typeof timerSessions.$inferSelect;\n\nexport type InsertFoodItem = z.infer<typeof insertFoodItemSchema>;\nexport type FoodItem = typeof foodItems.$inferSelect;\n\nexport type InsertMealEntry = z.infer<typeof insertMealEntrySchema>;\nexport type MealEntry = typeof mealEntries.$inferSelect;\n\nexport type InsertNutritionGoal = z.infer<typeof insertNutritionGoalSchema>;\nexport type NutritionGoal = typeof nutritionGoals.$inferSelect;\n\nexport type InsertExercise = z.infer<typeof insertExerciseSchema>;\nexport type Exercise = typeof exercises.$inferSelect;\n\nexport type InsertWorkout = z.infer<typeof insertWorkoutSchema>;\nexport type Workout = typeof workouts.$inferSelect;\n\nexport type InsertSet = z.infer<typeof insertSetSchema>;\nexport type Set = typeof sets.$inferSelect;\n\nexport type InsertCardioEntry = z.infer<typeof insertCardioEntrySchema>;\nexport type CardioEntry = typeof cardioEntries.$inferSelect;\n\nexport type InsertTodoCategory = z.infer<typeof insertTodoCategorySchema>;\nexport type TodoCategory = typeof todoCategories.$inferSelect;\n\nexport type InsertTodo = z.infer<typeof insertTodoSchema>;\nexport type Todo = typeof todos.$inferSelect;\n\nexport type InsertCalendarEvent = z.infer<typeof insertCalendarEventSchema>;\nexport type CalendarEvent = typeof calendarEvents.$inferSelect;\n\nexport type InsertWeeklyPlan = z.infer<typeof insertWeeklyPlanSchema>;\nexport type WeeklyPlan = typeof weeklyPlans.$inferSelect;\n\nexport type InsertDailyPlan = z.infer<typeof insertDailyPlanSchema>;\nexport type DailyPlan = typeof dailyPlans.$inferSelect;\n\nexport type InsertScreenTimeApp = z.infer<typeof insertScreenTimeAppSchema>;\nexport type ScreenTimeApp = typeof screenTimeApps.$inferSelect;\n\nexport type InsertScreenTimeEntry = z.infer<typeof insertScreenTimeEntrySchema>;\nexport type ScreenTimeEntry = typeof screenTimeEntries.$inferSelect;\n\nexport type InsertScreenTimeLimit = z.infer<typeof insertScreenTimeLimitSchema>;\nexport type ScreenTimeLimit = typeof screenTimeLimits.$inferSelect;\n\nexport type InsertWatchlistItem = z.infer<typeof insertWatchlistItemSchema>;\nexport type WatchlistItem = typeof watchlistItems.$inferSelect;\n\n// To Do System Tables\nexport const todoCategories = pgTable(\"todo_categories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  name: text(\"name\").notNull(),\n  color: text(\"color\").default(\"#3B82F6\"),\n  icon: text(\"icon\").default(\"📝\"),\n  description: text(\"description\"),\n  orderIndex: integer(\"order_index\").default(0),\n  isArchived: boolean(\"is_archived\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const todos = pgTable(\"todos\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  categoryId: varchar(\"category_id\").notNull(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  priority: text(\"priority\").notNull().default(\"medium\"), // low, medium, high, urgent\n  status: text(\"status\").notNull().default(\"pending\"), // pending, in_progress, completed, cancelled\n  // Eisenhower Matrix fields\n  isUrgent: boolean(\"is_urgent\").default(false),\n  isImportant: boolean(\"is_important\").default(false),\n  priorityScore: integer(\"priority_score\").default(3), // 1-5 scale within each Eisenhower quadrant\n  dueDate: text(\"due_date\"), // YYYY-MM-DD format\n  dueTime: text(\"due_time\"), // HH:MM format\n  estimatedMinutes: integer(\"estimated_minutes\"),\n  tags: text(\"tags\").array(),\n  dependencies: text(\"dependencies\").array(), // Array of todo IDs this depends on\n  notes: text(\"notes\"),\n  completedAt: timestamp(\"completed_at\"),\n  orderIndex: integer(\"order_index\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Calendar/Events Tables\nexport const calendarEvents = pgTable(\"calendar_events\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  eventType: text(\"event_type\").notNull().default(\"appointment\"), // appointment, work, personal, deadline, meeting\n  startDate: text(\"start_date\").notNull(), // YYYY-MM-DD format\n  startTime: text(\"start_time\"), // HH:MM format\n  endDate: text(\"end_date\"), // YYYY-MM-DD format\n  endTime: text(\"end_time\"), // HH:MM format\n  location: text(\"location\"),\n  isAllDay: boolean(\"is_all_day\").default(false),\n  isRecurring: boolean(\"is_recurring\").default(false),\n  recurringPattern: text(\"recurring_pattern\"), // daily, weekly, monthly, yearly\n  reminder: integer(\"reminder_minutes\"), // minutes before event\n  color: text(\"color\").default(\"#3B82F6\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Planning Tables\nexport const weeklyPlans = pgTable(\"weekly_plans\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  weekStartDate: text(\"week_start_date\").notNull(), // YYYY-MM-DD format (Monday)\n  title: text(\"title\").notNull(),\n  goals: jsonb(\"goals\").$type<Array<{\n    id: string;\n    text: string;\n    completed: boolean;\n    category: string;\n  }>>(),\n  priorities: jsonb(\"priorities\").$type<Array<{\n    id: string;\n    text: string;\n    category: string;\n    completed: boolean;\n  }>>(),\n  notes: text(\"notes\"),\n  reflection: text(\"reflection\"), // For completed weeks\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const dailyPlans = pgTable(\"daily_plans\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  weeklyPlanId: varchar(\"weekly_plan_id\"),\n  date: text(\"date\").notNull(), // YYYY-MM-DD format\n  title: text(\"title\").notNull(),\n  timeBlocks: jsonb(\"time_blocks\").$type<Array<{\n    id: string;\n    startTime: string; // HH:MM\n    endTime: string; // HH:MM\n    title: string;\n    type: string; // work, personal, break, todo, habit\n    todoId?: string;\n    habitId?: string;\n    completed: boolean;\n  }>>(),\n  priorities: jsonb(\"priorities\").$type<Array<{\n    id: string;\n    text: string;\n    completed: boolean;\n    todoId?: string;\n  }>>(),\n  reflection: text(\"reflection\"),\n  energyLevel: integer(\"energy_level\"), // 1-10\n  moodRating: integer(\"mood_rating\"), // 1-10\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert schemas for new tables\nexport const insertTodoCategorySchema = createInsertSchema(todoCategories).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n});\n\nexport const insertTodoSchema = createInsertSchema(todos).omit({\n  id: true,\n  userId: true,\n  completedAt: true,\n  createdAt: true,\n}).extend({\n  priority: z.enum([\"low\", \"medium\", \"high\", \"urgent\"]),\n  status: z.enum([\"pending\", \"in_progress\", \"completed\", \"cancelled\"]),\n});\n\nexport const insertCalendarEventSchema = createInsertSchema(calendarEvents).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n}).extend({\n  eventType: z.enum([\"appointment\", \"work\", \"personal\", \"deadline\", \"meeting\"]),\n});\n\nexport const insertWeeklyPlanSchema = createInsertSchema(weeklyPlans).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n});\n\nexport const insertDailyPlanSchema = createInsertSchema(dailyPlans).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n});\n","size_bytes":19268},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Dashboard from \"@/pages/dashboard\";\nimport TimerPage from \"@/pages/timer\";\nimport TodoPage from \"@/pages/todos\";\nimport CalendarPage from \"@/pages/calendar\";\nimport SystemsPage from \"@/pages/systems\";\nimport WeeklyPlanPage from \"@/pages/weekly-plan\";\nimport DailyPlanPage from \"@/pages/daily-plan\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/todos\" component={TodoPage} />\n      <Route path=\"/calendar\" component={CalendarPage} />\n      <Route path=\"/systems\" component={SystemsPage} />\n      <Route path=\"/weekly-plan\" component={WeeklyPlanPage} />\n      <Route path=\"/daily-plan\" component={DailyPlanPage} />\n      <Route path=\"/timer\" component={TimerPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1318},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(250, 20%, 98%);\n  --foreground: hsl(210, 25%, 7.8431%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(210, 25%, 7.8431%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(210, 25%, 7.8431%);\n  --primary: hsl(208, 78%, 42%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(143, 49%, 47%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(240, 1.9608%, 90%);\n  --muted-foreground: hsl(210, 25%, 7.8431%);\n  --accent: hsl(18, 91%, 64%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(200, 23.0769%, 97.4510%);\n  --ring: hsl(208, 78%, 42%);\n  --chart-1: hsl(208, 78%, 42%);\n  --chart-2: hsl(143, 49%, 47%);\n  --chart-3: hsl(18, 91%, 64%);\n  --chart-4: hsl(271, 35%, 56%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-primary: hsl(208, 78%, 42%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(214, 32%, 91%);\n  --sidebar-accent-foreground: hsl(208, 78%, 42%);\n  --sidebar-border: hsl(214, 32%, 91%);\n  --sidebar-ring: hsl(208, 78%, 42%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n  --surface: hsl(0, 0%, 100%);\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(208, 78%, 52%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(143, 49%, 47%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(18, 91%, 64%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(208, 78%, 52%);\n  --chart-1: hsl(208, 78%, 52%);\n  --chart-2: hsl(143, 49%, 47%);\n  --chart-3: hsl(18, 91%, 64%);\n  --chart-4: hsl(271, 35%, 56%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(228, 9.8039%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85.0980%);\n  --sidebar-primary: hsl(208, 78%, 52%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(210, 5.2632%, 14.9020%);\n  --sidebar-accent-foreground: hsl(208, 78%, 52%);\n  --sidebar-border: hsl(210, 5.2632%, 14.9020%);\n  --sidebar-ring: hsl(208, 78%, 52%);\n  --surface: hsl(228, 9.8039%, 10%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer utilities {\n  .surface {\n    background-color: var(--surface);\n  }\n}\n","size_bytes":3033},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-timer.tsx":{"content":"import { useState, useEffect, useRef, useCallback } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface UseTimerOptions {\n  duration: number; // in minutes\n  onComplete?: () => void;\n}\n\nexport function useTimer({ duration, onComplete }: UseTimerOptions) {\n  const [time, setTime] = useState(duration);\n  const [isRunning, setIsRunning] = useState(false);\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n  const queryClient = useQueryClient();\n  const today = new Date().toISOString().split('T')[0];\n\n  const saveSessionMutation = useMutation({\n    mutationFn: async (data: { duration: number; type: string; completed: boolean }) => {\n      return apiRequest(\"/api/timer-sessions\", \"POST\", { ...data, date: today });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/timer-sessions'] });\n    },\n  });\n\n  const tick = useCallback(() => {\n    setTime((prevTime) => {\n      if (prevTime <= 0.017) { // ~1 second in minutes\n        setIsRunning(false);\n        onComplete?.();\n        \n        // Save completed session\n        saveSessionMutation.mutate({\n          duration,\n          type: \"pomodoro\",\n          completed: true,\n        });\n        \n        return 0;\n      }\n      return prevTime - 0.017; // Subtract ~1 second\n    });\n  }, [duration, onComplete, saveSessionMutation]);\n\n  useEffect(() => {\n    if (isRunning) {\n      intervalRef.current = setInterval(tick, 1000);\n    } else {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n        intervalRef.current = null;\n      }\n    }\n\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, [isRunning, tick]);\n\n  const start = () => setIsRunning(true);\n  const pause = () => setIsRunning(false);\n  \n  const reset = () => {\n    setIsRunning(false);\n    setTime(duration);\n  };\n\n  return {\n    time,\n    isRunning,\n    start,\n    pause,\n    reset,\n  };\n}\n","size_bytes":2037},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/export.ts":{"content":"export const exportToCsv = (data: any[], filename: string) => {\n  if (data.length === 0) return;\n\n  const headers = Object.keys(data[0]);\n  const csvContent = [\n    headers.join(','),\n    ...data.map(row => \n      headers.map(header => {\n        const value = row[header];\n        // Escape commas and quotes in CSV\n        if (typeof value === 'string' && (value.includes(',') || value.includes('\"'))) {\n          return `\"${value.replace(/\"/g, '\"\"')}\"`;\n        }\n        return value ?? '';\n      }).join(',')\n    )\n  ].join('\\n');\n\n  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n  const link = document.createElement('a');\n  const url = URL.createObjectURL(blob);\n  link.setAttribute('href', url);\n  link.setAttribute('download', filename);\n  link.style.visibility = 'hidden';\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n};\n\nexport const exportToJson = (data: any, filename: string) => {\n  const jsonString = JSON.stringify(data, null, 2);\n  const blob = new Blob([jsonString], { type: 'application/json;charset=utf-8;' });\n  const link = document.createElement('a');\n  const url = URL.createObjectURL(blob);\n  link.setAttribute('href', url);\n  link.setAttribute('download', filename);\n  link.style.visibility = 'hidden';\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n};\n","size_bytes":1386},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  CheckSquare, Calendar, TrendingUp, Target, Clock, \n  Plus, ArrowRight, Star, AlertCircle, ChevronRight,\n  CalendarDays, ListTodo, Activity, Circle\n} from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { format, isToday, isTomorrow } from \"date-fns\";\nimport type { Todo, TodoCategory, CalendarEvent, Habit, HabitEntry } from \"@shared/schema\";\n\nexport default function Dashboard() {\n  const today = format(new Date(), \"yyyy-MM-dd\");\n  const tomorrow = format(new Date(Date.now() + 24 * 60 * 60 * 1000), \"yyyy-MM-dd\");\n\n  // Fetch data for all sections\n  const { data: todos = [] } = useQuery<Todo[]>({\n    queryKey: [\"/api/todos\"],\n  });\n\n  const { data: todoCategories = [] } = useQuery<TodoCategory[]>({\n    queryKey: [\"/api/todo-categories\"],\n  });\n\n  const { data: events = [] } = useQuery<CalendarEvent[]>({\n    queryKey: [\"/api/calendar-events\"],\n  });\n\n  const { data: habits = [] } = useQuery<Habit[]>({\n    queryKey: [\"/api/habits\"],\n  });\n\n  const { data: todayHabitEntries = [] } = useQuery<HabitEntry[]>({\n    queryKey: [\"/api/habit-entries\", { date: today }],\n    queryFn: () => fetch(`/api/habit-entries?date=${today}`).then(res => res.json())\n  });\n\n  // Calculate stats for each section\n  const todayTodos = todos.filter(todo => todo.dueDate === today);\n  const overdueTodos = todos.filter(todo => \n    todo.dueDate && todo.dueDate < today && todo.status !== \"completed\"\n  );\n  const completedTodos = todos.filter(todo => todo.status === \"completed\").length;\n  const pendingTodos = todos.filter(todo => todo.status === \"pending\").length;\n\n  const todayEvents = events.filter(event => event.startDate === today);\n  const tomorrowEvents = events.filter(event => event.startDate === tomorrow);\n  const upcomingEvents = events.filter(event => event.startDate > today).length;\n\n  const activeHabits = habits.filter(habit => !habit.isArchived);\n  const completedHabitsToday = todayHabitEntries.filter(entry => {\n    const habit = habits.find(h => h.id === entry.habitId);\n    return habit && (entry.value || 0) >= (habit.targetValue || 1);\n  }).length;\n  const habitCompletionRate = activeHabits.length > 0 \n    ? Math.round((completedHabitsToday / activeHabits.length) * 100) \n    : 0;\n\n  return (\n    <div className=\"p-6 space-y-8\" data-testid=\"dashboard\">\n      {/* Header */}\n      <div>\n        <h1 className=\"text-4xl font-bold text-gray-900 dark:text-white\">LifeTrack Pro</h1>\n        <p className=\"text-gray-600 dark:text-gray-400 mt-2\">\n          Your comprehensive personal development dashboard\n        </p>\n        <p className=\"text-sm text-gray-500 dark:text-gray-500 mt-1\">\n          {format(new Date(), \"EEEE, MMMM dd, yyyy\")}\n        </p>\n      </div>\n\n      {/* Quick Stats */}\n      <div className=\"grid gap-4 md:grid-cols-4\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <CheckSquare className=\"h-8 w-8 text-blue-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Total Todos</p>\n                <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">{todos.length}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <Calendar className=\"h-8 w-8 text-green-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Total Events</p>\n                <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">{events.length}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <TrendingUp className=\"h-8 w-8 text-purple-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Active Systems</p>\n                <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">{activeHabits.length}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <Target className=\"h-8 w-8 text-orange-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Completion Rate</p>\n                <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">{habitCompletionRate}%</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main 3 Sections */}\n      <div className=\"grid gap-8 lg:grid-cols-3\">\n        {/* To Do Section */}\n        <Card className=\"lg:col-span-1\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-4\">\n            <CardTitle className=\"flex items-center gap-2\">\n              <CheckSquare className=\"h-5 w-5 text-blue-600\" />\n              To Do\n            </CardTitle>\n            <Link href=\"/todos\">\n              <Button variant=\"outline\" size=\"sm\" data-testid=\"link-todos\">\n                <ArrowRight className=\"h-4 w-4\" />\n              </Button>\n            </Link>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {/* Quick Stats */}\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"text-center p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n                <p className=\"text-2xl font-bold text-blue-600\">{completedTodos}</p>\n                <p className=\"text-xs text-gray-600 dark:text-gray-400\">Completed</p>\n              </div>\n              <div className=\"text-center p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">{pendingTodos}</p>\n                <p className=\"text-xs text-gray-600 dark:text-gray-400\">Pending</p>\n              </div>\n            </div>\n\n            {/* Categories */}\n            <div>\n              <h4 className=\"text-sm font-medium text-gray-900 dark:text-white mb-3\">Categories</h4>\n              <div className=\"space-y-2\">\n                {todoCategories.slice(0, 3).map(category => {\n                  const categoryTodos = todos.filter(todo => todo.categoryId === category.id);\n                  const completedInCategory = categoryTodos.filter(todo => todo.status === \"completed\").length;\n                  \n                  return (\n                    <div key={category.id} className=\"flex items-center justify-between p-2 bg-gray-50 dark:bg-gray-800 rounded\">\n                      <div className=\"flex items-center gap-2\">\n                        <span style={{ color: category.color || \"#3B82F6\" }}>{category.icon}</span>\n                        <span className=\"text-sm font-medium\">{category.name}</span>\n                      </div>\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        {completedInCategory}/{categoryTodos.length}\n                      </Badge>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n\n            {/* Today's Todos */}\n            {todayTodos.length > 0 && (\n              <div>\n                <h4 className=\"text-sm font-medium text-gray-900 dark:text-white mb-3\">Due Today</h4>\n                <div className=\"space-y-2\">\n                  {todayTodos.slice(0, 3).map(todo => (\n                    <div key={todo.id} className=\"flex items-center gap-2 p-2 border rounded\">\n                      <Circle className=\"h-4 w-4 text-gray-400\" />\n                      <span className=\"text-sm text-gray-900 dark:text-white truncate\">{todo.title}</span>\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {todo.priority}\n                      </Badge>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* Overdue Alert */}\n            {overdueTodos.length > 0 && (\n              <div className=\"p-3 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg\">\n                <div className=\"flex items-center gap-2\">\n                  <AlertCircle className=\"h-4 w-4 text-red-600\" />\n                  <span className=\"text-sm font-medium text-red-800 dark:text-red-400\">\n                    {overdueTodos.length} overdue tasks\n                  </span>\n                </div>\n              </div>\n            )}\n\n            <Link href=\"/todos\">\n              <Button className=\"w-full\" variant=\"outline\" data-testid=\"button-view-todos\">\n                <ListTodo className=\"h-4 w-4 mr-2\" />\n                View All Todos\n              </Button>\n            </Link>\n          </CardContent>\n        </Card>\n\n        {/* Calendar Section */}\n        <Card className=\"lg:col-span-1\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-4\">\n            <CardTitle className=\"flex items-center gap-2\">\n              <Calendar className=\"h-5 w-5 text-green-600\" />\n              Calendar\n            </CardTitle>\n            <Link href=\"/calendar\">\n              <Button variant=\"outline\" size=\"sm\" data-testid=\"link-calendar\">\n                <ArrowRight className=\"h-4 w-4\" />\n              </Button>\n            </Link>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {/* Quick Stats */}\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"text-center p-3 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n                <p className=\"text-2xl font-bold text-green-600\">{todayEvents.length}</p>\n                <p className=\"text-xs text-gray-600 dark:text-gray-400\">Today</p>\n              </div>\n              <div className=\"text-center p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">{upcomingEvents}</p>\n                <p className=\"text-xs text-gray-600 dark:text-gray-400\">Upcoming</p>\n              </div>\n            </div>\n\n            {/* Today's Events */}\n            {todayEvents.length > 0 ? (\n              <div>\n                <h4 className=\"text-sm font-medium text-gray-900 dark:text-white mb-3\">Today's Schedule</h4>\n                <div className=\"space-y-2\">\n                  {todayEvents.slice(0, 3).map(event => (\n                    <div key={event.id} className=\"flex items-center gap-2 p-2 border rounded\">\n                      <Clock className=\"h-4 w-4 text-gray-400\" />\n                      <div className=\"flex-1 min-w-0\">\n                        <p className=\"text-sm font-medium text-gray-900 dark:text-white truncate\">{event.title}</p>\n                        <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                          {event.startTime || \"All day\"}\n                        </p>\n                      </div>\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {event.eventType}\n                      </Badge>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ) : (\n              <div className=\"text-center py-4\">\n                <CalendarDays className=\"h-8 w-8 text-gray-400 mx-auto mb-2\" />\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">No events today</p>\n              </div>\n            )}\n\n            {/* Tomorrow Preview */}\n            {tomorrowEvents.length > 0 && (\n              <div>\n                <h4 className=\"text-sm font-medium text-gray-900 dark:text-white mb-3\">Tomorrow</h4>\n                <div className=\"space-y-1\">\n                  {tomorrowEvents.slice(0, 2).map(event => (\n                    <div key={event.id} className=\"flex items-center gap-2 p-2 bg-gray-50 dark:bg-gray-800 rounded\">\n                      <span className=\"text-sm text-gray-900 dark:text-white truncate\">{event.title}</span>\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {event.startTime || \"All day\"}\n                      </Badge>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            <Link href=\"/calendar\">\n              <Button className=\"w-full\" variant=\"outline\" data-testid=\"button-view-calendar\">\n                <Calendar className=\"h-4 w-4 mr-2\" />\n                View Full Calendar\n              </Button>\n            </Link>\n          </CardContent>\n        </Card>\n\n        {/* Systems Section */}\n        <Card className=\"lg:col-span-1\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-4\">\n            <CardTitle className=\"flex items-center gap-2\">\n              <TrendingUp className=\"h-5 w-5 text-purple-600\" />\n              Systems\n            </CardTitle>\n            <Link href=\"/systems\">\n              <Button variant=\"outline\" size=\"sm\" data-testid=\"link-systems\">\n                <ArrowRight className=\"h-4 w-4\" />\n              </Button>\n            </Link>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {/* Quick Stats */}\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"text-center p-3 bg-purple-50 dark:bg-purple-900/20 rounded-lg\">\n                <p className=\"text-2xl font-bold text-purple-600\">{completedHabitsToday}</p>\n                <p className=\"text-xs text-gray-600 dark:text-gray-400\">Completed</p>\n              </div>\n              <div className=\"text-center p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">{habitCompletionRate}%</p>\n                <p className=\"text-xs text-gray-600 dark:text-gray-400\">Rate</p>\n              </div>\n            </div>\n\n            {/* Today's Systems */}\n            {activeHabits.length > 0 ? (\n              <div>\n                <h4 className=\"text-sm font-medium text-gray-900 dark:text-white mb-3\">Today's Systems</h4>\n                <div className=\"space-y-2\">\n                  {activeHabits.slice(0, 4).map(habit => {\n                    const todayEntry = todayHabitEntries.find(entry => entry.habitId === habit.id);\n                    const progress = todayEntry?.value || 0;\n                    const isCompleted = progress >= (habit.targetValue || 1);\n                    \n                    return (\n                      <div key={habit.id} className=\"flex items-center gap-2 p-2 border rounded\">\n                        <div className=\"flex-1 min-w-0\">\n                          <p className=\"text-sm font-medium text-gray-900 dark:text-white truncate\">{habit.name}</p>\n                          <div className=\"flex items-center gap-2 mt-1\">\n                            <div className=\"flex-1 bg-gray-200 dark:bg-gray-700 rounded-full h-1.5\">\n                              <div \n                                className=\"bg-purple-600 h-1.5 rounded-full transition-all\"\n                                style={{ width: `${Math.min((progress / (habit.targetValue || 1)) * 100, 100)}%` }}\n                              />\n                            </div>\n                            <span className=\"text-xs text-gray-600 dark:text-gray-400\">\n                              {progress}/{habit.targetValue || 1}\n                            </span>\n                          </div>\n                        </div>\n                        {isCompleted && (\n                          <CheckSquare className=\"h-4 w-4 text-green-600\" />\n                        )}\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            ) : (\n              <div className=\"text-center py-4\">\n                <Activity className=\"h-8 w-8 text-gray-400 mx-auto mb-2\" />\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">No active systems</p>\n              </div>\n            )}\n\n            {/* Categories */}\n            {habits.length > 0 && (\n              <div>\n                <h4 className=\"text-sm font-medium text-gray-900 dark:text-white mb-3\">Categories</h4>\n                <div className=\"flex flex-wrap gap-2\">\n                  {[...new Set(habits.map(h => h.category).filter(Boolean))].slice(0, 3).map(category => (\n                    <Badge key={category} variant=\"secondary\" className=\"text-xs\">\n                      {category}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            <Link href=\"/systems\">\n              <Button className=\"w-full\" variant=\"outline\" data-testid=\"button-view-systems\">\n                <TrendingUp className=\"h-4 w-4 mr-2\" />\n                View All Systems\n              </Button>\n            </Link>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Planning Section */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Target className=\"h-5 w-5 text-orange-600\" />\n            Planning & Organization\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid gap-4 md:grid-cols-2\">\n            <Link href=\"/weekly-plan\">\n              <Card className=\"border-2 border-dashed border-gray-200 dark:border-gray-700 hover:border-orange-300 dark:hover:border-orange-600 transition-colors cursor-pointer\">\n                <CardContent className=\"p-6 text-center\">\n                  <Calendar className=\"h-8 w-8 text-orange-600 mx-auto mb-2\" />\n                  <h3 className=\"font-medium text-gray-900 dark:text-white\">Weekly Planning</h3>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">\n                    Set goals and priorities for the week\n                  </p>\n                </CardContent>\n              </Card>\n            </Link>\n\n            <Link href=\"/daily-plan\">\n              <Card className=\"border-2 border-dashed border-gray-200 dark:border-gray-700 hover:border-orange-300 dark:hover:border-orange-600 transition-colors cursor-pointer\">\n                <CardContent className=\"p-6 text-center\">\n                  <Clock className=\"h-8 w-8 text-orange-600 mx-auto mb-2\" />\n                  <h3 className=\"font-medium text-gray-900 dark:text-white\">Daily Planning</h3>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">\n                    Structure your day with time blocks\n                  </p>\n                </CardContent>\n              </Card>\n            </Link>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Quick Actions */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Quick Actions</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid gap-4 md:grid-cols-4\">\n            <Link href=\"/todos\">\n              <Button className=\"w-full\" variant=\"outline\" data-testid=\"button-quick-todo\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Todo\n              </Button>\n            </Link>\n            \n            <Link href=\"/calendar\">\n              <Button className=\"w-full\" variant=\"outline\" data-testid=\"button-quick-event\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Event\n              </Button>\n            </Link>\n            \n            <Link href=\"/systems\">\n              <Button className=\"w-full\" variant=\"outline\" data-testid=\"button-quick-system\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add System\n              </Button>\n            </Link>\n            \n            <Link href=\"/timer\">\n              <Button className=\"w-full\" variant=\"outline\" data-testid=\"button-quick-timer\">\n                <Clock className=\"h-4 w-4 mr-2\" />\n                Start Timer\n              </Button>\n            </Link>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":20404},"client/src/pages/habits.tsx":{"content":"import { useState } from \"react\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport MobileSidebar from \"@/components/layout/mobile-sidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Menu, Plus, Check, Clock, Flame, Calendar, Target, Edit, Trash2 } from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport AdvancedAddHabitDialog from \"@/components/dialogs/advanced-add-habit-dialog\";\nimport type { Habit, HabitEntry } from \"@shared/schema\";\n\nexport default function HabitsPage() {\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const [addDialogOpen, setAddDialogOpen] = useState(false);\n  const [activeTab, setActiveTab] = useState(\"today\");\n  const isMobile = useIsMobile();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const today = new Date().toISOString().split('T')[0];\n\n  // Fetch data\n  const { data: habits = [] } = useQuery<Habit[]>({\n    queryKey: ['/api/habits']\n  });\n\n  const { data: habitEntries = [] } = useQuery<HabitEntry[]>({\n    queryKey: ['/api/habit-entries'],\n    queryFn: () => fetch('/api/habit-entries').then(res => res.json())\n  });\n\n  const { data: todayEntries = [] } = useQuery<HabitEntry[]>({\n    queryKey: ['/api/habit-entries', today],\n    queryFn: () => fetch(`/api/habit-entries?date=${today}`).then(res => res.json())\n  });\n\n  // Toggle habit completion\n  const toggleHabitMutation = useMutation({\n    mutationFn: async ({ habitId, completed }: { habitId: string; completed: boolean }) => {\n      const existingEntry = todayEntries.find(entry => entry.habitId === habitId);\n      \n      if (existingEntry) {\n        return apiRequest(\"PUT\", `/api/habit-entries/${existingEntry.id}`, { completed });\n      } else {\n        return apiRequest(\"POST\", \"/api/habit-entries\", {\n          habitId,\n          completed,\n          date: today,\n          minutesSpent: 0\n        });\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/habit-entries'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/habits'] });\n      toast({\n        title: \"Habit updated\",\n        description: \"Your habit progress has been saved.\",\n      });\n    }\n  });\n\n  // Delete habit\n  const deleteHabitMutation = useMutation({\n    mutationFn: async (habitId: string) => {\n      return apiRequest(\"DELETE\", `/api/habits/${habitId}`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/habits'] });\n      toast({\n        title: \"Habit deleted\",\n        description: \"The habit has been removed.\",\n      });\n    }\n  });\n\n  const getHabitStats = (habit: Habit) => {\n    const habitEntryList = habitEntries.filter(entry => entry.habitId === habit.id);\n    const completedEntries = habitEntryList.filter(entry => entry.completed);\n    const totalDays = habitEntryList.length;\n    const completionRate = totalDays > 0 ? Math.round((completedEntries.length / totalDays) * 100) : 0;\n    \n    // Calculate current streak\n    let currentStreak = 0;\n    const sortedEntries = habitEntryList\n      .filter(entry => entry.completed)\n      .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n    \n    const todayEntry = sortedEntries.find(entry => entry.date === today);\n    if (todayEntry) {\n      currentStreak = 1;\n      const yesterday = new Date();\n      yesterday.setDate(yesterday.getDate() - 1);\n      \n      for (let i = 1; i < sortedEntries.length; i++) {\n        const expectedDate = new Date();\n        expectedDate.setDate(expectedDate.getDate() - i);\n        if (sortedEntries[i].date === expectedDate.toISOString().split('T')[0]) {\n          currentStreak++;\n        } else {\n          break;\n        }\n      }\n    }\n    \n    return {\n      completionRate,\n      currentStreak,\n      totalCompletions: completedEntries.length,\n      lastCompleted: completedEntries.length > 0 ? completedEntries[completedEntries.length - 1].date : null\n    };\n  };\n\n  const isHabitCompleted = (habitId: string) => {\n    return todayEntries.find(entry => entry.habitId === habitId)?.completed || false;\n  };\n\n  const handleToggleHabit = (habitId: string) => {\n    const currentlyCompleted = isHabitCompleted(habitId);\n    toggleHabitMutation.mutate({ habitId, completed: !currentlyCompleted });\n  };\n\n  const getWeekData = () => {\n    const week = [];\n    for (let i = 6; i >= 0; i--) {\n      const date = new Date();\n      date.setDate(date.getDate() - i);\n      const dateStr = date.toISOString().split('T')[0];\n      \n      const dayEntries = habitEntries.filter(entry => entry.date === dateStr && entry.completed);\n      const completionRate = habits.length > 0 ? (dayEntries.length / habits.length) * 100 : 0;\n      \n      week.push({\n        date: dateStr,\n        dayName: date.toLocaleDateString('en', { weekday: 'short' }),\n        completions: dayEntries.length,\n        completionRate: Math.round(completionRate)\n      });\n    }\n    return week;\n  };\n\n  const weekData = getWeekData();\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      {/* Desktop Sidebar */}\n      {!isMobile && <Sidebar />}\n\n      {/* Mobile Sidebar */}\n      {isMobile && (\n        <MobileSidebar \n          open={mobileMenuOpen} \n          onOpenChange={setMobileMenuOpen} \n        />\n      )}\n\n      {/* Main Content */}\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        {/* Header */}\n        <header className=\"bg-surface border-b border-gray-200 px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              {isMobile && (\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  onClick={() => setMobileMenuOpen(true)}\n                  data-testid=\"button-mobile-menu\"\n                >\n                  <Menu className=\"h-5 w-5\" />\n                </Button>\n              )}\n              <div>\n                <h2 className=\"text-2xl font-semibold text-gray-900\">Habit Tracker</h2>\n                <p className=\"text-gray-600\">Build consistency and track your daily routines</p>\n              </div>\n            </div>\n            <Button\n              onClick={() => setAddDialogOpen(true)}\n              className=\"bg-primary text-white hover:bg-blue-700\"\n              data-testid=\"button-add-habit\"\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Habit\n            </Button>\n          </div>\n        </header>\n\n        {/* Content */}\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <div className=\"max-w-6xl mx-auto\">\n            {/* Weekly Progress Overview */}\n            <Card className=\"mb-8\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Calendar className=\"h-5 w-5\" />\n                  <span>Weekly Progress</span>\n                </CardTitle>\n                <CardDescription>Your habit completion over the last 7 days</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-7 gap-4\">\n                  {weekData.map((day) => (\n                    <div key={day.date} className=\"text-center\">\n                      <div className=\"text-sm font-medium text-gray-600 mb-2\">{day.dayName}</div>\n                      <div className={`w-12 h-12 rounded-full flex items-center justify-center text-white font-semibold ${\n                        day.completionRate >= 80 ? 'bg-secondary' :\n                        day.completionRate >= 50 ? 'bg-primary' :\n                        day.completionRate > 0 ? 'bg-accent' : 'bg-gray-300'\n                      }`} data-testid={`day-${day.date}`}>\n                        {day.completionRate}%\n                      </div>\n                      <div className=\"text-xs text-gray-500 mt-1\">{day.completions}/{habits.length}</div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n              <TabsList className=\"grid w-full grid-cols-3\">\n                <TabsTrigger value=\"today\" data-testid=\"tab-today\">Today</TabsTrigger>\n                <TabsTrigger value=\"all\" data-testid=\"tab-all\">All Habits</TabsTrigger>\n                <TabsTrigger value=\"analytics\" data-testid=\"tab-analytics\">Analytics</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"today\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Today's Habits</CardTitle>\n                    <CardDescription>Complete your daily habits to build momentum</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    {habits.length === 0 ? (\n                      <div className=\"text-center py-12\">\n                        <Target className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                        <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No habits yet</h3>\n                        <p className=\"text-gray-600 mb-6\">Start building healthy routines by creating your first habit</p>\n                        <Button onClick={() => setAddDialogOpen(true)} data-testid=\"button-add-first-habit\">\n                          <Plus className=\"h-4 w-4 mr-2\" />\n                          Add Your First Habit\n                        </Button>\n                      </div>\n                    ) : (\n                      <div className=\"space-y-4\">\n                        {habits.map((habit) => {\n                          const completed = isHabitCompleted(habit.id);\n                          const stats = getHabitStats(habit);\n                          \n                          return (\n                            <div \n                              key={habit.id}\n                              className=\"flex items-center space-x-4 p-4 border border-gray-200 rounded-lg hover:bg-gray-50\"\n                              data-testid={`habit-${habit.id}`}\n                            >\n                              <button\n                                onClick={() => handleToggleHabit(habit.id)}\n                                className={`w-8 h-8 rounded-full flex items-center justify-center transition-colors ${\n                                  completed\n                                    ? \"bg-secondary text-white\"\n                                    : \"border-2 border-gray-300 hover:border-secondary\"\n                                }`}\n                                data-testid={`button-toggle-habit-${habit.id}`}\n                              >\n                                {completed && <Check className=\"h-4 w-4\" />}\n                              </button>\n                              \n                              <div className=\"flex-1\">\n                                <h3 className=\"font-semibold text-gray-900\">{habit.name}</h3>\n                                {habit.description && (\n                                  <p className=\"text-sm text-gray-600\">{habit.description}</p>\n                                )}\n                                <div className=\"flex items-center space-x-4 mt-2\">\n                                  <div className=\"flex items-center space-x-1 text-sm text-gray-600\">\n                                    <Flame className=\"h-4 w-4\" />\n                                    <span>{stats.currentStreak} day streak</span>\n                                  </div>\n                                  {(habit.targetValue || 0) > 0 && (\n                                    <div className=\"flex items-center space-x-1 text-sm text-gray-600\">\n                                      <Target className=\"h-4 w-4\" />\n                                      <span>{habit.targetValue} {habit.unit || \"\"}</span>\n                                    </div>\n                                  )}\n                                </div>\n                              </div>\n\n                              <div className=\"text-right\">\n                                <div className=\"text-sm font-medium text-gray-900\">\n                                  {stats.completionRate}%\n                                </div>\n                                <div className=\"text-xs text-gray-600\">completion rate</div>\n                              </div>\n                            </div>\n                          );\n                        })}\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"all\" className=\"space-y-6\">\n                <div className=\"grid gap-6\">\n                  {habits.map((habit) => {\n                    const stats = getHabitStats(habit);\n                    \n                    return (\n                      <Card key={habit.id} data-testid={`habit-card-${habit.id}`}>\n                        <CardHeader>\n                          <div className=\"flex items-start justify-between\">\n                            <div className=\"flex-1\">\n                              <CardTitle className=\"flex items-center space-x-2\">\n                                <span>{habit.name}</span>\n                                <Badge variant={stats.currentStreak > 7 ? \"default\" : \"secondary\"}>\n                                  {stats.currentStreak} day streak\n                                </Badge>\n                              </CardTitle>\n                              {habit.description && (\n                                <CardDescription className=\"mt-2\">{habit.description}</CardDescription>\n                              )}\n                            </div>\n                            <div className=\"flex space-x-2\">\n                              <Button variant=\"ghost\" size=\"sm\" data-testid={`button-edit-${habit.id}`}>\n                                <Edit className=\"h-4 w-4\" />\n                              </Button>\n                              <Button \n                                variant=\"ghost\" \n                                size=\"sm\"\n                                onClick={() => deleteHabitMutation.mutate(habit.id)}\n                                data-testid={`button-delete-${habit.id}`}\n                              >\n                                <Trash2 className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          </div>\n                        </CardHeader>\n                        <CardContent>\n                          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                            <div>\n                              <div className=\"text-sm font-medium text-gray-600 mb-2\">Completion Rate</div>\n                              <div className=\"flex items-center space-x-2\">\n                                <Progress value={stats.completionRate} className=\"flex-1\" />\n                                <span className=\"text-sm font-semibold\">{stats.completionRate}%</span>\n                              </div>\n                            </div>\n                            <div>\n                              <div className=\"text-sm font-medium text-gray-600 mb-2\">Total Completions</div>\n                              <div className=\"text-2xl font-bold text-primary\">{stats.totalCompletions}</div>\n                            </div>\n                            <div>\n                              <div className=\"text-sm font-medium text-gray-600 mb-2\">Last Completed</div>\n                              <div className=\"text-sm\">\n                                {stats.lastCompleted ? \n                                  new Date(stats.lastCompleted).toLocaleDateString() : \n                                  'Never'\n                                }\n                              </div>\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    );\n                  })}\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"analytics\" className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                  <Card>\n                    <CardHeader className=\"pb-3\">\n                      <CardTitle className=\"text-sm\">Total Habits</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-3xl font-bold text-primary\">{habits.length}</div>\n                    </CardContent>\n                  </Card>\n                  \n                  <Card>\n                    <CardHeader className=\"pb-3\">\n                      <CardTitle className=\"text-sm\">Completed Today</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-3xl font-bold text-secondary\">\n                        {todayEntries.filter(e => e.completed).length}\n                      </div>\n                    </CardContent>\n                  </Card>\n                  \n                  <Card>\n                    <CardHeader className=\"pb-3\">\n                      <CardTitle className=\"text-sm\">Average Completion</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-3xl font-bold text-accent\">\n                        {habits.length > 0 ? Math.round((todayEntries.filter(e => e.completed).length / habits.length) * 100) : 0}%\n                      </div>\n                    </CardContent>\n                  </Card>\n                  \n                  <Card>\n                    <CardHeader className=\"pb-3\">\n                      <CardTitle className=\"text-sm\">Longest Streak</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-3xl font-bold text-purple-600\">\n                        {habits.length > 0 ? Math.max(...habits.map(h => getHabitStats(h).currentStreak)) : 0}\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Habit Performance</CardTitle>\n                    <CardDescription>Detailed statistics for each habit</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {habits.map((habit) => {\n                        const stats = getHabitStats(habit);\n                        return (\n                          <div key={habit.id} className=\"border-b border-gray-200 last:border-b-0 pb-4 last:pb-0\">\n                            <div className=\"flex items-center justify-between mb-2\">\n                              <h4 className=\"font-medium\">{habit.name}</h4>\n                              <Badge variant=\"outline\">{stats.completionRate}% complete</Badge>\n                            </div>\n                            <Progress value={stats.completionRate} className=\"mb-2\" />\n                            <div className=\"grid grid-cols-3 gap-4 text-sm text-gray-600\">\n                              <div>Current streak: {stats.currentStreak} days</div>\n                              <div>Total completions: {stats.totalCompletions}</div>\n                              <div>\n                                Last completed: {stats.lastCompleted ? \n                                  new Date(stats.lastCompleted).toLocaleDateString() : \n                                  'Never'\n                                }\n                              </div>\n                            </div>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n          </div>\n        </main>\n      </div>\n\n      <AdvancedAddHabitDialog \n        open={addDialogOpen} \n        onOpenChange={setAddDialogOpen} \n      />\n    </div>\n  );\n}","size_bytes":20647},"client/src/pages/health.tsx":{"content":"import { useState } from \"react\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport MobileSidebar from \"@/components/layout/mobile-sidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Menu, Plus, Moon, Dumbbell, Smile, Heart, TrendingUp, Calendar } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport LogHealthDialog from \"@/components/dialogs/log-health-dialog\";\nimport type { HealthEntry } from \"@shared/schema\";\n\nexport default function HealthPage() {\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const [logDialogOpen, setLogDialogOpen] = useState(false);\n  const [activeTab, setActiveTab] = useState(\"today\");\n  const isMobile = useIsMobile();\n  const today = new Date().toISOString().split('T')[0];\n\n  // Fetch health data\n  const { data: healthEntries = [] } = useQuery<HealthEntry[]>({\n    queryKey: ['/api/health-entries'],\n    queryFn: () => fetch('/api/health-entries').then(res => res.json())\n  });\n\n  const todayEntry = healthEntries.find(entry => entry.date === today);\n\n  const getWeekData = () => {\n    const week = [];\n    for (let i = 6; i >= 0; i--) {\n      const date = new Date();\n      date.setDate(date.getDate() - i);\n      const dateStr = date.toISOString().split('T')[0];\n      \n      const entry = healthEntries.find(e => e.date === dateStr);\n      week.push({\n        date: dateStr,\n        dayName: date.toLocaleDateString('en', { weekday: 'short' }),\n        entry\n      });\n    }\n    return week;\n  };\n\n  const getHealthStats = () => {\n    const recentEntries = healthEntries.slice(-30); // Last 30 days\n    \n    if (recentEntries.length === 0) {\n      return {\n        avgSleep: 0,\n        avgSleepQuality: 0,\n        avgExercise: 0,\n        avgMood: 0,\n        totalCalories: 0\n      };\n    }\n\n    const sleepEntries = recentEntries.filter(e => e.sleepHours);\n    const qualityEntries = recentEntries.filter(e => e.sleepQuality);\n    const exerciseEntries = recentEntries.filter(e => e.exerciseMinutes);\n    const moodEntries = recentEntries.filter(e => e.mood);\n    \n    return {\n      avgSleep: sleepEntries.length > 0 ? \n        sleepEntries.reduce((sum, e) => sum + (e.sleepHours || 0), 0) / sleepEntries.length : 0,\n      avgSleepQuality: qualityEntries.length > 0 ?\n        qualityEntries.reduce((sum, e) => sum + (e.sleepQuality || 0), 0) / qualityEntries.length : 0,\n      avgExercise: exerciseEntries.length > 0 ?\n        exerciseEntries.reduce((sum, e) => sum + (e.exerciseMinutes || 0), 0) / exerciseEntries.length : 0,\n      avgMood: moodEntries.length > 0 ?\n        moodEntries.reduce((sum, e) => sum + (e.mood || 0), 0) / moodEntries.length : 0,\n      totalCalories: recentEntries.reduce((sum, e) => sum + (e.caloriesBurned || 0), 0)\n    };\n  };\n\n  const getMoodEmoji = (mood: number | null | undefined) => {\n    if (!mood) return \"😐\";\n    if (mood <= 2) return \"😢\";\n    if (mood <= 4) return \"😕\";\n    if (mood <= 6) return \"😐\";\n    if (mood <= 8) return \"🙂\";\n    return \"😊\";\n  };\n\n  const getSleepQualityColor = (quality: number | null | undefined) => {\n    if (!quality) return \"bg-gray-300\";\n    if (quality <= 3) return \"bg-red-500\";\n    if (quality <= 6) return \"bg-yellow-500\";\n    if (quality <= 8) return \"bg-blue-500\";\n    return \"bg-green-500\";\n  };\n\n  const stats = getHealthStats();\n  const weekData = getWeekData();\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      {/* Desktop Sidebar */}\n      {!isMobile && <Sidebar />}\n\n      {/* Mobile Sidebar */}\n      {isMobile && (\n        <MobileSidebar \n          open={mobileMenuOpen} \n          onOpenChange={setMobileMenuOpen} \n        />\n      )}\n\n      {/* Main Content */}\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        {/* Header */}\n        <header className=\"bg-surface border-b border-gray-200 px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              {isMobile && (\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  onClick={() => setMobileMenuOpen(true)}\n                  data-testid=\"button-mobile-menu\"\n                >\n                  <Menu className=\"h-5 w-5\" />\n                </Button>\n              )}\n              <div>\n                <h2 className=\"text-2xl font-semibold text-gray-900\">Health Tracker</h2>\n                <p className=\"text-gray-600\">Monitor your sleep, exercise, and overall wellbeing</p>\n              </div>\n            </div>\n            <Button\n              onClick={() => setLogDialogOpen(true)}\n              className=\"bg-primary text-white hover:bg-blue-700\"\n              data-testid=\"button-log-health\"\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Log Health Data\n            </Button>\n          </div>\n        </header>\n\n        {/* Content */}\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <div className=\"max-w-6xl mx-auto\">\n            {/* Today's Overview */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Sleep</CardTitle>\n                  <Moon className=\"h-4 w-4 text-blue-600\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\" data-testid=\"today-sleep-hours\">\n                    {todayEntry?.sleepHours || 0}h\n                  </div>\n                  <div className=\"flex items-center space-x-2 text-xs text-gray-600\">\n                    <div className={`w-3 h-3 rounded-full ${getSleepQualityColor(todayEntry?.sleepQuality)}`}></div>\n                    <span data-testid=\"today-sleep-quality\">\n                      Quality: {todayEntry?.sleepQuality || 0}/10\n                    </span>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Exercise</CardTitle>\n                  <Dumbbell className=\"h-4 w-4 text-green-600\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\" data-testid=\"today-exercise-minutes\">\n                    {todayEntry?.exerciseMinutes || 0}m\n                  </div>\n                  <p className=\"text-xs text-gray-600\" data-testid=\"today-exercise-type\">\n                    {todayEntry?.exerciseType || 'No activity logged'}\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Mood</CardTitle>\n                  <Smile className=\"h-4 w-4 text-yellow-600\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"text-2xl\" data-testid=\"today-mood-emoji\">\n                      {getMoodEmoji(todayEntry?.mood)}\n                    </span>\n                    <div className=\"text-2xl font-bold\" data-testid=\"today-mood-score\">\n                      {todayEntry?.mood || 0}/10\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Calories</CardTitle>\n                  <Heart className=\"h-4 w-4 text-red-600\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\" data-testid=\"today-calories\">\n                    {todayEntry?.caloriesBurned || 0}\n                  </div>\n                  <p className=\"text-xs text-gray-600\">burned</p>\n                </CardContent>\n              </Card>\n            </div>\n\n            <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n              <TabsList className=\"grid w-full grid-cols-3\">\n                <TabsTrigger value=\"today\" data-testid=\"tab-today\">Today</TabsTrigger>\n                <TabsTrigger value=\"weekly\" data-testid=\"tab-weekly\">Weekly View</TabsTrigger>\n                <TabsTrigger value=\"analytics\" data-testid=\"tab-analytics\">Analytics</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"today\" className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center space-x-2\">\n                        <Moon className=\"h-5 w-5 text-blue-600\" />\n                        <span>Sleep Analysis</span>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div>\n                        <div className=\"flex justify-between text-sm\">\n                          <span>Sleep Duration</span>\n                          <span className=\"font-medium\">{todayEntry?.sleepHours || 0} hours</span>\n                        </div>\n                        <Progress \n                          value={Math.min(((todayEntry?.sleepHours || 0) / 8) * 100, 100)} \n                          className=\"mt-2\"\n                        />\n                        <p className=\"text-xs text-gray-600 mt-1\">Recommended: 7-9 hours</p>\n                      </div>\n                      \n                      <div>\n                        <div className=\"flex justify-between text-sm\">\n                          <span>Sleep Quality</span>\n                          <span className=\"font-medium\">{todayEntry?.sleepQuality || 0}/10</span>\n                        </div>\n                        <Progress \n                          value={((todayEntry?.sleepQuality || 0) / 10) * 100} \n                          className=\"mt-2\"\n                        />\n                      </div>\n\n                      {!todayEntry && (\n                        <div className=\"text-center py-4 text-gray-500\">\n                          <Moon className=\"h-8 w-8 mx-auto mb-2 text-gray-400\" />\n                          <p>No sleep data logged for today</p>\n                          <Button \n                            onClick={() => setLogDialogOpen(true)} \n                            size=\"sm\" \n                            className=\"mt-2\"\n                          >\n                            Log Sleep Data\n                          </Button>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center space-x-2\">\n                        <Dumbbell className=\"h-5 w-5 text-green-600\" />\n                        <span>Exercise Summary</span>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div>\n                        <div className=\"flex justify-between text-sm\">\n                          <span>Duration</span>\n                          <span className=\"font-medium\">{todayEntry?.exerciseMinutes || 0} minutes</span>\n                        </div>\n                        <Progress \n                          value={Math.min(((todayEntry?.exerciseMinutes || 0) / 60) * 100, 100)} \n                          className=\"mt-2\"\n                        />\n                        <p className=\"text-xs text-gray-600 mt-1\">Recommended: 30+ minutes daily</p>\n                      </div>\n                      \n                      <div>\n                        <div className=\"flex justify-between text-sm\">\n                          <span>Activity Type</span>\n                          <span className=\"font-medium capitalize\">\n                            {todayEntry?.exerciseType || 'None'}\n                          </span>\n                        </div>\n                      </div>\n\n                      <div>\n                        <div className=\"flex justify-between text-sm\">\n                          <span>Calories Burned</span>\n                          <span className=\"font-medium\">{todayEntry?.caloriesBurned || 0}</span>\n                        </div>\n                      </div>\n\n                      {!todayEntry && (\n                        <div className=\"text-center py-4 text-gray-500\">\n                          <Dumbbell className=\"h-8 w-8 mx-auto mb-2 text-gray-400\" />\n                          <p>No exercise data logged for today</p>\n                          <Button \n                            onClick={() => setLogDialogOpen(true)} \n                            size=\"sm\" \n                            className=\"mt-2\"\n                          >\n                            Log Exercise Data\n                          </Button>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                </div>\n\n                {todayEntry?.notes && (\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Today's Notes</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <p className=\"text-gray-700\">{todayEntry.notes}</p>\n                    </CardContent>\n                  </Card>\n                )}\n              </TabsContent>\n\n              <TabsContent value=\"weekly\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <Calendar className=\"h-5 w-5\" />\n                      <span>7-Day Health Overview</span>\n                    </CardTitle>\n                    <CardDescription>Your health metrics for the past week</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-6\">\n                      {/* Sleep Overview */}\n                      <div>\n                        <h4 className=\"font-medium mb-3 flex items-center space-x-2\">\n                          <Moon className=\"h-4 w-4 text-blue-600\" />\n                          <span>Sleep Pattern</span>\n                        </h4>\n                        <div className=\"grid grid-cols-7 gap-2\">\n                          {weekData.map((day) => (\n                            <div key={day.date} className=\"text-center\">\n                              <div className=\"text-xs font-medium text-gray-600 mb-1\">{day.dayName}</div>\n                              <div className=\"bg-gray-100 rounded-lg p-2\">\n                                <div className=\"text-sm font-semibold\">\n                                  {day.entry?.sleepHours || 0}h\n                                </div>\n                                <div className={`w-full h-2 rounded mt-1 ${getSleepQualityColor(day.entry?.sleepQuality)}`}></div>\n                                <div className=\"text-xs text-gray-500 mt-1\">\n                                  Q: {day.entry?.sleepQuality || 0}\n                                </div>\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n\n                      {/* Exercise Overview */}\n                      <div>\n                        <h4 className=\"font-medium mb-3 flex items-center space-x-2\">\n                          <Dumbbell className=\"h-4 w-4 text-green-600\" />\n                          <span>Exercise Activity</span>\n                        </h4>\n                        <div className=\"grid grid-cols-7 gap-2\">\n                          {weekData.map((day) => (\n                            <div key={day.date} className=\"text-center\">\n                              <div className=\"text-xs font-medium text-gray-600 mb-1\">{day.dayName}</div>\n                              <div className=\"bg-gray-100 rounded-lg p-2\">\n                                <div className=\"text-sm font-semibold\">\n                                  {day.entry?.exerciseMinutes || 0}m\n                                </div>\n                                <div className=\"text-xs text-gray-500 mt-1 capitalize\">\n                                  {day.entry?.exerciseType || 'Rest'}\n                                </div>\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n\n                      {/* Mood Overview */}\n                      <div>\n                        <h4 className=\"font-medium mb-3 flex items-center space-x-2\">\n                          <Smile className=\"h-4 w-4 text-yellow-600\" />\n                          <span>Mood Tracking</span>\n                        </h4>\n                        <div className=\"grid grid-cols-7 gap-2\">\n                          {weekData.map((day) => (\n                            <div key={day.date} className=\"text-center\">\n                              <div className=\"text-xs font-medium text-gray-600 mb-1\">{day.dayName}</div>\n                              <div className=\"bg-gray-100 rounded-lg p-2\">\n                                <div className=\"text-2xl mb-1\">\n                                  {getMoodEmoji(day.entry?.mood)}\n                                </div>\n                                <div className=\"text-xs font-medium\">\n                                  {day.entry?.mood || 0}/10\n                                </div>\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"analytics\" className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                  <Card>\n                    <CardHeader className=\"pb-3\">\n                      <CardTitle className=\"text-sm\">Avg Sleep</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-3xl font-bold text-blue-600\">\n                        {stats.avgSleep.toFixed(1)}h\n                      </div>\n                      <Badge variant={stats.avgSleep >= 7 ? \"default\" : \"destructive\"} className=\"mt-2\">\n                        {stats.avgSleep >= 7 ? 'Good' : 'Needs Improvement'}\n                      </Badge>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardHeader className=\"pb-3\">\n                      <CardTitle className=\"text-sm\">Avg Exercise</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-3xl font-bold text-green-600\">\n                        {Math.round(stats.avgExercise)}m\n                      </div>\n                      <Badge variant={stats.avgExercise >= 30 ? \"default\" : \"destructive\"} className=\"mt-2\">\n                        {stats.avgExercise >= 30 ? 'Active' : 'Inactive'}\n                      </Badge>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardHeader className=\"pb-3\">\n                      <CardTitle className=\"text-sm\">Avg Mood</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"text-2xl\">{getMoodEmoji(stats.avgMood)}</span>\n                        <div className=\"text-3xl font-bold text-yellow-600\">\n                          {stats.avgMood.toFixed(1)}\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardHeader className=\"pb-3\">\n                      <CardTitle className=\"text-sm\">Total Calories</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-3xl font-bold text-red-600\">\n                        {Math.round(stats.totalCalories)}\n                      </div>\n                      <p className=\"text-xs text-gray-600 mt-2\">Last 30 days</p>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <TrendingUp className=\"h-5 w-5\" />\n                      <span>Health Insights</span>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      <div className=\"p-4 bg-blue-50 rounded-lg border-l-4 border-blue-500\">\n                        <h4 className=\"font-medium text-blue-900\">Sleep Pattern</h4>\n                        <p className=\"text-sm text-blue-800 mt-1\">\n                          {stats.avgSleep >= 7 \n                            ? \"Great job! You're getting adequate sleep on average.\"\n                            : \"Consider improving your sleep schedule. Aim for 7-9 hours nightly.\"\n                          }\n                        </p>\n                      </div>\n                      \n                      <div className=\"p-4 bg-green-50 rounded-lg border-l-4 border-green-500\">\n                        <h4 className=\"font-medium text-green-900\">Exercise Activity</h4>\n                        <p className=\"text-sm text-green-800 mt-1\">\n                          {stats.avgExercise >= 30\n                            ? \"Excellent! You're meeting the recommended daily exercise goals.\"\n                            : \"Try to increase your daily activity. Even 30 minutes makes a difference.\"\n                          }\n                        </p>\n                      </div>\n                      \n                      <div className=\"p-4 bg-yellow-50 rounded-lg border-l-4 border-yellow-500\">\n                        <h4 className=\"font-medium text-yellow-900\">Mental Wellbeing</h4>\n                        <p className=\"text-sm text-yellow-800 mt-1\">\n                          {stats.avgMood >= 7\n                            ? \"Your mood tracking shows positive mental health trends.\"\n                            : \"Consider activities that boost your mood and wellbeing.\"\n                          }\n                        </p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n          </div>\n        </main>\n      </div>\n\n      <LogHealthDialog \n        open={logDialogOpen} \n        onOpenChange={setLogDialogOpen}\n        existingEntry={todayEntry}\n      />\n    </div>\n  );\n}","size_bytes":23643},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/nutrition.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Search, \n  Plus, \n  Camera, \n  Coffee, \n  Utensils, \n  Apple, \n  Moon,\n  Target,\n  TrendingUp,\n  FileDown,\n  Settings\n} from \"lucide-react\";\nimport { Sidebar } from \"@/components/layout/unified-sidebar\";\nimport type { FoodItem, MealEntry, NutritionGoal } from \"@shared/schema\";\n\nconst MEAL_TYPES = [\n  { id: \"breakfast\", label: \"Breakfast\", icon: Coffee },\n  { id: \"lunch\", label: \"Lunch\", icon: Utensils },\n  { id: \"dinner\", label: \"Dinner\", icon: Apple },\n  { id: \"snack\", label: \"Snack\", icon: Moon }\n];\n\ninterface FoodSearchResult {\n  id: string;\n  name: string;\n  brand?: string;\n  nutrients: {\n    calories: number;\n    protein: number;\n    carbs: number;\n    fat: number;\n    fiber?: number;\n  };\n  servings?: Array<{\n    unit: string;\n    grams: number;\n    description?: string;\n  }>;\n}\n\nexport default function NutritionPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedMealType, setSelectedMealType] = useState(\"breakfast\");\n  const [selectedFood, setSelectedFood] = useState<FoodSearchResult | null>(null);\n  const [servingSize, setServingSize] = useState(1);\n  const [selectedServing, setSelectedServing] = useState<string>(\"\");\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const today = new Date().toISOString().split('T')[0];\n\n  // Food search query\n  const { data: searchResults = [], isLoading: searchLoading } = useQuery({\n    queryKey: ['/api/foods/search', searchQuery],\n    enabled: searchQuery.length >= 2,\n    queryFn: async () => {\n      const params = new URLSearchParams({ q: searchQuery, limit: '10' });\n      const response = await fetch(`/api/foods/search?${params}`);\n      if (!response.ok) throw new Error('Search failed');\n      return response.json();\n    }\n  });\n\n  // Today's meals\n  const { data: todaysMeals = [] } = useQuery({\n    queryKey: ['/api/meals', today],\n    queryFn: async () => {\n      const response = await fetch(`/api/meals?date=${today}`);\n      if (!response.ok) throw new Error('Failed to fetch meals');\n      return response.json();\n    }\n  });\n\n  // Daily totals\n  const { data: dailyTotals } = useQuery({\n    queryKey: ['/api/day', today, 'totals'],\n    queryFn: async () => {\n      const response = await fetch(`/api/day/${today}/totals`);\n      if (!response.ok) throw new Error('Failed to fetch daily totals');\n      return response.json();\n    }\n  });\n\n  // Nutrition goal\n  const { data: nutritionGoal } = useQuery({\n    queryKey: ['/api/nutrition-goals'],\n    queryFn: async () => {\n      const response = await fetch('/api/nutrition-goals');\n      if (!response.ok) throw new Error('Failed to fetch nutrition goal');\n      return response.json();\n    }\n  });\n\n  // Log meal mutation\n  const logMealMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest(\"POST\", \"/api/log/meal\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/meals'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/day'] });\n      toast({\n        title: \"Meal logged\",\n        description: \"Your food has been logged successfully.\",\n      });\n      setSelectedFood(null);\n      setSearchQuery(\"\");\n      setServingSize(1);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to log meal. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleFoodSelect = (food: FoodSearchResult) => {\n    setSelectedFood(food);\n    if (food.servings && food.servings.length > 0) {\n      setSelectedServing(food.servings[0].unit);\n    }\n  };\n\n  const calculateNutrition = () => {\n    if (!selectedFood) return null;\n    \n    let gramsPerServing = 100; // Default per 100g\n    if (selectedFood.servings && selectedServing) {\n      const serving = selectedFood.servings.find(s => s.unit === selectedServing);\n      if (serving) {\n        gramsPerServing = serving.grams;\n      }\n    }\n    \n    const multiplier = (gramsPerServing * servingSize) / 100;\n    \n    return {\n      calories: Math.round(selectedFood.nutrients.calories * multiplier),\n      protein: Math.round(selectedFood.nutrients.protein * multiplier * 10) / 10,\n      carbs: Math.round(selectedFood.nutrients.carbs * multiplier * 10) / 10,\n      fat: Math.round(selectedFood.nutrients.fat * multiplier * 10) / 10,\n      fiber: selectedFood.nutrients.fiber ? Math.round(selectedFood.nutrients.fiber * multiplier * 10) / 10 : 0\n    };\n  };\n\n  const handleLogMeal = () => {\n    if (!selectedFood) return;\n    \n    const nutrition = calculateNutrition();\n    if (!nutrition) return;\n\n    const servingGrams = selectedFood.servings && selectedServing \n      ? selectedFood.servings.find(s => s.unit === selectedServing)?.grams || 100 \n      : 100;\n\n    logMealMutation.mutate({\n      date: today,\n      mealType: selectedMealType,\n      datetime: new Date().toISOString(),\n      items: [{\n        foodId: selectedFood.id,\n        quantity: servingSize,\n        servingGrams: servingGrams * servingSize,\n        notes: null\n      }],\n      source: \"search\",\n      totalsCache: {\n        calories: nutrition.calories,\n        protein: nutrition.protein,\n        carbs: nutrition.carbs,\n        fat: nutrition.fat,\n        fiber: nutrition.fiber,\n        sugar: 0,\n        sodium: 0\n      }\n    });\n  };\n\n  const getMealEntries = (mealType: string) => {\n    return todaysMeals.filter((meal: MealEntry) => meal.mealType === mealType);\n  };\n\n  const getMealTotals = (mealType: string) => {\n    const meals = getMealEntries(mealType);\n    return meals.reduce((total: any, meal: MealEntry) => {\n      if (meal.totalsCache) {\n        return {\n          calories: total.calories + meal.totalsCache.calories,\n          protein: total.protein + meal.totalsCache.protein,\n          carbs: total.carbs + meal.totalsCache.carbs,\n          fat: total.fat + meal.totalsCache.fat\n        };\n      }\n      return total;\n    }, { calories: 0, protein: 0, carbs: 0, fat: 0 });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"flex\">\n        <Sidebar \n          mobileMenuOpen={mobileMenuOpen} \n          setMobileMenuOpen={setMobileMenuOpen}\n          currentPage=\"/nutrition\"\n        />\n        \n        <main className=\"flex-1 p-6 lg:ml-64\">\n          <div className=\"max-w-7xl mx-auto\">\n            <div className=\"flex items-center justify-between mb-8\">\n              <div>\n                <h1 className=\"text-3xl font-bold text-gray-900\">Nutrition Tracker</h1>\n                <p className=\"text-gray-600 mt-2\">Track your daily nutrition and reach your goals</p>\n              </div>\n              <Button variant=\"outline\" className=\"gap-2\">\n                <Settings className=\"h-4 w-4\" />\n                Goals\n              </Button>\n            </div>\n\n            <Tabs defaultValue=\"quick-log\" className=\"space-y-6\">\n              <TabsList className=\"grid w-full grid-cols-4\">\n                <TabsTrigger value=\"quick-log\" data-testid=\"tab-quick-log\">Quick Log</TabsTrigger>\n                <TabsTrigger value=\"diary\" data-testid=\"tab-diary\">Today's Diary</TabsTrigger>\n                <TabsTrigger value=\"weekly\" data-testid=\"tab-weekly\">Weekly Report</TabsTrigger>\n                <TabsTrigger value=\"goals\" data-testid=\"tab-goals\">Goals & Progress</TabsTrigger>\n              </TabsList>\n\n              {/* Quick Log Tab */}\n              <TabsContent value=\"quick-log\" className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                  {/* Food Search */}\n                  <Card className=\"lg:col-span-2\">\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <Search className=\"h-5 w-5\" />\n                        Quick Food Log\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      {/* Meal Type Selection */}\n                      <div className=\"grid grid-cols-4 gap-2\">\n                        {MEAL_TYPES.map((meal) => {\n                          const Icon = meal.icon;\n                          return (\n                            <Button\n                              key={meal.id}\n                              variant={selectedMealType === meal.id ? \"default\" : \"outline\"}\n                              className=\"flex flex-col gap-1 h-16\"\n                              onClick={() => setSelectedMealType(meal.id)}\n                              data-testid={`meal-${meal.id}`}\n                            >\n                              <Icon className=\"h-4 w-4\" />\n                              <span className=\"text-xs\">{meal.label}</span>\n                            </Button>\n                          );\n                        })}\n                      </div>\n\n                      <Separator />\n\n                      {/* Search Input */}\n                      <div className=\"relative\">\n                        <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                        <Input\n                          placeholder=\"Search foods... (e.g., banana, chicken breast)\"\n                          value={searchQuery}\n                          onChange={(e) => setSearchQuery(e.target.value)}\n                          className=\"pl-10\"\n                          data-testid=\"input-food-search\"\n                        />\n                      </div>\n\n                      {/* Search Results */}\n                      {searchQuery.length >= 2 && (\n                        <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n                          {searchLoading ? (\n                            <div className=\"text-center py-4 text-gray-500\">Searching...</div>\n                          ) : searchResults.length === 0 ? (\n                            <div className=\"text-center py-4 text-gray-500\">No foods found</div>\n                          ) : (\n                            searchResults.map((food: FoodSearchResult) => (\n                              <div\n                                key={food.id}\n                                className={`p-3 border rounded-lg cursor-pointer transition-colors ${\n                                  selectedFood?.id === food.id \n                                    ? 'border-blue-500 bg-blue-50' \n                                    : 'border-gray-200 hover:bg-gray-50'\n                                }`}\n                                onClick={() => handleFoodSelect(food)}\n                                data-testid={`food-${food.id}`}\n                              >\n                                <div className=\"flex items-center justify-between\">\n                                  <div>\n                                    <h4 className=\"font-medium\">{food.name}</h4>\n                                    {food.brand && (\n                                      <p className=\"text-sm text-gray-600\">{food.brand}</p>\n                                    )}\n                                  </div>\n                                  <div className=\"text-right text-sm text-gray-600\">\n                                    <div>{food.nutrients.calories} cal</div>\n                                    <div>{food.nutrients.protein}g protein</div>\n                                  </div>\n                                </div>\n                              </div>\n                            ))\n                          )}\n                        </div>\n                      )}\n\n                      {/* Serving Size Controls */}\n                      {selectedFood && (\n                        <div className=\"space-y-4 p-4 bg-gray-50 rounded-lg\">\n                          <h4 className=\"font-medium\">{selectedFood.name}</h4>\n                          \n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                            {/* Serving Unit */}\n                            {selectedFood.servings && selectedFood.servings.length > 0 && (\n                              <div>\n                                <label className=\"block text-sm font-medium mb-1\">Serving Unit</label>\n                                <Select value={selectedServing} onValueChange={setSelectedServing}>\n                                  <SelectTrigger data-testid=\"select-serving-unit\">\n                                    <SelectValue />\n                                  </SelectTrigger>\n                                  <SelectContent>\n                                    {selectedFood.servings.map((serving) => (\n                                      <SelectItem key={serving.unit} value={serving.unit}>\n                                        {serving.description || `1 ${serving.unit} (${serving.grams}g)`}\n                                      </SelectItem>\n                                    ))}\n                                  </SelectContent>\n                                </Select>\n                              </div>\n                            )}\n\n                            {/* Quantity */}\n                            <div>\n                              <label className=\"block text-sm font-medium mb-1\">Quantity</label>\n                              <div className=\"flex items-center space-x-2\">\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  onClick={() => setServingSize(Math.max(0.25, servingSize - 0.25))}\n                                  data-testid=\"button-decrease-serving\"\n                                >\n                                  -\n                                </Button>\n                                <Input\n                                  type=\"number\"\n                                  value={servingSize}\n                                  onChange={(e) => setServingSize(parseFloat(e.target.value) || 1)}\n                                  step=\"0.25\"\n                                  min=\"0.25\"\n                                  className=\"w-20 text-center\"\n                                  data-testid=\"input-serving-size\"\n                                />\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  onClick={() => setServingSize(servingSize + 0.25)}\n                                  data-testid=\"button-increase-serving\"\n                                >\n                                  +\n                                </Button>\n                              </div>\n                            </div>\n                          </div>\n\n                          {/* Nutrition Preview */}\n                          {(() => {\n                            const nutrition = calculateNutrition();\n                            if (!nutrition) return null;\n                            \n                            return (\n                              <div className=\"grid grid-cols-4 gap-2 text-center\">\n                                <div>\n                                  <div className=\"font-semibold text-lg\">{nutrition.calories}</div>\n                                  <div className=\"text-xs text-gray-600\">Calories</div>\n                                </div>\n                                <div>\n                                  <div className=\"font-semibold text-lg\">{nutrition.protein}g</div>\n                                  <div className=\"text-xs text-gray-600\">Protein</div>\n                                </div>\n                                <div>\n                                  <div className=\"font-semibold text-lg\">{nutrition.carbs}g</div>\n                                  <div className=\"text-xs text-gray-600\">Carbs</div>\n                                </div>\n                                <div>\n                                  <div className=\"font-semibold text-lg\">{nutrition.fat}g</div>\n                                  <div className=\"text-xs text-gray-600\">Fat</div>\n                                </div>\n                              </div>\n                            );\n                          })()}\n\n                          <Button\n                            onClick={handleLogMeal}\n                            disabled={logMealMutation.isPending}\n                            className=\"w-full\"\n                            data-testid=\"button-log-meal\"\n                          >\n                            <Plus className=\"h-4 w-4 mr-2\" />\n                            {logMealMutation.isPending ? \"Logging...\" : \"Log Food\"}\n                          </Button>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n\n                  {/* Daily Summary */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <Target className=\"h-5 w-5\" />\n                        Today's Progress\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      {dailyTotals && nutritionGoal ? (\n                        <>\n                          {/* Calories */}\n                          <div>\n                            <div className=\"flex justify-between text-sm mb-1\">\n                              <span>Calories</span>\n                              <span>{dailyTotals.totals.calories} / {nutritionGoal.calorieTarget}</span>\n                            </div>\n                            <Progress \n                              value={(dailyTotals.totals.calories / nutritionGoal.calorieTarget) * 100} \n                              className=\"h-2\" \n                            />\n                          </div>\n\n                          {/* Macros */}\n                          <div className=\"grid grid-cols-3 gap-2 text-center\">\n                            <div>\n                              <div className=\"text-lg font-semibold\">{dailyTotals.totals.protein}g</div>\n                              <div className=\"text-xs text-gray-600\">Protein</div>\n                              <div className=\"text-xs\">\n                                {Math.round((dailyTotals.totals.protein / nutritionGoal.proteinTarget) * 100)}%\n                              </div>\n                            </div>\n                            <div>\n                              <div className=\"text-lg font-semibold\">{dailyTotals.totals.carbs}g</div>\n                              <div className=\"text-xs text-gray-600\">Carbs</div>\n                              <div className=\"text-xs\">\n                                {Math.round((dailyTotals.totals.carbs / nutritionGoal.carbsTarget) * 100)}%\n                              </div>\n                            </div>\n                            <div>\n                              <div className=\"text-lg font-semibold\">{dailyTotals.totals.fat}g</div>\n                              <div className=\"text-xs text-gray-600\">Fat</div>\n                              <div className=\"text-xs\">\n                                {Math.round((dailyTotals.totals.fat / nutritionGoal.fatTarget) * 100)}%\n                              </div>\n                            </div>\n                          </div>\n\n                          {/* Warnings */}\n                          {dailyTotals.warnings && dailyTotals.warnings.length > 0 && (\n                            <div className=\"space-y-1\">\n                              {dailyTotals.warnings.map((warning: string, index: number) => (\n                                <div key={index} className=\"text-sm text-amber-600 bg-amber-50 p-2 rounded\">\n                                  {warning}\n                                </div>\n                              ))}\n                            </div>\n                          )}\n                        </>\n                      ) : (\n                        <div className=\"text-center text-gray-500 py-4\">\n                          Set up your nutrition goals to see progress\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                </div>\n\n                {/* Barcode Scanner */}\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <div className=\"text-center space-y-4\">\n                      <Camera className=\"h-12 w-12 mx-auto text-gray-400\" />\n                      <div>\n                        <h3 className=\"font-medium\">Quick Barcode Scan</h3>\n                        <p className=\"text-sm text-gray-600\">Scan product barcodes for instant nutrition lookup</p>\n                      </div>\n                      <Button variant=\"outline\" data-testid=\"button-scan-barcode\">\n                        <Camera className=\"h-4 w-4 mr-2\" />\n                        Scan Barcode\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              {/* Diary Tab */}\n              <TabsContent value=\"diary\" className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n                  {MEAL_TYPES.map((meal) => {\n                    const Icon = meal.icon;\n                    const mealTotals = getMealTotals(meal.id);\n                    const mealEntries = getMealEntries(meal.id);\n                    \n                    return (\n                      <Card key={meal.id}>\n                        <CardHeader className=\"pb-3\">\n                          <CardTitle className=\"flex items-center gap-2 text-base\">\n                            <Icon className=\"h-4 w-4\" />\n                            {meal.label}\n                          </CardTitle>\n                        </CardHeader>\n                        <CardContent className=\"space-y-3\">\n                          {mealEntries.length > 0 ? (\n                            <>\n                              {mealEntries.map((entry: MealEntry) => (\n                                <div key={entry.id} className=\"text-sm border-b border-gray-100 pb-2\">\n                                  <div className=\"font-medium\">Food logged</div>\n                                  <div className=\"text-gray-600\">\n                                    {entry.totalsCache?.calories || 0} cal\n                                  </div>\n                                </div>\n                              ))}\n                              <div className=\"pt-2 border-t\">\n                                <div className=\"text-sm font-medium\">Total: {mealTotals.calories} cal</div>\n                                <div className=\"text-xs text-gray-600\">\n                                  P: {mealTotals.protein}g | C: {mealTotals.carbs}g | F: {mealTotals.fat}g\n                                </div>\n                              </div>\n                            </>\n                          ) : (\n                            <div className=\"text-sm text-gray-500 text-center py-4\">\n                              No foods logged\n                            </div>\n                          )}\n                        </CardContent>\n                      </Card>\n                    );\n                  })}\n                </div>\n              </TabsContent>\n\n              {/* Weekly Report Tab */}\n              <TabsContent value=\"weekly\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <TrendingUp className=\"h-5 w-5\" />\n                      Weekly Nutrition Report\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-center text-gray-500 py-12\">\n                      Weekly report functionality coming soon...\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              {/* Goals Tab */}\n              <TabsContent value=\"goals\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Settings className=\"h-5 w-5\" />\n                      Nutrition Goals\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-center text-gray-500 py-12\">\n                      Nutrition goals management coming soon...\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":25620},"client/src/pages/timer.tsx":{"content":"import { useState } from \"react\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport MobileSidebar from \"@/components/layout/mobile-sidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Menu, Play, Pause, Square, RotateCcw, Coffee, Clock } from \"lucide-react\";\nimport { useTimer } from \"@/hooks/use-timer\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { TimerSession } from \"@shared/schema\";\n\nexport default function TimerPage() {\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const [timerType, setTimerType] = useState<\"pomodoro\" | \"break\" | \"long-break\">(\"pomodoro\");\n  const [selectedDuration, setSelectedDuration] = useState(25);\n  const isMobile = useIsMobile();\n  const today = new Date().toISOString().split('T')[0];\n\n  const durations = {\n    pomodoro: [15, 25, 30, 45, 60],\n    break: [5, 10, 15],\n    \"long-break\": [15, 20, 30]\n  };\n\n  const { time, isRunning, start, pause, reset } = useTimer({\n    duration: selectedDuration,\n    onComplete: () => {\n      // Show notification or play sound when timer completes\n      if ('Notification' in window && Notification.permission === 'granted') {\n        new Notification('Timer Complete!', {\n          body: `Your ${timerType === 'pomodoro' ? 'focus session' : 'break'} is finished.`,\n          icon: '/favicon.ico'\n        });\n      }\n    }\n  });\n\n  const { data: todayTimerSessions = [] } = useQuery<TimerSession[]>({\n    queryKey: ['/api/timer-sessions', today],\n    queryFn: () => fetch(`/api/timer-sessions?date=${today}`).then(res => res.json())\n  });\n\n  const { data: allTimerSessions = [] } = useQuery<TimerSession[]>({\n    queryKey: ['/api/timer-sessions'],\n    queryFn: () => fetch('/api/timer-sessions').then(res => res.json())\n  });\n\n  const formatTime = (minutes: number) => {\n    const mins = Math.floor(minutes);\n    const secs = Math.floor((minutes - mins) * 60);\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const getTotalStats = () => {\n    const completedSessions = allTimerSessions.filter(s => s.completed);\n    const totalMinutes = completedSessions.reduce((sum, s) => sum + s.duration, 0);\n    const pomodoroSessions = completedSessions.filter(s => s.type === 'pomodoro').length;\n    \n    return {\n      totalSessions: completedSessions.length,\n      totalMinutes,\n      pomodoroSessions,\n      totalHours: Math.floor(totalMinutes / 60)\n    };\n  };\n\n  const stats = getTotalStats();\n  const todayCompletedSessions = todayTimerSessions.filter(s => s.completed);\n  const todayMinutes = todayCompletedSessions.reduce((sum, s) => sum + s.duration, 0);\n\n  const progress = (selectedDuration - time) / selectedDuration;\n  const circumference = 2 * Math.PI * 120;\n  const strokeDashoffset = circumference - (progress * circumference);\n\n  const requestNotificationPermission = () => {\n    if ('Notification' in window && Notification.permission === 'default') {\n      Notification.requestPermission();\n    }\n  };\n\n  const handleTimerTypeChange = (type: \"pomodoro\" | \"break\" | \"long-break\") => {\n    setTimerType(type);\n    const defaultDuration = type === \"pomodoro\" ? 25 : type === \"break\" ? 5 : 15;\n    setSelectedDuration(defaultDuration);\n    reset();\n  };\n\n  const handleDurationChange = (duration: string) => {\n    setSelectedDuration(parseInt(duration));\n    reset();\n  };\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      {/* Desktop Sidebar */}\n      {!isMobile && <Sidebar />}\n\n      {/* Mobile Sidebar */}\n      {isMobile && (\n        <MobileSidebar \n          open={mobileMenuOpen} \n          onOpenChange={setMobileMenuOpen} \n        />\n      )}\n\n      {/* Main Content */}\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        {/* Header */}\n        <header className=\"bg-surface border-b border-gray-200 px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              {isMobile && (\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  onClick={() => setMobileMenuOpen(true)}\n                  data-testid=\"button-mobile-menu\"\n                >\n                  <Menu className=\"h-5 w-5\" />\n                </Button>\n              )}\n              <div>\n                <h2 className=\"text-2xl font-semibold text-gray-900\">Focus Timer</h2>\n                <p className=\"text-gray-600\">Use the Pomodoro technique to stay focused and productive</p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Button \n                onClick={requestNotificationPermission}\n                variant=\"outline\"\n                data-testid=\"button-enable-notifications\"\n              >\n                Enable Notifications\n              </Button>\n            </div>\n          </div>\n        </header>\n\n        {/* Timer Content */}\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <div className=\"max-w-4xl mx-auto\">\n            {/* Timer Controls */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Clock className=\"h-5 w-5\" />\n                    <span>Timer Type</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <Button\n                      variant={timerType === \"pomodoro\" ? \"default\" : \"outline\"}\n                      className=\"w-full justify-start\"\n                      onClick={() => handleTimerTypeChange(\"pomodoro\")}\n                      data-testid=\"button-pomodoro\"\n                    >\n                      <Clock className=\"h-4 w-4 mr-2\" />\n                      Pomodoro\n                    </Button>\n                    <Button\n                      variant={timerType === \"break\" ? \"default\" : \"outline\"}\n                      className=\"w-full justify-start\"\n                      onClick={() => handleTimerTypeChange(\"break\")}\n                      data-testid=\"button-break\"\n                    >\n                      <Coffee className=\"h-4 w-4 mr-2\" />\n                      Short Break\n                    </Button>\n                    <Button\n                      variant={timerType === \"long-break\" ? \"default\" : \"outline\"}\n                      className=\"w-full justify-start\"\n                      onClick={() => handleTimerTypeChange(\"long-break\")}\n                      data-testid=\"button-long-break\"\n                    >\n                      <Coffee className=\"h-4 w-4 mr-2\" />\n                      Long Break\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Duration</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <Select value={selectedDuration.toString()} onValueChange={handleDurationChange}>\n                    <SelectTrigger data-testid=\"select-duration\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {durations[timerType].map((duration) => (\n                        <SelectItem key={duration} value={duration.toString()}>\n                          {duration} minutes\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Today's Progress</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-primary\" data-testid=\"text-today-sessions\">\n                      {todayCompletedSessions.length}\n                    </div>\n                    <div className=\"text-sm text-gray-600\">Sessions completed</div>\n                    <div className=\"text-lg font-semibold mt-2\" data-testid=\"text-today-minutes\">\n                      {Math.floor(todayMinutes / 60)}h {todayMinutes % 60}m\n                    </div>\n                    <div className=\"text-sm text-gray-600\">Focus time</div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Main Timer Display */}\n            <Card className=\"mb-8\">\n              <CardContent className=\"p-12\">\n                <div className=\"text-center\">\n                  <div className=\"relative w-80 h-80 mx-auto mb-8\">\n                    <svg className=\"w-80 h-80 transform -rotate-90\" viewBox=\"0 0 264 264\">\n                      <circle \n                        cx=\"132\" \n                        cy=\"132\" \n                        r=\"120\" \n                        stroke=\"#E5E7EB\" \n                        strokeWidth=\"16\" \n                        fill=\"none\"\n                      />\n                      <circle \n                        cx=\"132\" \n                        cy=\"132\" \n                        r=\"120\" \n                        stroke={timerType === \"pomodoro\" ? \"#1976D2\" : \"#388E3C\"}\n                        strokeWidth=\"16\" \n                        fill=\"none\"\n                        strokeDasharray={circumference}\n                        strokeDashoffset={strokeDashoffset}\n                        strokeLinecap=\"round\"\n                        className=\"transition-all duration-1000\"\n                      />\n                    </svg>\n                    <div className=\"absolute inset-0 flex items-center justify-center\">\n                      <div className=\"text-center\">\n                        <div className=\"text-6xl font-bold text-gray-900 mb-4\" data-testid=\"timer-display\">\n                          {formatTime(time)}\n                        </div>\n                        <div className=\"text-xl text-gray-600 capitalize\">\n                          {timerType === \"pomodoro\" ? \"Focus Session\" : \"Break Time\"}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex justify-center space-x-4\">\n                    <Button\n                      onClick={isRunning ? pause : start}\n                      size=\"lg\"\n                      className=\"px-8\"\n                      data-testid=\"button-timer-toggle\"\n                    >\n                      {isRunning ? (\n                        <>\n                          <Pause className=\"h-5 w-5 mr-2\" />\n                          Pause\n                        </>\n                      ) : (\n                        <>\n                          <Play className=\"h-5 w-5 mr-2\" />\n                          Start\n                        </>\n                      )}\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      onClick={reset}\n                      size=\"lg\"\n                      className=\"px-8\"\n                      data-testid=\"button-timer-reset\"\n                    >\n                      <RotateCcw className=\"h-5 w-5 mr-2\" />\n                      Reset\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Statistics */}\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n              <Card>\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-sm\">Total Sessions</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-primary\" data-testid=\"stat-total-sessions\">\n                    {stats.totalSessions}\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-sm\">Pomodoro Sessions</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-secondary\" data-testid=\"stat-pomodoro-sessions\">\n                    {stats.pomodoroSessions}\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-sm\">Total Focus Time</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-accent\" data-testid=\"stat-total-hours\">\n                    {stats.totalHours}h\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-sm\">Average Daily</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-purple-600\" data-testid=\"stat-daily-average\">\n                    {Math.round(stats.totalMinutes / 7)}m\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":13652},"client/src/components/dashboard/goals-section.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Plus } from \"lucide-react\";\nimport AddGoalDialog from \"@/components/dialogs/add-goal-dialog\";\nimport type { Goal } from \"@shared/schema\";\n\ninterface GoalsSectionProps {\n  goals: Goal[];\n}\n\nexport default function GoalsSection({ goals }: GoalsSectionProps) {\n  const [addDialogOpen, setAddDialogOpen] = useState(false);\n\n  const formatDeadline = (deadline: string | null) => {\n    if (!deadline) return \"No deadline\";\n    const date = new Date(deadline);\n    return date.toLocaleDateString(\"en-US\", { month: \"short\", day: \"numeric\" });\n  };\n\n  const getProgressColor = (progress: number) => {\n    if (progress >= 75) return \"bg-secondary\";\n    if (progress >= 50) return \"bg-primary\";\n    return \"bg-accent\";\n  };\n\n  return (\n    <>\n      <div className=\"bg-surface p-6 rounded-xl border border-gray-200\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">Current Goals</h3>\n          <Button\n            variant=\"ghost\"\n            onClick={() => setAddDialogOpen(true)}\n            className=\"text-primary hover:text-blue-700\"\n            data-testid=\"button-add-goal\"\n          >\n            <Plus className=\"h-4 w-4 mr-2\" />\n            New Goal\n          </Button>\n        </div>\n\n        <div className=\"space-y-4\">\n          {goals.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <p className=\"text-gray-500 mb-4\">No goals yet. Set your first goal to get started!</p>\n              <Button onClick={() => setAddDialogOpen(true)} data-testid=\"button-add-first-goal\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Set Your First Goal\n              </Button>\n            </div>\n          ) : (\n            goals.map((goal) => (\n              <div key={goal.id} className=\"p-4 border border-gray-200 rounded-lg\" data-testid={`goal-${goal.id}`}>\n                <div className=\"flex items-center justify-between mb-3\">\n                  <h4 className=\"font-medium text-gray-900\">{goal.title}</h4>\n                  <span className=\"text-sm text-gray-600\">\n                    {formatDeadline(goal.deadline)}\n                  </span>\n                </div>\n                <div className=\"mb-3\">\n                  <div className=\"flex justify-between text-sm mb-1\">\n                    <span className=\"text-gray-600\">Progress</span>\n                    <span className=\"font-medium text-gray-900\" data-testid={`goal-progress-${goal.id}`}>\n                      {goal.progress}%\n                    </span>\n                  </div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                    <div \n                      className={`${getProgressColor(goal.progress)} h-2 rounded-full transition-all duration-300`}\n                      style={{ width: `${goal.progress}%` }}\n                    />\n                  </div>\n                </div>\n                {goal.description && (\n                  <p className=\"text-sm text-gray-600\">{goal.description}</p>\n                )}\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n\n      <AddGoalDialog \n        open={addDialogOpen} \n        onOpenChange={setAddDialogOpen} \n      />\n    </>\n  );\n}\n","size_bytes":3329},"client/src/components/dashboard/habits-section.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Plus } from \"lucide-react\";\nimport AdvancedAddHabitDialog from \"@/components/dialogs/advanced-add-habit-dialog\";\nimport HabitEntryForm from \"@/components/habits/habit-entry-form\";\nimport type { Habit, HabitEntry } from \"@shared/schema\";\n\ninterface HabitsSectionProps {\n  habits: Habit[];\n  todayEntries: HabitEntry[];\n}\n\nexport default function HabitsSection({ habits, todayEntries }: HabitsSectionProps) {\n  const [addDialogOpen, setAddDialogOpen] = useState(false);\n  const today = new Date().toISOString().split('T')[0];\n\n  const getHabitEntry = (habitId: string) => {\n    return todayEntries.find(entry => entry.habitId === habitId);\n  };\n\n  return (\n    <>\n      <div className=\"bg-surface p-6 rounded-xl border border-gray-200\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">Today's Habits</h3>\n          <Button\n            variant=\"ghost\"\n            onClick={() => setAddDialogOpen(true)}\n            className=\"text-primary hover:text-blue-700\"\n            data-testid=\"button-add-habit\"\n          >\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Add Habit\n          </Button>\n        </div>\n\n        <div className=\"space-y-3\">\n          {habits.length === 0 ? (\n            <div className=\"text-center py-8 text-gray-500\">\n              <p>No habits yet. Add your first habit to get started!</p>\n            </div>\n          ) : (\n            habits.slice(0, 5).map((habit) => {\n              const existingEntry = getHabitEntry(habit.id);\n              return (\n                <div\n                  key={habit.id}\n                  className=\"flex items-center space-x-3 p-3 bg-white rounded-lg border hover:shadow-sm transition-shadow\"\n                >\n                  <div \n                    className=\"w-8 h-8 rounded-lg flex items-center justify-center text-white text-sm flex-shrink-0\"\n                    style={{ backgroundColor: habit.color || \"#1976D2\" }}\n                  >\n                    {habit.icon === \"droplets\" ? \"💧\" : \n                     habit.icon === \"book\" ? \"📚\" : \n                     habit.icon === \"dumbbell\" ? \"🏋️\" :\n                     habit.icon === \"heart\" ? \"❤️\" :\n                     habit.icon === \"footprints\" ? \"👣\" :\n                     habit.icon === \"moon\" ? \"🌙\" : \"📝\"}\n                  </div>\n                  <div className=\"flex-1 min-w-0\">\n                    <p className=\"font-medium text-gray-900 truncate\">\n                      {habit.name}\n                    </p>\n                    <p className=\"text-sm text-gray-600\">\n                      {habit.streakDays} day streak\n                    </p>\n                  </div>\n                  <div className=\"flex-shrink-0\">\n                    <HabitEntryForm \n                      habit={habit}\n                      existingEntry={existingEntry}\n                      date={today}\n                      compact={true}\n                    />\n                  </div>\n                </div>\n              );\n            })\n          )}\n        </div>\n      </div>\n\n      <AdvancedAddHabitDialog \n        open={addDialogOpen} \n        onOpenChange={setAddDialogOpen} \n      />\n    </>\n  );\n}\n","size_bytes":3328},"client/src/components/dashboard/health-metrics.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Plus, Moon, Dumbbell, Smile } from \"lucide-react\";\nimport LogHealthDialog from \"@/components/dialogs/log-health-dialog\";\nimport type { HealthEntry } from \"@shared/schema\";\n\ninterface HealthMetricsProps {\n  healthEntries: HealthEntry[];\n}\n\nexport default function HealthMetrics({ healthEntries }: HealthMetricsProps) {\n  const [logDialogOpen, setLogDialogOpen] = useState(false);\n  const today = new Date().toISOString().split('T')[0];\n  const todayEntry = healthEntries.find(entry => entry.date === today);\n\n  const formatSleepQuality = (entry: HealthEntry | undefined) => {\n    if (!entry || !entry.sleepQuality) return \"No data\";\n    return `${entry.sleepQuality * 10}%`;\n  };\n\n  const formatExercise = (entry: HealthEntry | undefined) => {\n    if (!entry || !entry.exerciseMinutes) return \"No activity\";\n    return `${entry.exerciseMinutes} min ${entry.exerciseType || 'exercise'}`;\n  };\n\n  const formatMood = (entry: HealthEntry | undefined) => {\n    if (!entry || !entry.mood) return \"Not set\";\n    const moodLabels = [\"\", \"Very Bad\", \"Bad\", \"Poor\", \"Below Average\", \"Average\", \"Good\", \"Great\", \"Very Good\", \"Excellent\", \"Outstanding\"];\n    return moodLabels[entry.mood] || \"Good\";\n  };\n\n  return (\n    <>\n      <div className=\"bg-surface p-6 rounded-xl border border-gray-200\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">Health Metrics</h3>\n          <Button\n            variant=\"ghost\"\n            onClick={() => setLogDialogOpen(true)}\n            className=\"text-primary hover:text-blue-700\"\n            data-testid=\"button-log-health\"\n          >\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Log Data\n          </Button>\n        </div>\n\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between p-4 bg-gradient-to-r from-blue-50 to-blue-100 rounded-lg\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-blue-500 rounded-full flex items-center justify-center\">\n                <Moon className=\"h-5 w-5 text-white\" />\n              </div>\n              <div>\n                <p className=\"font-medium text-gray-900\">Sleep</p>\n                <p className=\"text-sm text-gray-600\" data-testid=\"text-sleep-hours\">\n                  {todayEntry?.sleepHours ? `${todayEntry.sleepHours} hours` : \"No data\"}\n                </p>\n              </div>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"text-lg font-semibold text-gray-900\" data-testid=\"text-sleep-quality\">\n                {formatSleepQuality(todayEntry)}\n              </div>\n              <div className=\"text-sm text-gray-600\">Quality</div>\n            </div>\n          </div>\n\n          <div className=\"flex items-center justify-between p-4 bg-gradient-to-r from-green-50 to-green-100 rounded-lg\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-green-500 rounded-full flex items-center justify-center\">\n                <Dumbbell className=\"h-5 w-5 text-white\" />\n              </div>\n              <div>\n                <p className=\"font-medium text-gray-900\">Exercise</p>\n                <p className=\"text-sm text-gray-600\" data-testid=\"text-exercise\">\n                  {formatExercise(todayEntry)}\n                </p>\n              </div>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"text-lg font-semibold text-gray-900\" data-testid=\"text-calories\">\n                {todayEntry?.caloriesBurned || 0}\n              </div>\n              <div className=\"text-sm text-gray-600\">Calories</div>\n            </div>\n          </div>\n\n          <div className=\"flex items-center justify-between p-4 bg-gradient-to-r from-yellow-50 to-yellow-100 rounded-lg\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-yellow-500 rounded-full flex items-center justify-center\">\n                <Smile className=\"h-5 w-5 text-white\" />\n              </div>\n              <div>\n                <p className=\"font-medium text-gray-900\">Mood</p>\n                <p className=\"text-sm text-gray-600\" data-testid=\"text-mood\">\n                  {formatMood(todayEntry)}\n                </p>\n              </div>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"text-lg font-semibold text-gray-900\" data-testid=\"text-mood-score\">\n                {todayEntry?.mood || 0}.0\n              </div>\n              <div className=\"text-sm text-gray-600\">/10</div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <LogHealthDialog \n        open={logDialogOpen} \n        onOpenChange={setLogDialogOpen}\n        existingEntry={todayEntry}\n      />\n    </>\n  );\n}\n","size_bytes":4931},"client/src/components/dashboard/insights-section.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { RefreshCw, Lightbulb, TrendingUp, AlertTriangle, Target } from \"lucide-react\";\nimport type { Habit, Goal, HealthEntry } from \"@shared/schema\";\n\ninterface InsightsSectionProps {\n  habits: Habit[];\n  goals: Goal[];\n  healthEntries: HealthEntry[];\n}\n\nexport default function InsightsSection({ habits, goals, healthEntries }: InsightsSectionProps) {\n  const generateInsights = () => {\n    const insights = [];\n\n    // Productivity insight\n    insights.push({\n      icon: Lightbulb,\n      iconColor: \"text-primary\",\n      bgColor: \"bg-blue-50\",\n      borderColor: \"border-primary\",\n      title: \"Productivity Peak\",\n      message: \"You're most focused between 9-11 AM. Consider scheduling deep work during this time.\"\n    });\n\n    // Habit streak insight\n    const longestStreak = Math.max(...habits.map(h => h.streakDays), 0);\n    if (longestStreak > 0) {\n      insights.push({\n        icon: TrendingUp,\n        iconColor: \"text-secondary\",\n        bgColor: \"bg-green-50\",\n        borderColor: \"border-secondary\",\n        title: \"Habit Streak\",\n        message: `Great job maintaining your habits! Your longest streak is ${longestStreak} days.`\n      });\n    }\n\n    // Sleep pattern insight\n    const recentSleep = healthEntries\n      .filter(entry => entry.sleepHours)\n      .slice(-7);\n    if (recentSleep.length > 0) {\n      const avgSleep = recentSleep.reduce((sum, entry) => sum + (entry.sleepHours || 0), 0) / recentSleep.length;\n      if (avgSleep < 7) {\n        insights.push({\n          icon: AlertTriangle,\n          iconColor: \"text-accent\",\n          bgColor: \"bg-orange-50\",\n          borderColor: \"border-accent\",\n          title: \"Sleep Pattern\",\n          message: `Your average sleep is ${avgSleep.toFixed(1)} hours. Consider aiming for 7-9 hours nightly.`\n        });\n      }\n    }\n\n    // Goal achievement insight\n    const goalsOnTrack = goals.filter(goal => goal.progress >= 50).length;\n    if (goalsOnTrack > 0) {\n      insights.push({\n        icon: Target,\n        iconColor: \"text-purple-500\",\n        bgColor: \"bg-purple-50\",\n        borderColor: \"border-purple-500\",\n        title: \"Goal Achievement\",\n        message: `${goalsOnTrack} of your goals are on track. Keep up the momentum!`\n      });\n    }\n\n    return insights;\n  };\n\n  const insights = generateInsights();\n\n  return (\n    <div className=\"bg-surface p-6 rounded-xl border border-gray-200\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900\">Insights & Recommendations</h3>\n        <Button\n          variant=\"ghost\"\n          className=\"text-primary hover:text-blue-700\"\n          data-testid=\"button-refresh-insights\"\n        >\n          <RefreshCw className=\"h-4 w-4 mr-2\" />\n          Refresh\n        </Button>\n      </div>\n\n      <div className=\"space-y-4\">\n        {insights.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <p className=\"text-gray-500\">Start tracking your habits and goals to get personalized insights!</p>\n          </div>\n        ) : (\n          insights.map((insight, index) => (\n            <div \n              key={index} \n              className={`p-4 ${insight.bgColor} rounded-lg border-l-4 ${insight.borderColor}`}\n              data-testid={`insight-${index}`}\n            >\n              <div className=\"flex items-start space-x-3\">\n                <insight.icon className={`${insight.iconColor} h-5 w-5 mt-1`} />\n                <div>\n                  <h4 className=\"font-medium text-gray-900 mb-1\">{insight.title}</h4>\n                  <p className=\"text-sm text-gray-700\">{insight.message}</p>\n                </div>\n              </div>\n            </div>\n          ))\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":3789},"client/src/components/dashboard/progress-chart.tsx":{"content":"import { useRef, useEffect } from \"react\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\nexport default function ProgressChart() {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Sample data - in a real app this would come from props\n    const data = {\n      labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\n      focusTime: [3.5, 4.2, 2.8, 5.1, 4.8, 3.2, 4.5],\n      habitsCompleted: [75, 85, 60, 90, 80, 70, 78]\n    };\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Set up dimensions\n    const padding = 40;\n    const chartWidth = canvas.width - 2 * padding;\n    const chartHeight = canvas.height - 2 * padding;\n    const maxFocus = Math.max(...data.focusTime);\n    const maxHabits = 100;\n\n    // Draw grid lines\n    ctx.strokeStyle = '#F3F4F6';\n    ctx.lineWidth = 1;\n    for (let i = 0; i <= 4; i++) {\n      const y = padding + (i * chartHeight / 4);\n      ctx.beginPath();\n      ctx.moveTo(padding, y);\n      ctx.lineTo(padding + chartWidth, y);\n      ctx.stroke();\n    }\n\n    // Draw focus time line\n    ctx.strokeStyle = '#1976D2';\n    ctx.fillStyle = 'rgba(25, 118, 210, 0.1)';\n    ctx.lineWidth = 3;\n    \n    const focusPath = new Path2D();\n    const fillPath = new Path2D();\n    \n    data.focusTime.forEach((value, index) => {\n      const x = padding + (index * chartWidth / (data.labels.length - 1));\n      const y = padding + chartHeight - (value / maxFocus * chartHeight);\n      \n      if (index === 0) {\n        focusPath.moveTo(x, y);\n        fillPath.moveTo(x, padding + chartHeight);\n        fillPath.lineTo(x, y);\n      } else {\n        focusPath.lineTo(x, y);\n        fillPath.lineTo(x, y);\n      }\n    });\n    \n    fillPath.lineTo(padding + chartWidth, padding + chartHeight);\n    fillPath.closePath();\n    \n    ctx.fill(fillPath);\n    ctx.stroke(focusPath);\n\n    // Draw habits line\n    ctx.strokeStyle = '#388E3C';\n    ctx.fillStyle = 'rgba(56, 142, 60, 0.1)';\n    \n    const habitsPath = new Path2D();\n    const habitsFillPath = new Path2D();\n    \n    data.habitsCompleted.forEach((value, index) => {\n      const x = padding + (index * chartWidth / (data.labels.length - 1));\n      const y = padding + chartHeight - (value / maxHabits * chartHeight);\n      \n      if (index === 0) {\n        habitsPath.moveTo(x, y);\n        habitsFillPath.moveTo(x, padding + chartHeight);\n        habitsFillPath.lineTo(x, y);\n      } else {\n        habitsPath.lineTo(x, y);\n        habitsFillPath.lineTo(x, y);\n      }\n    });\n    \n    habitsFillPath.lineTo(padding + chartWidth, padding + chartHeight);\n    habitsFillPath.closePath();\n    \n    ctx.fill(habitsFillPath);\n    ctx.stroke(habitsPath);\n\n    // Draw labels\n    ctx.fillStyle = '#6B7280';\n    ctx.font = '12px Inter, sans-serif';\n    ctx.textAlign = 'center';\n    \n    data.labels.forEach((label, index) => {\n      const x = padding + (index * chartWidth / (data.labels.length - 1));\n      ctx.fillText(label, x, canvas.height - 10);\n    });\n\n  }, []);\n\n  return (\n    <div className=\"bg-surface p-6 rounded-xl border border-gray-200\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900\">Weekly Progress</h3>\n        <Select defaultValue=\"this-week\">\n          <SelectTrigger className=\"w-32\" data-testid=\"select-time-range\">\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"this-week\">This Week</SelectItem>\n            <SelectItem value=\"last-week\">Last Week</SelectItem>\n            <SelectItem value=\"this-month\">This Month</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      <div className=\"h-64 relative\">\n        <canvas \n          ref={canvasRef} \n          width={400} \n          height={200} \n          className=\"w-full h-full\"\n          data-testid=\"progress-chart\"\n        />\n        \n        {/* Legend */}\n        <div className=\"absolute bottom-0 left-1/2 transform -translate-x-1/2 flex space-x-6 text-sm\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-3 h-3 bg-primary rounded-full\"></div>\n            <span className=\"text-gray-600\">Focus Time (hours)</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-3 h-3 bg-secondary rounded-full\"></div>\n            <span className=\"text-gray-600\">Habits Completed (%)</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4690},"client/src/components/dashboard/stat-card.tsx":{"content":"import { Clock, CheckSquare, Moon, Target, TrendingUp, TrendingDown } from \"lucide-react\";\n\ninterface StatCardProps {\n  title: string;\n  value: string;\n  change: string;\n  icon: \"clock\" | \"check\" | \"moon\" | \"target\";\n  trend: \"up\" | \"down\" | \"neutral\";\n  \"data-testid\"?: string;\n}\n\nconst iconMap = {\n  clock: Clock,\n  check: CheckSquare,\n  moon: Moon,\n  target: Target,\n};\n\nconst iconColorMap = {\n  clock: \"text-primary\",\n  check: \"text-secondary\",\n  moon: \"text-purple-600\",\n  target: \"text-accent\",\n};\n\nconst iconBgMap = {\n  clock: \"bg-blue-100\",\n  check: \"bg-green-100\",\n  moon: \"bg-purple-100\",\n  target: \"bg-orange-100\",\n};\n\nexport default function StatCard({ title, value, change, icon, trend, ...props }: StatCardProps) {\n  const IconComponent = iconMap[icon];\n  const iconColor = iconColorMap[icon];\n  const iconBg = iconBgMap[icon];\n\n  return (\n    <div className=\"bg-surface p-6 rounded-xl border border-gray-200\" {...props}>\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <p className=\"text-gray-600 text-sm font-medium\">{title}</p>\n          <p className=\"text-2xl font-semibold text-gray-900 mt-1\" data-testid=\"stat-value\">\n            {value}\n          </p>\n          <p className=\"text-secondary text-sm mt-1 flex items-center\">\n            {trend === \"up\" && <TrendingUp className=\"h-3 w-3 mr-1\" />}\n            {trend === \"down\" && <TrendingDown className=\"h-3 w-3 mr-1\" />}\n            <span data-testid=\"stat-change\">{change}</span>\n          </p>\n        </div>\n        <div className={`w-12 h-12 ${iconBg} rounded-lg flex items-center justify-center`}>\n          <IconComponent className={`${iconColor} text-xl h-6 w-6`} />\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1726},"client/src/components/dashboard/timer-section.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Play, Pause, Square } from \"lucide-react\";\nimport { useTimer } from \"@/hooks/use-timer\";\nimport type { TimerSession } from \"@shared/schema\";\n\ninterface TimerSectionProps {\n  sessions: TimerSession[];\n}\n\nexport default function TimerSection({ sessions }: TimerSectionProps) {\n  const [timerType, setTimerType] = useState<\"pomodoro\" | \"break\" | \"long-break\">(\"pomodoro\");\n  const { time, isRunning, start, pause, reset } = useTimer({\n    duration: timerType === \"pomodoro\" ? 25 : timerType === \"break\" ? 5 : 15,\n    onComplete: () => {\n      // Timer completed logic will be handled here\n    }\n  });\n\n  const completedSessions = sessions.filter(s => s.completed).length;\n  const totalMinutes = sessions\n    .filter(s => s.completed)\n    .reduce((sum, s) => sum + s.duration, 0);\n\n  const formatTime = (minutes: number) => {\n    const mins = Math.floor(minutes);\n    const secs = Math.floor((minutes - mins) * 60);\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const formatTotalTime = (minutes: number) => {\n    const hours = Math.floor(minutes / 60);\n    const mins = minutes % 60;\n    return `${hours}h ${mins}m`;\n  };\n\n  const progress = timerType === \"pomodoro\" ? (25 - time) / 25 : \n                  timerType === \"break\" ? (5 - time) / 5 : (15 - time) / 15;\n  const circumference = 2 * Math.PI * 66;\n  const strokeDashoffset = circumference - (progress * circumference);\n\n  return (\n    <div className=\"bg-surface p-6 rounded-xl border border-gray-200\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900\">Focus Timer</h3>\n        <div className=\"flex items-center space-x-2\">\n          <span className=\"bg-blue-100 text-primary text-sm px-2 py-1 rounded-full\">\n            {timerType === \"pomodoro\" ? \"Pomodoro\" : timerType === \"break\" ? \"Break\" : \"Long Break\"}\n          </span>\n        </div>\n      </div>\n\n      <div className=\"text-center mb-6\">\n        <div className=\"relative w-40 h-40 mx-auto mb-4\">\n          <svg className=\"w-40 h-40 transform -rotate-90\" viewBox=\"0 0 144 144\">\n            <circle \n              cx=\"72\" \n              cy=\"72\" \n              r=\"66\" \n              stroke=\"#E5E7EB\" \n              strokeWidth=\"8\" \n              fill=\"none\"\n            />\n            <circle \n              cx=\"72\" \n              cy=\"72\" \n              r=\"66\" \n              stroke=\"#1976D2\" \n              strokeWidth=\"8\" \n              fill=\"none\"\n              strokeDasharray={circumference}\n              strokeDashoffset={strokeDashoffset}\n              strokeLinecap=\"round\"\n              className=\"transition-all duration-1000\"\n            />\n          </svg>\n          <div className=\"absolute inset-0 flex items-center justify-center\">\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-gray-900\" data-testid=\"timer-display\">\n                {formatTime(time)}\n              </div>\n              <div className=\"text-sm text-gray-600\">\n                {timerType === \"pomodoro\" ? \"Focus Session\" : \"Break Time\"}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex justify-center space-x-3\">\n          <Button\n            onClick={isRunning ? pause : start}\n            className=\"bg-primary text-white hover:bg-blue-700\"\n            data-testid=\"button-timer-toggle\"\n          >\n            {isRunning ? (\n              <>\n                <Pause className=\"h-4 w-4 mr-2\" />\n                Pause\n              </>\n            ) : (\n              <>\n                <Play className=\"h-4 w-4 mr-2\" />\n                Start\n              </>\n            )}\n          </Button>\n          <Button\n            variant=\"outline\"\n            onClick={reset}\n            data-testid=\"button-timer-reset\"\n          >\n            <Square className=\"h-4 w-4 mr-2\" />\n            Reset\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"space-y-3\">\n        <div className=\"flex justify-between text-sm\">\n          <span className=\"text-gray-600\">Sessions Today</span>\n          <span className=\"font-medium text-gray-900\" data-testid=\"text-sessions-today\">\n            {completedSessions}\n          </span>\n        </div>\n        <div className=\"flex justify-between text-sm\">\n          <span className=\"text-gray-600\">Total Focus Time</span>\n          <span className=\"font-medium text-gray-900\" data-testid=\"text-total-time\">\n            {formatTotalTime(totalMinutes)}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4675},"client/src/components/dialogs/add-goal-dialog.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface AddGoalDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport default function AddGoalDialog({ open, onOpenChange }: AddGoalDialogProps) {\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [deadline, setDeadline] = useState(\"\");\n  const [category, setCategory] = useState(\"personal\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const createGoalMutation = useMutation({\n    mutationFn: async (data: { \n      title: string; \n      description?: string; \n      deadline?: string; \n      category: string;\n    }) => {\n      return apiRequest(\"POST\", \"/api/goals\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/goals'] });\n      toast({\n        title: \"Goal created\",\n        description: \"Your new goal has been added successfully.\",\n      });\n      resetForm();\n      onOpenChange(false);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create goal. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setTitle(\"\");\n    setDescription(\"\");\n    setDeadline(\"\");\n    setCategory(\"personal\");\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!title.trim()) return;\n\n    createGoalMutation.mutate({\n      title: title.trim(),\n      description: description.trim() || undefined,\n      deadline: deadline || undefined,\n      category,\n    });\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Add New Goal</DialogTitle>\n          <DialogDescription>\n            Set a new goal with a deadline and track your progress over time.\n          </DialogDescription>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"goal-title\">Goal Title *</Label>\n            <Input\n              id=\"goal-title\"\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n              placeholder=\"e.g., Learn React\"\n              required\n              data-testid=\"input-goal-title\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"goal-description\">Description</Label>\n            <Textarea\n              id=\"goal-description\"\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n              placeholder=\"Describe your goal...\"\n              data-testid=\"textarea-goal-description\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"goal-deadline\">Deadline</Label>\n            <Input\n              id=\"goal-deadline\"\n              type=\"date\"\n              value={deadline}\n              onChange={(e) => setDeadline(e.target.value)}\n              data-testid=\"input-goal-deadline\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"goal-category\">Category</Label>\n            <Select value={category} onValueChange={setCategory}>\n              <SelectTrigger data-testid=\"select-goal-category\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"personal\">Personal</SelectItem>\n                <SelectItem value=\"professional\">Professional</SelectItem>\n                <SelectItem value=\"health\">Health</SelectItem>\n                <SelectItem value=\"financial\">Financial</SelectItem>\n                <SelectItem value=\"education\">Education</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"flex justify-end space-x-3\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => onOpenChange(false)}\n              data-testid=\"button-cancel-goal\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={!title.trim() || createGoalMutation.isPending}\n              data-testid=\"button-save-goal\"\n            >\n              {createGoalMutation.isPending ? \"Creating...\" : \"Create Goal\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":4992},"client/src/components/dialogs/add-habit-dialog.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface AddHabitDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport default function AddHabitDialog({ open, onOpenChange }: AddHabitDialogProps) {\n  const [name, setName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [targetMinutes, setTargetMinutes] = useState(0);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const createHabitMutation = useMutation({\n    mutationFn: async (data: { name: string; description?: string; targetMinutes?: number }) => {\n      return apiRequest(\"POST\", \"/api/habits\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/habits'] });\n      toast({\n        title: \"Habit created\",\n        description: \"Your new habit has been added successfully.\",\n      });\n      resetForm();\n      onOpenChange(false);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create habit. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setName(\"\");\n    setDescription(\"\");\n    setTargetMinutes(0);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!name.trim()) return;\n\n    createHabitMutation.mutate({\n      name: name.trim(),\n      description: description.trim() || undefined,\n      targetMinutes: targetMinutes > 0 ? targetMinutes : undefined,\n    });\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Add New Habit</DialogTitle>\n          <DialogDescription>\n            Create a new habit to track your daily progress and build consistency.\n          </DialogDescription>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"habit-name\">Habit Name *</Label>\n            <Input\n              id=\"habit-name\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              placeholder=\"e.g., Morning meditation\"\n              required\n              data-testid=\"input-habit-name\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"habit-description\">Description</Label>\n            <Textarea\n              id=\"habit-description\"\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n              placeholder=\"Optional description...\"\n              data-testid=\"textarea-habit-description\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"target-minutes\">Target Duration (minutes)</Label>\n            <Input\n              id=\"target-minutes\"\n              type=\"number\"\n              value={targetMinutes}\n              onChange={(e) => setTargetMinutes(parseInt(e.target.value) || 0)}\n              placeholder=\"0\"\n              min=\"0\"\n              data-testid=\"input-target-minutes\"\n            />\n            <p className=\"text-sm text-gray-500 mt-1\">\n              Leave as 0 for habits without time tracking\n            </p>\n          </div>\n\n          <div className=\"flex justify-end space-x-3\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => onOpenChange(false)}\n              data-testid=\"button-cancel-habit\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={!name.trim() || createHabitMutation.isPending}\n              data-testid=\"button-save-habit\"\n            >\n              {createHabitMutation.isPending ? \"Creating...\" : \"Create Habit\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":4321},"client/src/components/dialogs/advanced-add-habit-dialog.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Droplets, \n  Book, \n  Dumbbell, \n  Clock, \n  Heart, \n  Coffee, \n  Moon, \n  Target, \n  Footprints, \n  Smartphone,\n  Utensils,\n  Bike,\n  Camera,\n  Music,\n  Palette\n} from \"lucide-react\";\n\ninterface AdvancedAddHabitDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\n// Predefined habit templates with icons and default settings\nconst HABIT_TEMPLATES = [\n  {\n    id: \"water\",\n    name: \"Drink Water\",\n    icon: \"droplets\",\n    trackingType: \"numeric\" as const,\n    unit: \"glasses\",\n    targetValue: 8,\n    frequency: \"daily\" as const,\n    color: \"#2196F3\",\n    description: \"Stay hydrated throughout the day\"\n  },\n  {\n    id: \"reading\",\n    name: \"Reading\",\n    icon: \"book\",\n    trackingType: \"duration\" as const,\n    unit: \"minutes\",\n    targetValue: 30,\n    frequency: \"daily\" as const,\n    color: \"#FF9800\",\n    description: \"Read books or articles\"\n  },\n  {\n    id: \"exercise\",\n    name: \"Exercise\",\n    icon: \"dumbbell\",\n    trackingType: \"duration\" as const,\n    unit: \"minutes\",\n    targetValue: 30,\n    frequency: \"daily\" as const,\n    color: \"#4CAF50\",\n    description: \"Physical activity and fitness\"\n  },\n  {\n    id: \"meditation\",\n    name: \"Meditation\",\n    icon: \"heart\",\n    trackingType: \"duration\" as const,\n    unit: \"minutes\",\n    targetValue: 10,\n    frequency: \"daily\" as const,\n    color: \"#9C27B0\",\n    description: \"Mindfulness and mental wellness\"\n  },\n  {\n    id: \"steps\",\n    name: \"Walking\",\n    icon: \"footprints\",\n    trackingType: \"numeric\" as const,\n    unit: \"steps\",\n    targetValue: 10000,\n    frequency: \"daily\" as const,\n    color: \"#607D8B\",\n    description: \"Daily step count goal\"\n  },\n  {\n    id: \"sleep\",\n    name: \"Sleep Schedule\",\n    icon: \"moon\",\n    trackingType: \"boolean\" as const,\n    unit: \"\",\n    targetValue: null,\n    frequency: \"daily\" as const,\n    color: \"#3F51B5\",\n    description: \"Maintain consistent sleep schedule\"\n  }\n];\n\nconst ICONS = [\n  { id: \"droplets\", component: Droplets, label: \"Water\" },\n  { id: \"book\", component: Book, label: \"Reading\" },\n  { id: \"dumbbell\", component: Dumbbell, label: \"Exercise\" },\n  { id: \"clock\", component: Clock, label: \"Time\" },\n  { id: \"heart\", component: Heart, label: \"Health\" },\n  { id: \"coffee\", component: Coffee, label: \"Habits\" },\n  { id: \"moon\", component: Moon, label: \"Sleep\" },\n  { id: \"target\", component: Target, label: \"Goals\" },\n  { id: \"footprints\", component: Footprints, label: \"Steps\" },\n  { id: \"smartphone\", component: Smartphone, label: \"Technology\" },\n  { id: \"utensils\", component: Utensils, label: \"Food\" },\n  { id: \"bike\", component: Bike, label: \"Transport\" },\n  { id: \"camera\", component: Camera, label: \"Creative\" },\n  { id: \"music\", component: Music, label: \"Music\" }\n];\n\nconst COLORS = [\n  \"#1976D2\", \"#2196F3\", \"#03A9F4\", \"#00BCD4\",\n  \"#009688\", \"#4CAF50\", \"#8BC34A\", \"#CDDC39\",\n  \"#FFEB3B\", \"#FFC107\", \"#FF9800\", \"#FF5722\",\n  \"#F44336\", \"#E91E63\", \"#9C27B0\", \"#673AB7\",\n  \"#3F51B5\", \"#607D8B\", \"#795548\", \"#9E9E9E\"\n];\n\nconst UNITS = [\n  { value: \"glasses\", label: \"Glasses\" },\n  { value: \"cups\", label: \"Cups\" },\n  { value: \"pages\", label: \"Pages\" },\n  { value: \"minutes\", label: \"Minutes\" },\n  { value: \"hours\", label: \"Hours\" },\n  { value: \"miles\", label: \"Miles\" },\n  { value: \"kilometers\", label: \"Kilometers\" },\n  { value: \"steps\", label: \"Steps\" },\n  { value: \"reps\", label: \"Reps\" },\n  { value: \"sets\", label: \"Sets\" },\n  { value: \"sessions\", label: \"Sessions\" },\n  { value: \"items\", label: \"Items\" },\n  { value: \"times\", label: \"Times\" },\n  { value: \"servings\", label: \"Servings\" }\n];\n\nconst WEEKDAYS = [\n  { id: \"monday\", label: \"Mon\" },\n  { id: \"tuesday\", label: \"Tue\" },\n  { id: \"wednesday\", label: \"Wed\" },\n  { id: \"thursday\", label: \"Thu\" },\n  { id: \"friday\", label: \"Fri\" },\n  { id: \"saturday\", label: \"Sat\" },\n  { id: \"sunday\", label: \"Sun\" }\n];\n\nexport default function AdvancedAddHabitDialog({ open, onOpenChange }: AdvancedAddHabitDialogProps) {\n  const [activeTab, setActiveTab] = useState(\"template\");\n  const [name, setName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [trackingType, setTrackingType] = useState<\"boolean\" | \"numeric\" | \"duration\" | \"custom\">(\"boolean\");\n  const [unit, setUnit] = useState(\"\");\n  const [customUnit, setCustomUnit] = useState(\"\");\n  const [targetValue, setTargetValue] = useState<number | null>(null);\n  const [frequency, setFrequency] = useState<\"daily\" | \"weekly\" | \"custom\">(\"daily\");\n  const [selectedDays, setSelectedDays] = useState<string[]>([]);\n  const [selectedIcon, setSelectedIcon] = useState(\"target\");\n  const [selectedColor, setSelectedColor] = useState(\"#1976D2\");\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const createHabitMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest(\"POST\", \"/api/habits\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/habits'] });\n      toast({\n        title: \"Habit created\",\n        description: \"Your new habit has been added successfully.\",\n      });\n      resetForm();\n      onOpenChange(false);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create habit. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setActiveTab(\"template\");\n    setName(\"\");\n    setDescription(\"\");\n    setTrackingType(\"boolean\");\n    setUnit(\"\");\n    setCustomUnit(\"\");\n    setTargetValue(null);\n    setFrequency(\"daily\");\n    setSelectedDays([]);\n    setSelectedIcon(\"target\");\n    setSelectedColor(\"#1976D2\");\n  };\n\n  const applyTemplate = (template: typeof HABIT_TEMPLATES[0]) => {\n    setName(template.name);\n    setDescription(template.description);\n    setTrackingType(template.trackingType);\n    setUnit(template.unit);\n    setTargetValue(template.targetValue);\n    setFrequency(template.frequency);\n    setSelectedIcon(template.icon);\n    setSelectedColor(template.color);\n    setActiveTab(\"customize\");\n  };\n\n  const toggleDay = (dayId: string) => {\n    setSelectedDays(prev => \n      prev.includes(dayId) \n        ? prev.filter(d => d !== dayId)\n        : [...prev, dayId]\n    );\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!name.trim()) return;\n\n    const finalUnit = unit === \"custom\" ? customUnit : unit;\n    const frequencyDays = frequency === \"weekly\" || frequency === \"custom\" ? selectedDays : null;\n\n    createHabitMutation.mutate({\n      name: name.trim(),\n      description: description.trim() || null,\n      trackingType,\n      unit: trackingType !== \"boolean\" ? finalUnit : null,\n      targetValue: trackingType !== \"boolean\" ? targetValue : null,\n      frequency,\n      frequencyDays,\n      icon: selectedIcon,\n      color: selectedColor\n    });\n  };\n\n  const SelectedIcon = ICONS.find(icon => icon.id === selectedIcon)?.component || Target;\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <SelectedIcon className=\"h-5 w-5\" style={{ color: selectedColor }} />\n            <span>Create New Habit</span>\n          </DialogTitle>\n          <DialogDescription>\n            Build a custom habit with flexible tracking options and personalized settings.\n          </DialogDescription>\n        </DialogHeader>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"template\" data-testid=\"tab-template\">Quick Start</TabsTrigger>\n            <TabsTrigger value=\"customize\" data-testid=\"tab-customize\">Customize</TabsTrigger>\n            <TabsTrigger value=\"advanced\" data-testid=\"tab-advanced\">Advanced</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"template\" className=\"space-y-6\">\n            <div>\n              <h3 className=\"text-lg font-semibold mb-4\">Choose a Template</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {HABIT_TEMPLATES.map((template) => {\n                  const IconComponent = ICONS.find(icon => icon.id === template.icon)?.component || Target;\n                  return (\n                    <Card \n                      key={template.id} \n                      className=\"cursor-pointer hover:shadow-md transition-shadow\"\n                      onClick={() => applyTemplate(template)}\n                      data-testid={`template-${template.id}`}\n                    >\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-start space-x-3\">\n                          <div \n                            className=\"w-10 h-10 rounded-lg flex items-center justify-center text-white\"\n                            style={{ backgroundColor: template.color }}\n                          >\n                            <IconComponent className=\"h-5 w-5\" />\n                          </div>\n                          <div className=\"flex-1\">\n                            <h4 className=\"font-semibold\">{template.name}</h4>\n                            <p className=\"text-sm text-gray-600 mb-2\">{template.description}</p>\n                            <div className=\"flex flex-wrap gap-1\">\n                              <Badge variant=\"secondary\" className=\"text-xs\">\n                                {template.trackingType}\n                              </Badge>\n                              {template.targetValue && (\n                                <Badge variant=\"outline\" className=\"text-xs\">\n                                  {template.targetValue} {template.unit}\n                                </Badge>\n                              )}\n                              <Badge variant=\"outline\" className=\"text-xs\">\n                                {template.frequency}\n                              </Badge>\n                            </div>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  );\n                })}\n              </div>\n            </div>\n\n            <div className=\"text-center\">\n              <Button \n                variant=\"outline\" \n                onClick={() => setActiveTab(\"customize\")}\n                data-testid=\"button-custom-habit\"\n              >\n                <Palette className=\"h-4 w-4 mr-2\" />\n                Create Custom Habit\n              </Button>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"customize\" className=\"space-y-6\">\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              {/* Basic Information */}\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"habit-name\">Habit Name *</Label>\n                  <Input\n                    id=\"habit-name\"\n                    value={name}\n                    onChange={(e) => setName(e.target.value)}\n                    placeholder=\"e.g., Morning meditation\"\n                    required\n                    data-testid=\"input-habit-name\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"habit-description\">Description</Label>\n                  <Textarea\n                    id=\"habit-description\"\n                    value={description}\n                    onChange={(e) => setDescription(e.target.value)}\n                    placeholder=\"Optional description...\"\n                    rows={2}\n                    data-testid=\"textarea-habit-description\"\n                  />\n                </div>\n              </div>\n\n              <Separator />\n\n              {/* Tracking Type */}\n              <div className=\"space-y-4\">\n                <div>\n                  <Label>Tracking Type</Label>\n                  <Select value={trackingType} onValueChange={(value: any) => setTrackingType(value)}>\n                    <SelectTrigger data-testid=\"select-tracking-type\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"boolean\">Simple (Done/Not Done)</SelectItem>\n                      <SelectItem value=\"numeric\">Numeric (Count or Amount)</SelectItem>\n                      <SelectItem value=\"duration\">Duration (Time-based)</SelectItem>\n                      <SelectItem value=\"custom\">Custom Tracking</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {trackingType !== \"boolean\" && (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label>Unit of Measurement</Label>\n                      <Select value={unit} onValueChange={setUnit}>\n                        <SelectTrigger data-testid=\"select-unit\">\n                          <SelectValue placeholder=\"Choose unit...\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {UNITS.map((u) => (\n                            <SelectItem key={u.value} value={u.value}>\n                              {u.label}\n                            </SelectItem>\n                          ))}\n                          <SelectItem value=\"custom\">Custom Unit</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    {unit === \"custom\" && (\n                      <div>\n                        <Label>Custom Unit</Label>\n                        <Input\n                          value={customUnit}\n                          onChange={(e) => setCustomUnit(e.target.value)}\n                          placeholder=\"e.g., chapters, workouts...\"\n                          data-testid=\"input-custom-unit\"\n                        />\n                      </div>\n                    )}\n\n                    <div>\n                      <Label>Target Value</Label>\n                      <Input\n                        type=\"number\"\n                        value={targetValue || \"\"}\n                        onChange={(e) => setTargetValue(parseFloat(e.target.value) || null)}\n                        placeholder=\"e.g., 8, 30, 10000\"\n                        min=\"0\"\n                        step=\"0.1\"\n                        data-testid=\"input-target-value\"\n                      />\n                    </div>\n                  </div>\n                )}\n              </div>\n\n              <Separator />\n\n              {/* Frequency */}\n              <div className=\"space-y-4\">\n                <div>\n                  <Label>Frequency</Label>\n                  <Select value={frequency} onValueChange={(value: any) => setFrequency(value)}>\n                    <SelectTrigger data-testid=\"select-frequency\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"daily\">Daily</SelectItem>\n                      <SelectItem value=\"weekly\">Weekly (Select Days)</SelectItem>\n                      <SelectItem value=\"custom\">Custom Schedule</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {(frequency === \"weekly\" || frequency === \"custom\") && (\n                  <div>\n                    <Label>Select Days</Label>\n                    <div className=\"flex flex-wrap gap-2 mt-2\">\n                      {WEEKDAYS.map((day) => (\n                        <Button\n                          key={day.id}\n                          type=\"button\"\n                          variant={selectedDays.includes(day.id) ? \"default\" : \"outline\"}\n                          size=\"sm\"\n                          onClick={() => toggleDay(day.id)}\n                          data-testid={`day-${day.id}`}\n                        >\n                          {day.label}\n                        </Button>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n\n              <Separator />\n\n              {/* Visual Customization */}\n              <div className=\"space-y-4\">\n                <div>\n                  <Label>Icon</Label>\n                  <div className=\"grid grid-cols-8 gap-2 mt-2\">\n                    {ICONS.map((icon) => {\n                      const IconComponent = icon.component;\n                      return (\n                        <Button\n                          key={icon.id}\n                          type=\"button\"\n                          variant={selectedIcon === icon.id ? \"default\" : \"outline\"}\n                          size=\"sm\"\n                          className=\"aspect-square p-0\"\n                          onClick={() => setSelectedIcon(icon.id)}\n                          data-testid={`icon-${icon.id}`}\n                        >\n                          <IconComponent className=\"h-4 w-4\" />\n                        </Button>\n                      );\n                    })}\n                  </div>\n                </div>\n\n                <div>\n                  <Label>Color</Label>\n                  <div className=\"grid grid-cols-10 gap-2 mt-2\">\n                    {COLORS.map((color) => (\n                      <Button\n                        key={color}\n                        type=\"button\"\n                        className=\"aspect-square p-0 border-2\"\n                        style={{ \n                          backgroundColor: color,\n                          borderColor: selectedColor === color ? \"#000\" : \"transparent\"\n                        }}\n                        onClick={() => setSelectedColor(color)}\n                        data-testid={`color-${color}`}\n                      />\n                    ))}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex justify-end space-x-3 pt-6\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => onOpenChange(false)}\n                  data-testid=\"button-cancel\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={!name.trim() || createHabitMutation.isPending}\n                  data-testid=\"button-create-habit\"\n                >\n                  {createHabitMutation.isPending ? \"Creating...\" : \"Create Habit\"}\n                </Button>\n              </div>\n            </form>\n          </TabsContent>\n\n          <TabsContent value=\"advanced\" className=\"space-y-6\">\n            <div className=\"text-center py-12\">\n              <div className=\"max-w-2xl mx-auto\">\n                <h3 className=\"text-lg font-semibold mb-4\">Advanced Features</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 text-left\">\n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <h4 className=\"font-semibold mb-2\">✨ Flexible Tracking</h4>\n                      <p className=\"text-sm text-gray-600\">\n                        Track anything with custom units: glasses of water, pages read, \n                        miles run, meditation minutes, or create your own measurement.\n                      </p>\n                    </CardContent>\n                  </Card>\n                  \n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <h4 className=\"font-semibold mb-2\">📅 Custom Schedules</h4>\n                      <p className=\"text-sm text-gray-600\">\n                        Set daily, weekly, or completely custom schedules. Perfect for \n                        habits that don't happen every day.\n                      </p>\n                    </CardContent>\n                  </Card>\n                  \n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <h4 className=\"font-semibold mb-2\">🎯 Goal Setting</h4>\n                      <p className=\"text-sm text-gray-600\">\n                        Set specific targets for numeric habits. Track progress toward \n                        daily, weekly, or custom goals.\n                      </p>\n                    </CardContent>\n                  </Card>\n                  \n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <h4 className=\"font-semibold mb-2\">🎨 Visual Customization</h4>\n                      <p className=\"text-sm text-gray-600\">\n                        Personalize with icons and colors. Make your habits visually \n                        distinct and motivating.\n                      </p>\n                    </CardContent>\n                  </Card>\n                </div>\n                \n                <div className=\"mt-8\">\n                  <Button \n                    onClick={() => setActiveTab(\"customize\")}\n                    data-testid=\"button-start-customizing\"\n                  >\n                    Start Customizing\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":22194},"client/src/components/dialogs/log-health-dialog.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { HealthEntry } from \"@shared/schema\";\n\ninterface LogHealthDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  existingEntry?: HealthEntry;\n}\n\nexport default function LogHealthDialog({ open, onOpenChange, existingEntry }: LogHealthDialogProps) {\n  const [sleepHours, setSleepHours] = useState(7);\n  const [sleepQuality, setSleepQuality] = useState([8]);\n  const [exerciseMinutes, setExerciseMinutes] = useState(0);\n  const [exerciseType, setExerciseType] = useState(\"\");\n  const [caloriesBurned, setCaloriesBurned] = useState(0);\n  const [mood, setMood] = useState([7]);\n  const [notes, setNotes] = useState(\"\");\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const today = new Date().toISOString().split('T')[0];\n\n  // Load existing entry data\n  useEffect(() => {\n    if (existingEntry) {\n      setSleepHours(existingEntry.sleepHours || 7);\n      setSleepQuality([existingEntry.sleepQuality || 8]);\n      setExerciseMinutes(existingEntry.exerciseMinutes || 0);\n      setExerciseType(existingEntry.exerciseType || \"\");\n      setCaloriesBurned(existingEntry.caloriesBurned || 0);\n      setMood([existingEntry.mood || 7]);\n      setNotes(existingEntry.notes || \"\");\n    }\n  }, [existingEntry]);\n\n  const saveHealthMutation = useMutation({\n    mutationFn: async (data: any) => {\n      if (existingEntry) {\n        return apiRequest(\"PUT\", `/api/health-entries/${existingEntry.id}`, data);\n      } else {\n        return apiRequest(\"POST\", \"/api/health-entries\", { ...data, date: today });\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/health-entries'] });\n      toast({\n        title: \"Health data saved\",\n        description: \"Your health metrics have been updated.\",\n      });\n      onOpenChange(false);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save health data. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    saveHealthMutation.mutate({\n      sleepHours: sleepHours > 0 ? sleepHours : undefined,\n      sleepQuality: sleepQuality[0],\n      exerciseMinutes: exerciseMinutes > 0 ? exerciseMinutes : undefined,\n      exerciseType: exerciseType.trim() || undefined,\n      caloriesBurned: caloriesBurned > 0 ? caloriesBurned : undefined,\n      mood: mood[0],\n      notes: notes.trim() || undefined,\n    });\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-md max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Log Health Data</DialogTitle>\n          <DialogDescription>\n            Record your daily health metrics including sleep, exercise, and mood.\n          </DialogDescription>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"sleep-hours\">Sleep Hours</Label>\n            <Input\n              id=\"sleep-hours\"\n              type=\"number\"\n              step=\"0.5\"\n              value={sleepHours}\n              onChange={(e) => setSleepHours(parseFloat(e.target.value) || 0)}\n              placeholder=\"7.5\"\n              min=\"0\"\n              max=\"24\"\n              data-testid=\"input-sleep-hours\"\n            />\n          </div>\n\n          <div>\n            <Label>Sleep Quality: {sleepQuality[0]}/10</Label>\n            <Slider\n              value={sleepQuality}\n              onValueChange={setSleepQuality}\n              max={10}\n              min={1}\n              step={1}\n              className=\"mt-2\"\n              data-testid=\"slider-sleep-quality\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"exercise-minutes\">Exercise Duration (minutes)</Label>\n            <Input\n              id=\"exercise-minutes\"\n              type=\"number\"\n              value={exerciseMinutes}\n              onChange={(e) => setExerciseMinutes(parseInt(e.target.value) || 0)}\n              placeholder=\"30\"\n              min=\"0\"\n              data-testid=\"input-exercise-minutes\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"exercise-type\">Exercise Type</Label>\n            <Select value={exerciseType} onValueChange={setExerciseType}>\n              <SelectTrigger data-testid=\"select-exercise-type\">\n                <SelectValue placeholder=\"Select exercise type\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"\">None</SelectItem>\n                <SelectItem value=\"cardio\">Cardio</SelectItem>\n                <SelectItem value=\"strength\">Strength Training</SelectItem>\n                <SelectItem value=\"yoga\">Yoga</SelectItem>\n                <SelectItem value=\"running\">Running</SelectItem>\n                <SelectItem value=\"swimming\">Swimming</SelectItem>\n                <SelectItem value=\"cycling\">Cycling</SelectItem>\n                <SelectItem value=\"walking\">Walking</SelectItem>\n                <SelectItem value=\"other\">Other</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div>\n            <Label htmlFor=\"calories-burned\">Calories Burned</Label>\n            <Input\n              id=\"calories-burned\"\n              type=\"number\"\n              value={caloriesBurned}\n              onChange={(e) => setCaloriesBurned(parseInt(e.target.value) || 0)}\n              placeholder=\"250\"\n              min=\"0\"\n              data-testid=\"input-calories-burned\"\n            />\n          </div>\n\n          <div>\n            <Label>Mood: {mood[0]}/10</Label>\n            <Slider\n              value={mood}\n              onValueChange={setMood}\n              max={10}\n              min={1}\n              step={1}\n              className=\"mt-2\"\n              data-testid=\"slider-mood\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"health-notes\">Notes</Label>\n            <Textarea\n              id=\"health-notes\"\n              value={notes}\n              onChange={(e) => setNotes(e.target.value)}\n              placeholder=\"How are you feeling today?\"\n              data-testid=\"textarea-health-notes\"\n            />\n          </div>\n\n          <div className=\"flex justify-end space-x-3\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => onOpenChange(false)}\n              data-testid=\"button-cancel-health\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={saveHealthMutation.isPending}\n              data-testid=\"button-save-health\"\n            >\n              {saveHealthMutation.isPending ? \"Saving...\" : \"Save\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":7557},"client/src/components/habits/habit-entry-form.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Check, Plus, Minus, Target, Clock } from \"lucide-react\";\nimport type { Habit, HabitEntry } from \"@shared/schema\";\n\ninterface HabitEntryFormProps {\n  habit: Habit;\n  existingEntry?: HabitEntry;\n  date: string;\n  onComplete?: () => void;\n  compact?: boolean;\n}\n\nexport default function HabitEntryForm({ \n  habit, \n  existingEntry, \n  date, \n  onComplete,\n  compact = false \n}: HabitEntryFormProps) {\n  const [showDialog, setShowDialog] = useState(false);\n  const [value, setValue] = useState(existingEntry?.value || 0);\n  const [notes, setNotes] = useState(existingEntry?.notes || \"\");\n  const [completed, setCompleted] = useState(existingEntry?.completed || false);\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const updateEntryMutation = useMutation({\n    mutationFn: async (data: any) => {\n      if (existingEntry) {\n        return apiRequest(\"PUT\", `/api/habit-entries/${existingEntry.id}`, data);\n      } else {\n        return apiRequest(\"POST\", \"/api/habit-entries\", {\n          habitId: habit.id,\n          date,\n          ...data\n        });\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/habit-entries'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/habits'] });\n      toast({\n        title: \"Progress updated\",\n        description: \"Your habit progress has been saved.\",\n      });\n      setShowDialog(false);\n      onComplete?.();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update progress. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleQuickUpdate = (newValue: number, isCompleted?: boolean) => {\n    const finalCompleted = isCompleted ?? (habit.targetValue ? newValue >= habit.targetValue : newValue > 0);\n    updateEntryMutation.mutate({\n      value: newValue,\n      completed: finalCompleted,\n      notes\n    });\n    setValue(newValue);\n    setCompleted(finalCompleted);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    const finalCompleted = habit.trackingType === \"boolean\" \n      ? completed \n      : (habit.targetValue ? value >= habit.targetValue : value > 0);\n\n    updateEntryMutation.mutate({\n      value: habit.trackingType === \"boolean\" ? (completed ? 1 : 0) : value,\n      completed: finalCompleted,\n      notes: notes.trim() || null\n    });\n  };\n\n  const getProgressPercentage = () => {\n    if (habit.trackingType === \"boolean\") {\n      return completed ? 100 : 0;\n    }\n    if (habit.targetValue && habit.targetValue > 0) {\n      return Math.min((value / habit.targetValue) * 100, 100);\n    }\n    return value > 0 ? 100 : 0;\n  };\n\n  const formatValue = (val: number) => {\n    if (habit.trackingType === \"duration\") {\n      const hours = Math.floor(val / 60);\n      const mins = val % 60;\n      return hours > 0 ? `${hours}h ${mins}m` : `${mins}m`;\n    }\n    return val.toString();\n  };\n\n  // For compact display (dashboard)\n  if (compact) {\n    if (habit.trackingType === \"boolean\") {\n      return (\n        <button\n          onClick={() => handleQuickUpdate(completed ? 0 : 1, !completed)}\n          disabled={updateEntryMutation.isPending}\n          className={`w-6 h-6 rounded-full flex items-center justify-center transition-all ${\n            completed\n              ? \"bg-secondary text-white\"\n              : \"border-2 border-gray-300 hover:border-secondary\"\n          }`}\n          data-testid={`button-toggle-habit-${habit.id}`}\n        >\n          {completed && <Check className=\"h-3 w-3\" />}\n        </button>\n      );\n    }\n\n    return (\n      <div className=\"space-y-2\">\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => value > 0 && handleQuickUpdate(value - 1)}\n            disabled={value <= 0 || updateEntryMutation.isPending}\n            data-testid={`button-decrease-${habit.id}`}\n          >\n            <Minus className=\"h-3 w-3\" />\n          </Button>\n          \n          <span className=\"text-sm font-medium min-w-[60px] text-center\">\n            {formatValue(value)} {habit.unit}\n          </span>\n          \n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => handleQuickUpdate(value + (habit.trackingType === \"duration\" ? 5 : 1))}\n            disabled={updateEntryMutation.isPending}\n            data-testid={`button-increase-${habit.id}`}\n          >\n            <Plus className=\"h-3 w-3\" />\n          </Button>\n\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setShowDialog(true)}\n            data-testid={`button-details-${habit.id}`}\n          >\n            ⋯\n          </Button>\n        </div>\n        \n        {habit.targetValue && (\n          <div className=\"space-y-1\">\n            <Progress value={getProgressPercentage()} className=\"h-2\" />\n            <div className=\"text-xs text-gray-500 text-center\">\n              {formatValue(value)} / {formatValue(habit.targetValue)} {habit.unit}\n            </div>\n          </div>\n        )}\n\n        <Dialog open={showDialog} onOpenChange={setShowDialog}>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>{habit.name}</DialogTitle>\n              <DialogDescription>Update your progress for {date}</DialogDescription>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"value\">\n                  {habit.trackingType === \"duration\" ? \"Duration (minutes)\" : `Amount (${habit.unit})`}\n                </Label>\n                <Input\n                  id=\"value\"\n                  type=\"number\"\n                  value={value}\n                  onChange={(e) => setValue(parseFloat(e.target.value) || 0)}\n                  min=\"0\"\n                  step={habit.trackingType === \"duration\" ? \"5\" : \"0.1\"}\n                  data-testid=\"input-habit-value\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"notes\">Notes (optional)</Label>\n                <Textarea\n                  id=\"notes\"\n                  value={notes}\n                  onChange={(e) => setNotes(e.target.value)}\n                  rows={2}\n                  placeholder=\"Add notes about your progress...\"\n                  data-testid=\"textarea-habit-notes\"\n                />\n              </div>\n\n              <div className=\"flex justify-end space-x-2\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setShowDialog(false)}\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={updateEntryMutation.isPending}\n                  data-testid=\"button-save-habit-entry\"\n                >\n                  {updateEntryMutation.isPending ? \"Saving...\" : \"Save\"}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n    );\n  }\n\n  // Full form display (habits page)\n  return (\n    <div className=\"space-y-4 p-4 border rounded-lg\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-3\">\n          <div \n            className=\"w-8 h-8 rounded-lg flex items-center justify-center text-white text-sm\"\n            style={{ backgroundColor: habit.color || \"#1976D2\" }}\n          >\n            {habit.icon === \"target\" ? <Target className=\"h-4 w-4\" /> : \n             habit.icon === \"clock\" ? <Clock className=\"h-4 w-4\" /> : \"📝\"}\n          </div>\n          <div>\n            <h4 className=\"font-semibold\">{habit.name}</h4>\n            <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n              <Badge variant=\"secondary\">{habit.trackingType}</Badge>\n              {habit.frequency !== \"daily\" && (\n                <Badge variant=\"outline\">{habit.frequency}</Badge>\n              )}\n            </div>\n          </div>\n        </div>\n        \n        {habit.trackingType === \"boolean\" ? (\n          <Button\n            onClick={() => handleQuickUpdate(completed ? 0 : 1, !completed)}\n            disabled={updateEntryMutation.isPending}\n            variant={completed ? \"default\" : \"outline\"}\n            size=\"sm\"\n            data-testid={`button-toggle-habit-${habit.id}`}\n          >\n            <Check className=\"h-4 w-4 mr-1\" />\n            {completed ? \"Done\" : \"Mark Done\"}\n          </Button>\n        ) : (\n          <div className=\"flex items-center space-x-2\">\n            <span className=\"text-lg font-semibold\">\n              {formatValue(value)} {habit.unit}\n            </span>\n            <div className=\"flex items-center space-x-1\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => value > 0 && handleQuickUpdate(value - (habit.trackingType === \"duration\" ? 5 : 1))}\n                disabled={value <= 0 || updateEntryMutation.isPending}\n                data-testid={`button-decrease-${habit.id}`}\n              >\n                <Minus className=\"h-3 w-3\" />\n              </Button>\n              \n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => handleQuickUpdate(value + (habit.trackingType === \"duration\" ? 5 : 1))}\n                disabled={updateEntryMutation.isPending}\n                data-testid={`button-increase-${habit.id}`}\n              >\n                <Plus className=\"h-3 w-3\" />\n              </Button>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {habit.targetValue && (\n        <div className=\"space-y-2\">\n          <div className=\"flex justify-between text-sm\">\n            <span>Progress</span>\n            <span>{Math.round(getProgressPercentage())}%</span>\n          </div>\n          <Progress value={getProgressPercentage()} className=\"h-2\" />\n          <div className=\"text-xs text-gray-500 text-center\">\n            Target: {formatValue(habit.targetValue)} {habit.unit}\n          </div>\n        </div>\n      )}\n\n      {notes && (\n        <div className=\"text-sm text-gray-600 bg-gray-50 p-2 rounded\">\n          <strong>Notes:</strong> {notes}\n        </div>\n      )}\n\n      <Button\n        variant=\"ghost\"\n        size=\"sm\"\n        onClick={() => setShowDialog(true)}\n        className=\"w-full\"\n        data-testid={`button-edit-details-${habit.id}`}\n      >\n        Edit Details\n      </Button>\n\n      <Dialog open={showDialog} onOpenChange={setShowDialog}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>{habit.name}</DialogTitle>\n            <DialogDescription>Update your progress for {date}</DialogDescription>\n          </DialogHeader>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            {habit.trackingType === \"boolean\" ? (\n              <div className=\"flex items-center space-x-2\">\n                <input\n                  type=\"checkbox\"\n                  id=\"completed\"\n                  checked={completed}\n                  onChange={(e) => setCompleted(e.target.checked)}\n                  className=\"rounded\"\n                  data-testid=\"checkbox-habit-completed\"\n                />\n                <Label htmlFor=\"completed\">Mark as completed</Label>\n              </div>\n            ) : (\n              <div>\n                <Label htmlFor=\"value\">\n                  {habit.trackingType === \"duration\" ? \"Duration (minutes)\" : `Amount (${habit.unit})`}\n                </Label>\n                <Input\n                  id=\"value\"\n                  type=\"number\"\n                  value={value}\n                  onChange={(e) => setValue(parseFloat(e.target.value) || 0)}\n                  min=\"0\"\n                  step={habit.trackingType === \"duration\" ? \"5\" : \"0.1\"}\n                  data-testid=\"input-habit-value\"\n                />\n              </div>\n            )}\n            \n            <div>\n              <Label htmlFor=\"notes\">Notes (optional)</Label>\n              <Textarea\n                id=\"notes\"\n                value={notes}\n                onChange={(e) => setNotes(e.target.value)}\n                rows={3}\n                placeholder=\"Add notes about your progress, challenges, or insights...\"\n                data-testid=\"textarea-habit-notes\"\n              />\n            </div>\n\n            <div className=\"flex justify-end space-x-2\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setShowDialog(false)}\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={updateEntryMutation.isPending}\n                data-testid=\"button-save-habit-entry\"\n              >\n                {updateEntryMutation.isPending ? \"Saving...\" : \"Save Progress\"}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":13736},"client/src/components/layout/mobile-sidebar.tsx":{"content":"import { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { Link, useLocation } from \"wouter\";\nimport { \n  Home, \n  Clock, \n  CheckSquare, \n  Heart, \n  Target, \n  Calendar, \n  BarChart3,\n  TrendingUp,\n  Apple\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nconst navigation = [\n  { name: \"Dashboard\", href: \"/\", icon: Home },\n  { name: \"Timer\", href: \"/timer\", icon: Clock },\n  { name: \"Habits\", href: \"/habits\", icon: CheckSquare },\n  { name: \"Health\", href: \"/health\", icon: Heart },\n  { name: \"Nutrition\", href: \"/nutrition\", icon: Apple },\n  { name: \"Goals\", href: \"/goals\", icon: Target },\n  { name: \"Calendar\", href: \"/calendar\", icon: Calendar },\n  { name: \"Analytics\", href: \"/analytics\", icon: BarChart3 },\n];\n\ninterface MobileSidebarProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport default function MobileSidebar({ open, onOpenChange }: MobileSidebarProps) {\n  const [location] = useLocation();\n\n  return (\n    <Sheet open={open} onOpenChange={onOpenChange}>\n      <SheetContent side=\"left\" className=\"w-64 p-0\">\n        <div className=\"flex flex-col h-full\">\n          {/* Logo */}\n          <div className=\"p-6 border-b border-gray-200\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n                <TrendingUp className=\"h-6 w-6 text-white\" />\n              </div>\n              <div>\n                <h1 className=\"text-xl font-semibold text-gray-900\">LifeTrack Pro</h1>\n                <p className=\"text-sm text-gray-600\">Personal Development</p>\n              </div>\n            </div>\n          </div>\n\n          {/* Navigation */}\n          <nav className=\"flex-1 p-4 space-y-2\">\n            {navigation.map((item) => {\n              const isActive = location === item.href;\n              return (\n                <Link key={item.name} href={item.href}>\n                  <div\n                    className={cn(\n                      \"flex items-center space-x-3 px-3 py-2 rounded-lg font-medium transition-colors cursor-pointer\",\n                      isActive\n                        ? \"bg-blue-50 text-primary\"\n                        : \"text-gray-700 hover:bg-gray-50\"\n                    )}\n                    onClick={() => onOpenChange(false)}\n                    data-testid={`mobile-nav-${item.name.toLowerCase()}`}\n                  >\n                    <item.icon className=\"h-5 w-5\" />\n                    <span>{item.name}</span>\n                  </div>\n                </Link>\n              );\n            })}\n          </nav>\n\n          {/* User Info */}\n          <div className=\"p-4 border-t border-gray-200\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center\">\n                <span className=\"text-white font-medium\">SC</span>\n              </div>\n              <div>\n                <p className=\"font-medium text-gray-900\">Sarah Chen</p>\n                <p className=\"text-sm text-gray-600\">Premium User</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </SheetContent>\n    </Sheet>\n  );\n}\n","size_bytes":3241},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { \n  Home, \n  Clock, \n  CheckSquare, \n  Heart, \n  Target, \n  Calendar, \n  BarChart3,\n  TrendingUp,\n  Apple\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nconst navigation = [\n  { name: \"Dashboard\", href: \"/\", icon: Home },\n  { name: \"Timer\", href: \"/timer\", icon: Clock },\n  { name: \"Habits\", href: \"/habits\", icon: CheckSquare },\n  { name: \"Health\", href: \"/health\", icon: Heart },\n  { name: \"Nutrition\", href: \"/nutrition\", icon: Apple },\n  { name: \"Goals\", href: \"/goals\", icon: Target },\n  { name: \"Calendar\", href: \"/calendar\", icon: Calendar },\n  { name: \"Analytics\", href: \"/analytics\", icon: BarChart3 },\n];\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n\n  return (\n    <div className=\"w-64 bg-surface border-r border-gray-200 flex flex-col\">\n      {/* Logo */}\n      <div className=\"p-6 border-b border-gray-200\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n            <TrendingUp className=\"h-6 w-6 text-white\" />\n          </div>\n          <div>\n            <h1 className=\"text-xl font-semibold text-gray-900\">LifeTrack Pro</h1>\n            <p className=\"text-sm text-gray-600\">Personal Development</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation */}\n      <nav className=\"flex-1 p-4 space-y-2\">\n        {navigation.map((item) => {\n          const isActive = location === item.href;\n          return (\n            <Link key={item.name} href={item.href}>\n              <div\n                className={cn(\n                  \"flex items-center space-x-3 px-3 py-2 rounded-lg font-medium transition-colors cursor-pointer\",\n                  isActive\n                    ? \"bg-blue-50 text-primary\"\n                    : \"text-gray-700 hover:bg-gray-50\"\n                )}\n                data-testid={`nav-${item.name.toLowerCase()}`}\n              >\n                <item.icon className=\"h-5 w-5\" />\n                <span>{item.name}</span>\n              </div>\n            </Link>\n          );\n        })}\n      </nav>\n\n      {/* User Info */}\n      <div className=\"p-4 border-t border-gray-200\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center\">\n            <span className=\"text-white font-medium\">SC</span>\n          </div>\n          <div>\n            <p className=\"font-medium text-gray-900\">Sarah Chen</p>\n            <p className=\"text-sm text-gray-600\">Premium User</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2664},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/layout/unified-sidebar.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { \n  Home, \n  Clock, \n  CheckSquare, \n  Heart, \n  Apple,\n  Dumbbell,\n  Smartphone,\n  Target, \n  Calendar, \n  BarChart3,\n  TrendingUp,\n  Menu,\n  X\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\";\nimport { Button } from \"@/components/ui/button\";\n\nconst navigation = [\n  { name: \"Dashboard\", href: \"/\", icon: Home },\n  { name: \"To Do\", href: \"/todos\", icon: CheckSquare },\n  { name: \"Calendar\", href: \"/calendar\", icon: Calendar },\n  { name: \"Systems\", href: \"/systems\", icon: TrendingUp },\n  { name: \"Timer\", href: \"/timer\", icon: Clock },\n  { name: \"Analytics\", href: \"/analytics\", icon: BarChart3 },\n];\n\ninterface SidebarProps {\n  mobileMenuOpen?: boolean;\n  setMobileMenuOpen?: (open: boolean) => void;\n  currentPage?: string;\n}\n\nexport function Sidebar({ mobileMenuOpen = false, setMobileMenuOpen, currentPage }: SidebarProps) {\n  const [location] = useLocation();\n  const isMobile = useIsMobile();\n\n  // Desktop Sidebar\n  const DesktopSidebar = () => (\n    <div className=\"hidden lg:fixed lg:inset-y-0 lg:z-50 lg:flex lg:w-64 lg:flex-col\">\n      <div className=\"flex grow flex-col gap-y-5 overflow-y-auto bg-white border-r border-gray-200 px-6 pb-2\">\n        {/* Logo */}\n        <div className=\"flex h-16 shrink-0 items-center\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n              <TrendingUp className=\"h-6 w-6 text-white\" />\n            </div>\n            <div>\n              <h1 className=\"text-xl font-semibold text-gray-900\">LifeTrack Pro</h1>\n              <p className=\"text-sm text-gray-600\">Personal Development</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Navigation */}\n        <nav className=\"flex flex-1 flex-col\">\n          <ul role=\"list\" className=\"flex flex-1 flex-col gap-y-2\">\n            {navigation.map((item) => {\n              const isActive = location === item.href || currentPage === item.href;\n              return (\n                <li key={item.name}>\n                  <Link href={item.href}>\n                    <div\n                      className={cn(\n                        \"flex items-center space-x-3 px-3 py-2 rounded-lg font-medium transition-colors cursor-pointer\",\n                        isActive\n                          ? \"bg-blue-50 text-primary\"\n                          : \"text-gray-700 hover:bg-gray-50\"\n                      )}\n                      data-testid={`nav-${item.name.toLowerCase()}`}\n                    >\n                      <item.icon className=\"h-5 w-5\" />\n                      <span>{item.name}</span>\n                    </div>\n                  </Link>\n                </li>\n              );\n            })}\n          </ul>\n        </nav>\n      </div>\n    </div>\n  );\n\n  // Mobile Menu Button\n  const MobileMenuButton = () => (\n    <div className=\"lg:hidden\">\n      <div className=\"flex items-center justify-between p-4 bg-white border-b border-gray-200\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n            <TrendingUp className=\"h-4 w-4 text-white\" />\n          </div>\n          <h1 className=\"text-lg font-semibold text-gray-900\">LifeTrack Pro</h1>\n        </div>\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={() => setMobileMenuOpen?.(true)}\n          data-testid=\"mobile-menu-button\"\n        >\n          <Menu className=\"h-6 w-6\" />\n        </Button>\n      </div>\n    </div>\n  );\n\n  // Mobile Sidebar\n  const MobileSidebar = () => (\n    <Sheet open={mobileMenuOpen} onOpenChange={setMobileMenuOpen}>\n      <SheetContent side=\"left\" className=\"w-64 p-0\">\n        <div className=\"flex flex-col h-full\">\n          {/* Logo */}\n          <div className=\"p-6 border-b border-gray-200\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n                  <TrendingUp className=\"h-6 w-6 text-white\" />\n                </div>\n                <div>\n                  <h1 className=\"text-xl font-semibold text-gray-900\">LifeTrack Pro</h1>\n                  <p className=\"text-sm text-gray-600\">Personal Development</p>\n                </div>\n              </div>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setMobileMenuOpen?.(false)}\n                data-testid=\"mobile-menu-close\"\n              >\n                <X className=\"h-5 w-5\" />\n              </Button>\n            </div>\n          </div>\n\n          {/* Navigation */}\n          <nav className=\"flex-1 p-4 space-y-2\">\n            {navigation.map((item) => {\n              const isActive = location === item.href || currentPage === item.href;\n              return (\n                <Link key={item.name} href={item.href}>\n                  <div\n                    className={cn(\n                      \"flex items-center space-x-3 px-3 py-2 rounded-lg font-medium transition-colors cursor-pointer\",\n                      isActive\n                        ? \"bg-blue-50 text-primary\"\n                        : \"text-gray-700 hover:bg-gray-50\"\n                    )}\n                    onClick={() => setMobileMenuOpen?.(false)}\n                    data-testid={`mobile-nav-${item.name.toLowerCase()}`}\n                  >\n                    <item.icon className=\"h-5 w-5\" />\n                    <span>{item.name}</span>\n                  </div>\n                </Link>\n              );\n            })}\n          </nav>\n        </div>\n      </SheetContent>\n    </Sheet>\n  );\n\n  return (\n    <>\n      <DesktopSidebar />\n      <MobileMenuButton />\n      <MobileSidebar />\n    </>\n  );\n}\n\nexport default Sidebar;","size_bytes":6060},"client/src/pages/calendar.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { \n  Plus, Calendar, Clock, MapPin, Users, \n  Briefcase, User, Heart, Target, AlertCircle,\n  Edit, Trash2, MoreHorizontal\n} from \"lucide-react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { format, addDays, startOfWeek, isSameDay } from \"date-fns\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { CalendarEvent, InsertCalendarEvent } from \"@shared/schema\";\n\nconst eventFormSchema = z.object({\n  title: z.string().min(1, \"Title is required\"),\n  description: z.string().optional(),\n  eventType: z.enum([\"appointment\", \"work\", \"personal\", \"deadline\", \"meeting\"]),\n  startDate: z.string().min(1, \"Start date is required\"),\n  startTime: z.string().optional(),\n  endDate: z.string().optional(),\n  endTime: z.string().optional(),\n  location: z.string().optional(),\n  isAllDay: z.boolean().default(false),\n  isRecurring: z.boolean().default(false),\n  recurringPattern: z.string().optional(),\n  reminder: z.number().optional(),\n  color: z.string().default(\"#3B82F6\")\n});\n\ntype EventFormData = z.infer<typeof eventFormSchema>;\n\nexport default function CalendarPage() {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [viewMode, setViewMode] = useState<\"week\" | \"month\">(\"week\");\n  const { toast } = useToast();\n\n  const { data: events = [], isLoading } = useQuery({\n    queryKey: [\"/api/calendar-events\"],\n  });\n\n  const form = useForm<EventFormData>({\n    resolver: zodResolver(eventFormSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      eventType: \"appointment\",\n      startDate: format(selectedDate, \"yyyy-MM-dd\"),\n      startTime: \"\",\n      endDate: \"\",\n      endTime: \"\",\n      location: \"\",\n      isAllDay: false,\n      isRecurring: false,\n      recurringPattern: \"\",\n      reminder: undefined,\n      color: \"#3B82F6\"\n    }\n  });\n\n  const createEventMutation = useMutation({\n    mutationFn: (data: EventFormData) => apiRequest(\"/api/calendar-events\", \"POST\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/calendar-events\"] });\n      setIsDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Event created successfully!\"\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create event\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const deleteEventMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(`/api/calendar-events/${id}`, \"DELETE\"),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/calendar-events\"] });\n      toast({\n        title: \"Success\",\n        description: \"Event deleted successfully!\"\n      });\n    }\n  });\n\n  const onSubmit = (data: EventFormData) => {\n    createEventMutation.mutate(data);\n  };\n\n  const getEventTypeIcon = (type: string) => {\n    switch (type) {\n      case \"work\": return <Briefcase className=\"h-4 w-4\" />;\n      case \"personal\": return <User className=\"h-4 w-4\" />;\n      case \"deadline\": return <AlertCircle className=\"h-4 w-4\" />;\n      case \"meeting\": return <Users className=\"h-4 w-4\" />;\n      default: return <Calendar className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getEventTypeColor = (type: string) => {\n    switch (type) {\n      case \"work\": return \"bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400\";\n      case \"personal\": return \"bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400\";\n      case \"deadline\": return \"bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400\";\n      case \"meeting\": return \"bg-purple-100 text-purple-800 dark:bg-purple-900/20 dark:text-purple-400\";\n      default: return \"bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400\";\n    }\n  };\n\n  const weekStart = startOfWeek(selectedDate, { weekStartsOn: 1 });\n  const weekDays = Array.from({ length: 7 }, (_, i) => addDays(weekStart, i));\n\n  const todayEvents = events.filter((event: CalendarEvent) => \n    isSameDay(new Date(event.startDate), new Date())\n  );\n\n  const upcomingEvents = events.filter((event: CalendarEvent) => \n    new Date(event.startDate) > new Date() && \n    new Date(event.startDate) <= addDays(new Date(), 7)\n  );\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-gray-200 dark:bg-gray-700 rounded w-1/4 mb-6\"></div>\n          <div className=\"grid gap-4\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"h-32 bg-gray-200 dark:bg-gray-700 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\" data-testid=\"calendar-page\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">Calendar</h1>\n          <p className=\"text-gray-600 dark:text-gray-400 mt-1\">\n            Manage appointments, work, and life events\n          </p>\n        </div>\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-add-event\">\n              <Plus className=\"mr-2 h-4 w-4\" />\n              Add Event\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Create New Event</DialogTitle>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"title\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Event Title</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Meeting with team...\" {...field} data-testid=\"input-event-title\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"eventType\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Event Type</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-event-type\">\n                            <SelectValue placeholder=\"Select event type\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"appointment\">Appointment</SelectItem>\n                          <SelectItem value=\"work\">Work</SelectItem>\n                          <SelectItem value=\"personal\">Personal</SelectItem>\n                          <SelectItem value=\"deadline\">Deadline</SelectItem>\n                          <SelectItem value=\"meeting\">Meeting</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description (Optional)</FormLabel>\n                      <FormControl>\n                        <Textarea placeholder=\"Event details...\" {...field} data-testid=\"textarea-event-description\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"startDate\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Start Date</FormLabel>\n                        <FormControl>\n                          <Input type=\"date\" {...field} data-testid=\"input-start-date\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"startTime\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Start Time</FormLabel>\n                        <FormControl>\n                          <Input type=\"time\" {...field} data-testid=\"input-start-time\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"endDate\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>End Date (Optional)</FormLabel>\n                        <FormControl>\n                          <Input type=\"date\" {...field} data-testid=\"input-end-date\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"endTime\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>End Time (Optional)</FormLabel>\n                        <FormControl>\n                          <Input type=\"time\" {...field} data-testid=\"input-end-time\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"location\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Location (Optional)</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Conference room, address...\" {...field} data-testid=\"input-location\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"isAllDay\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex items-center space-x-2\">\n                        <FormControl>\n                          <Switch\n                            checked={field.value}\n                            onCheckedChange={field.onChange}\n                            data-testid=\"switch-all-day\"\n                          />\n                        </FormControl>\n                        <FormLabel>All Day Event</FormLabel>\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"reminder\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Reminder (minutes before)</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            placeholder=\"15\" \n                            {...field} \n                            onChange={(e) => field.onChange(e.target.value ? Number(e.target.value) : undefined)}\n                            data-testid=\"input-reminder\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\" \n                  disabled={createEventMutation.isPending}\n                  data-testid=\"button-submit-event\"\n                >\n                  {createEventMutation.isPending ? \"Creating...\" : \"Create Event\"}\n                </Button>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Quick Stats */}\n      <div className=\"grid gap-4 md:grid-cols-4\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <Calendar className=\"h-8 w-8 text-blue-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Total Events</p>\n                <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">{events.length}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <Clock className=\"h-8 w-8 text-green-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Today</p>\n                <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">{todayEvents.length}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <AlertCircle className=\"h-8 w-8 text-orange-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">This Week</p>\n                <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">{upcomingEvents.length}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <Target className=\"h-8 w-8 text-purple-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Today</p>\n                <p className=\"text-lg font-bold text-gray-900 dark:text-white\">{format(new Date(), \"MMM dd\")}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs defaultValue=\"today\" className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"today\">Today</TabsTrigger>\n          <TabsTrigger value=\"week\">This Week</TabsTrigger>\n          <TabsTrigger value=\"upcoming\">Upcoming</TabsTrigger>\n          <TabsTrigger value=\"all\">All Events</TabsTrigger>\n        </TabsList>\n        \n        <TabsContent value=\"today\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Today's Schedule</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {todayEvents.length === 0 ? (\n                <div className=\"text-center py-8 text-gray-500 dark:text-gray-400\">\n                  No events scheduled for today\n                </div>\n              ) : (\n                <div className=\"space-y-3\">\n                  {todayEvents.map((event: CalendarEvent) => (\n                    <div \n                      key={event.id} \n                      className=\"flex items-center gap-3 p-4 border rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors\"\n                      data-testid={`event-item-${event.id}`}\n                    >\n                      <div className=\"flex-shrink-0\">\n                        {getEventTypeIcon(event.eventType)}\n                      </div>\n                      \n                      <div className=\"flex-1 min-w-0\">\n                        <h4 className=\"font-medium text-gray-900 dark:text-white\">{event.title}</h4>\n                        {event.description && (\n                          <p className=\"text-sm text-gray-600 dark:text-gray-400\">{event.description}</p>\n                        )}\n                        <div className=\"flex items-center gap-2 mt-1\">\n                          <Badge className={getEventTypeColor(event.eventType)}>\n                            {event.eventType}\n                          </Badge>\n                          {event.startTime && (\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              <Clock className=\"h-3 w-3 mr-1\" />\n                              {event.startTime}\n                              {event.endTime && ` - ${event.endTime}`}\n                            </Badge>\n                          )}\n                          {event.location && (\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              <MapPin className=\"h-3 w-3 mr-1\" />\n                              {event.location}\n                            </Badge>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"week\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Week View</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-7 gap-2 mb-4\">\n                {weekDays.map((day) => (\n                  <div key={day.toString()} className=\"text-center\">\n                    <h3 className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                      {format(day, \"EEE\")}\n                    </h3>\n                    <p className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                      {format(day, \"dd\")}\n                    </p>\n                  </div>\n                ))}\n              </div>\n              \n              <div className=\"grid grid-cols-7 gap-2\">\n                {weekDays.map((day) => {\n                  const dayEvents = events.filter((event: CalendarEvent) => \n                    isSameDay(new Date(event.startDate), day)\n                  );\n                  \n                  return (\n                    <div key={day.toString()} className=\"min-h-32 border rounded-lg p-2\">\n                      {dayEvents.map((event: CalendarEvent) => (\n                        <div \n                          key={event.id}\n                          className=\"text-xs p-1 mb-1 rounded\"\n                          style={{ backgroundColor: event.color + \"20\", color: event.color }}\n                        >\n                          {event.title}\n                          {event.startTime && (\n                            <div className=\"text-xs opacity-75\">{event.startTime}</div>\n                          )}\n                        </div>\n                      ))}\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"upcoming\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Upcoming Events</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {upcomingEvents.length === 0 ? (\n                <div className=\"text-center py-8 text-gray-500 dark:text-gray-400\">\n                  No upcoming events this week\n                </div>\n              ) : (\n                <div className=\"space-y-3\">\n                  {upcomingEvents.map((event: CalendarEvent) => (\n                    <div \n                      key={event.id} \n                      className=\"flex items-center gap-3 p-4 border rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors\"\n                    >\n                      <div className=\"flex-shrink-0\">\n                        {getEventTypeIcon(event.eventType)}\n                      </div>\n                      \n                      <div className=\"flex-1 min-w-0\">\n                        <h4 className=\"font-medium text-gray-900 dark:text-white\">{event.title}</h4>\n                        <div className=\"flex items-center gap-2 mt-1\">\n                          <Badge className={getEventTypeColor(event.eventType)}>\n                            {event.eventType}\n                          </Badge>\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            <Calendar className=\"h-3 w-3 mr-1\" />\n                            {format(new Date(event.startDate), \"MMM dd\")}\n                            {event.startTime && ` at ${event.startTime}`}\n                          </Badge>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"all\">\n          <Card>\n            <CardHeader>\n              <CardTitle>All Events</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {events.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <Calendar className=\"mx-auto h-12 w-12 text-gray-400\" />\n                  <h3 className=\"mt-2 text-sm font-medium text-gray-900 dark:text-white\">No events yet</h3>\n                  <p className=\"mt-1 text-sm text-gray-500 dark:text-gray-400\">\n                    Create your first event to get started.\n                  </p>\n                </div>\n              ) : (\n                <div className=\"space-y-3\">\n                  {events.map((event: CalendarEvent) => (\n                    <div \n                      key={event.id} \n                      className=\"flex items-center gap-3 p-4 border rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors\"\n                    >\n                      <div className=\"flex-shrink-0\">\n                        {getEventTypeIcon(event.eventType)}\n                      </div>\n                      \n                      <div className=\"flex-1 min-w-0\">\n                        <h4 className=\"font-medium text-gray-900 dark:text-white\">{event.title}</h4>\n                        {event.description && (\n                          <p className=\"text-sm text-gray-600 dark:text-gray-400\">{event.description}</p>\n                        )}\n                        <div className=\"flex items-center gap-2 mt-1\">\n                          <Badge className={getEventTypeColor(event.eventType)}>\n                            {event.eventType}\n                          </Badge>\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            <Calendar className=\"h-3 w-3 mr-1\" />\n                            {format(new Date(event.startDate), \"MMM dd, yyyy\")}\n                            {event.startTime && ` at ${event.startTime}`}\n                          </Badge>\n                          {event.location && (\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              <MapPin className=\"h-3 w-3 mr-1\" />\n                              {event.location}\n                            </Badge>\n                          )}\n                        </div>\n                      </div>\n                      \n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => deleteEventMutation.mutate(event.id)}\n                        disabled={deleteEventMutation.isPending}\n                        data-testid={`button-delete-${event.id}`}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":25223},"client/src/pages/content.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Smartphone, Clock, Play, CheckCircle2, ArrowRight } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function ContentPage() {\n  const today = new Date().toISOString().split('T')[0];\n\n  // Get today's screen time data\n  const { data: screenTimeEntries = [] } = useQuery({\n    queryKey: ['/api/screen-time/entries', today],\n    queryFn: () => fetch(`/api/screen-time/entries?date=${today}`).then(res => res.json())\n  });\n\n  const { data: screenTimeApps = [] } = useQuery({\n    queryKey: ['/api/screen-time/apps'],\n    queryFn: () => fetch('/api/screen-time/apps').then(res => res.json())\n  });\n\n  // Get watchlist data\n  const { data: watchlistItems = [] } = useQuery({\n    queryKey: ['/api/watchlist'],\n    queryFn: () => fetch('/api/watchlist').then(res => res.json())\n  });\n\n  // Calculate today's screen time summary\n  const todayTotal = screenTimeEntries.reduce((total: number, entry: any) => total + entry.minutes, 0);\n  const topApp = screenTimeEntries.length > 0 \n    ? screenTimeEntries.sort((a: any, b: any) => b.minutes - a.minutes)[0]\n    : null;\n  const topAppName = topApp \n    ? screenTimeApps.find((app: any) => app.id === topApp.appId)?.name || \"Unknown\"\n    : null;\n\n  // Get a suggested watchlist item (random from \"To Watch\" items)\n  const suggestedItem = watchlistItems\n    .filter((item: any) => item.status === \"To Watch\")\n    .sort(() => Math.random() - 0.5)[0];\n\n  const formatTime = (minutes: number) => {\n    if (minutes < 60) return `${minutes}m`;\n    const hours = Math.floor(minutes / 60);\n    const mins = minutes % 60;\n    return mins > 0 ? `${hours}h ${mins}m` : `${hours}h`;\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 max-w-4xl space-y-6\">\n      <div className=\"flex items-center gap-3 mb-8\">\n        <Smartphone className=\"h-8 w-8 text-blue-600\" />\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Content</h1>\n          <p className=\"text-gray-600\">Screen time tracking and watchlist management</p>\n        </div>\n      </div>\n\n      {/* Today's Screen Time Summary */}\n      <Card className=\"border-blue-200 bg-blue-50\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Clock className=\"h-5 w-5 text-blue-600\" />\n            Today's Screen Time\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-blue-600\">{formatTime(todayTotal)}</div>\n              <div className=\"text-sm text-gray-600\">Total Today</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-lg font-semibold\">\n                {topAppName || \"No data\"}\n              </div>\n              <div className=\"text-sm text-gray-600\">\n                {topApp ? formatTime(topApp.minutes) : \"Top app\"}\n              </div>\n            </div>\n            <div className=\"text-center\">\n              <Link href=\"/content/screen-time\">\n                <Button variant=\"outline\" size=\"sm\" className=\"w-full\" data-testid=\"view-screen-time\">\n                  View Details <ArrowRight className=\"h-4 w-4 ml-1\" />\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Watchlist Suggestion */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Play className=\"h-5 w-5 text-green-600\" />\n            Suggested for You\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {suggestedItem ? (\n            <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n              <div className=\"flex-1\">\n                <h3 className=\"font-medium\">{suggestedItem.title}</h3>\n                <div className=\"flex items-center gap-2 mt-1\">\n                  <Badge variant=\"secondary\" className=\"text-xs\">\n                    {suggestedItem.type}\n                  </Badge>\n                  {suggestedItem.source && (\n                    <span className=\"text-sm text-gray-600\">{suggestedItem.source}</span>\n                  )}\n                  {suggestedItem.length && (\n                    <span className=\"text-sm text-gray-600\">• {suggestedItem.length}m</span>\n                  )}\n                </div>\n              </div>\n              <div className=\"flex gap-2\">\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\"\n                  data-testid={`mark-done-${suggestedItem.id}`}\n                >\n                  <CheckCircle2 className=\"h-4 w-4 mr-1\" />\n                  Mark Done\n                </Button>\n                <Link href=\"/content/watchlist\">\n                  <Button variant=\"default\" size=\"sm\" data-testid=\"view-watchlist\">\n                    View All\n                  </Button>\n                </Link>\n              </div>\n            </div>\n          ) : (\n            <div className=\"text-center py-8 text-gray-500\">\n              <Play className=\"h-12 w-12 mx-auto mb-4 opacity-30\" />\n              <p>No items in your watchlist yet</p>\n              <Link href=\"/content/watchlist\">\n                <Button className=\"mt-2\" size=\"sm\" data-testid=\"add-first-item\">\n                  Add Your First Item\n                </Button>\n              </Link>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Quick Actions */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <Card className=\"hover:shadow-lg transition-shadow cursor-pointer\">\n          <Link href=\"/content/screen-time\">\n            <CardContent className=\"p-6 text-center\">\n              <Smartphone className=\"h-12 w-12 mx-auto mb-4 text-blue-600\" />\n              <h3 className=\"font-semibold mb-2\">Screen Time Tracker</h3>\n              <p className=\"text-sm text-gray-600\">\n                Track app usage, set limits, and monitor digital wellness\n              </p>\n            </CardContent>\n          </Link>\n        </Card>\n\n        <Card className=\"hover:shadow-lg transition-shadow cursor-pointer\">\n          <Link href=\"/content/watchlist\">\n            <CardContent className=\"p-6 text-center\">\n              <Play className=\"h-12 w-12 mx-auto mb-4 text-green-600\" />\n              <h3 className=\"font-semibold mb-2\">Watchlist Manager</h3>\n              <p className=\"text-sm text-gray-600\">\n                Organize movies, shows, and content to watch\n              </p>\n            </CardContent>\n          </Link>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":6915},"client/src/pages/daily-plan.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { \n  Plus, Calendar, Clock, CheckCircle2, Circle, \n  Star, ArrowLeft, ArrowRight, Sun, Moon, Heart\n} from \"lucide-react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { format, addDays, subDays } from \"date-fns\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { DailyPlan, InsertDailyPlan } from \"@shared/schema\";\n\nconst dailyPlanFormSchema = z.object({\n  title: z.string().min(1, \"Title is required\"),\n  timeBlocks: z.array(z.object({\n    id: z.string(),\n    startTime: z.string(),\n    endTime: z.string(),\n    title: z.string(),\n    type: z.string(),\n    todoId: z.string().optional(),\n    habitId: z.string().optional(),\n    completed: z.boolean().default(false)\n  })).optional(),\n  priorities: z.array(z.object({\n    id: z.string(),\n    text: z.string(),\n    completed: z.boolean().default(false),\n    todoId: z.string().optional()\n  })).optional(),\n  reflection: z.string().optional(),\n  energyLevel: z.number().optional(),\n  moodRating: z.number().optional()\n});\n\ntype DailyPlanFormData = z.infer<typeof dailyPlanFormSchema>;\n\nexport default function DailyPlanPage() {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [newTimeBlock, setNewTimeBlock] = useState({\n    startTime: \"\",\n    endTime: \"\",\n    title: \"\",\n    type: \"work\"\n  });\n  const [newPriority, setNewPriority] = useState(\"\");\n  const { toast } = useToast();\n\n  const dateStr = format(selectedDate, \"yyyy-MM-dd\");\n\n  const { data: dailyPlan, isLoading } = useQuery({\n    queryKey: [\"/api/daily-plans\", { date: dateStr }],\n    queryFn: () => apiRequest(`/api/daily-plans?date=${dateStr}`, \"GET\")\n  });\n\n  const { data: allPlans = [] } = useQuery({\n    queryKey: [\"/api/daily-plans\"],\n  });\n\n  const form = useForm<DailyPlanFormData>({\n    resolver: zodResolver(dailyPlanFormSchema),\n    defaultValues: {\n      title: `Plan for ${format(selectedDate, \"MMM dd, yyyy\")}`,\n      timeBlocks: [],\n      priorities: [],\n      reflection: \"\",\n      energyLevel: 5,\n      moodRating: 5\n    }\n  });\n\n  const createPlanMutation = useMutation({\n    mutationFn: (data: DailyPlanFormData) => \n      apiRequest(\"/api/daily-plans\", \"POST\", {\n        ...data,\n        date: dateStr\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/daily-plans\"] });\n      setIsDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Daily plan created successfully!\"\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create daily plan\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const updatePlanMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<DailyPlan> }) =>\n      apiRequest(`/api/daily-plans/${id}`, \"PUT\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/daily-plans\"] });\n      toast({\n        title: \"Success\",\n        description: \"Daily plan updated!\"\n      });\n    }\n  });\n\n  const onSubmit = (data: DailyPlanFormData) => {\n    createPlanMutation.mutate(data);\n  };\n\n  const addTimeBlock = () => {\n    if (!newTimeBlock.startTime || !newTimeBlock.endTime || !newTimeBlock.title) return;\n    \n    const currentBlocks = form.getValues(\"timeBlocks\") || [];\n    const newBlock = {\n      id: Math.random().toString(36).substr(2, 9),\n      ...newTimeBlock,\n      completed: false\n    };\n    \n    form.setValue(\"timeBlocks\", [...currentBlocks, newBlock]);\n    setNewTimeBlock({ startTime: \"\", endTime: \"\", title: \"\", type: \"work\" });\n  };\n\n  const addPriority = () => {\n    if (!newPriority) return;\n    \n    const currentPriorities = form.getValues(\"priorities\") || [];\n    const newPriorityItem = {\n      id: Math.random().toString(36).substr(2, 9),\n      text: newPriority,\n      completed: false\n    };\n    \n    form.setValue(\"priorities\", [...currentPriorities, newPriorityItem]);\n    setNewPriority(\"\");\n  };\n\n  const toggleTimeBlock = (blockId: string) => {\n    if (!dailyPlan) return;\n    \n    const updatedBlocks = (dailyPlan.timeBlocks || []).map((block: any) => \n      block.id === blockId ? { ...block, completed: !block.completed } : block\n    );\n    \n    updatePlanMutation.mutate({\n      id: dailyPlan.id,\n      data: { timeBlocks: updatedBlocks }\n    });\n  };\n\n  const togglePriority = (priorityId: string) => {\n    if (!dailyPlan) return;\n    \n    const updatedPriorities = (dailyPlan.priorities || []).map((priority: any) => \n      priority.id === priorityId ? { ...priority, completed: !priority.completed } : priority\n    );\n    \n    updatePlanMutation.mutate({\n      id: dailyPlan.id,\n      data: { priorities: updatedPriorities }\n    });\n  };\n\n  const updateReflection = (reflection: string) => {\n    if (!dailyPlan) return;\n    updatePlanMutation.mutate({\n      id: dailyPlan.id,\n      data: { reflection }\n    });\n  };\n\n  const updateWellness = (field: \"energyLevel\" | \"moodRating\", value: number) => {\n    if (!dailyPlan) return;\n    updatePlanMutation.mutate({\n      id: dailyPlan.id,\n      data: { [field]: value }\n    });\n  };\n\n  const navigateDate = (direction: \"prev\" | \"next\") => {\n    setSelectedDate(prev => direction === \"prev\" ? subDays(prev, 1) : addDays(prev, 1));\n  };\n\n  const getBlockTypeColor = (type: string) => {\n    switch (type) {\n      case \"work\": return \"bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400\";\n      case \"personal\": return \"bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400\";\n      case \"break\": return \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400\";\n      case \"todo\": return \"bg-purple-100 text-purple-800 dark:bg-purple-900/20 dark:text-purple-400\";\n      case \"habit\": return \"bg-orange-100 text-orange-800 dark:bg-orange-900/20 dark:text-orange-400\";\n      default: return \"bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400\";\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-gray-200 dark:bg-gray-700 rounded w-1/4 mb-6\"></div>\n          <div className=\"grid gap-4\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"h-32 bg-gray-200 dark:bg-gray-700 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\" data-testid=\"daily-plan-page\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">Daily Planning</h1>\n          <p className=\"text-gray-600 dark:text-gray-400 mt-1\">\n            Structure your day with time blocks and priorities\n          </p>\n        </div>\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-create-plan\">\n              <Plus className=\"mr-2 h-4 w-4\" />\n              Create Plan\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Create Daily Plan</DialogTitle>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"title\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Plan Title</FormLabel>\n                      <FormControl>\n                        <Input {...field} data-testid=\"input-plan-title\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"space-y-4\">\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                      Time Blocks\n                    </label>\n                    <div className=\"mt-2 space-y-2\">\n                      <div className=\"grid grid-cols-4 gap-2\">\n                        <Input\n                          type=\"time\"\n                          placeholder=\"Start\"\n                          value={newTimeBlock.startTime}\n                          onChange={(e) => setNewTimeBlock(prev => ({ ...prev, startTime: e.target.value }))}\n                          data-testid=\"input-start-time\"\n                        />\n                        <Input\n                          type=\"time\"\n                          placeholder=\"End\"\n                          value={newTimeBlock.endTime}\n                          onChange={(e) => setNewTimeBlock(prev => ({ ...prev, endTime: e.target.value }))}\n                          data-testid=\"input-end-time\"\n                        />\n                        <Input\n                          placeholder=\"Activity\"\n                          value={newTimeBlock.title}\n                          onChange={(e) => setNewTimeBlock(prev => ({ ...prev, title: e.target.value }))}\n                          data-testid=\"input-activity\"\n                        />\n                        <div className=\"flex gap-1\">\n                          <Select\n                            value={newTimeBlock.type}\n                            onValueChange={(value) => setNewTimeBlock(prev => ({ ...prev, type: value }))}\n                          >\n                            <SelectTrigger data-testid=\"select-block-type\">\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"work\">Work</SelectItem>\n                              <SelectItem value=\"personal\">Personal</SelectItem>\n                              <SelectItem value=\"break\">Break</SelectItem>\n                              <SelectItem value=\"todo\">Todo</SelectItem>\n                              <SelectItem value=\"habit\">Habit</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <Button \n                            type=\"button\" \n                            onClick={addTimeBlock}\n                            size=\"sm\"\n                            data-testid=\"button-add-time-block\"\n                          >\n                            <Plus className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                      <div className=\"space-y-1\">\n                        {(form.watch(\"timeBlocks\") || []).map((block) => (\n                          <div key={block.id} className=\"flex items-center gap-2 p-2 bg-gray-50 dark:bg-gray-800 rounded\">\n                            <span className=\"text-sm font-mono\">{block.startTime} - {block.endTime}</span>\n                            <Badge className={getBlockTypeColor(block.type)}>{block.type}</Badge>\n                            <span className=\"flex-1\">{block.title}</span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                      Daily Priorities\n                    </label>\n                    <div className=\"mt-2 space-y-2\">\n                      <div className=\"flex gap-2\">\n                        <Input\n                          placeholder=\"Add a priority...\"\n                          value={newPriority}\n                          onChange={(e) => setNewPriority(e.target.value)}\n                          data-testid=\"input-new-priority\"\n                        />\n                        <Button \n                          type=\"button\" \n                          onClick={addPriority}\n                          data-testid=\"button-add-priority\"\n                        >\n                          <Plus className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                      <div className=\"space-y-1\">\n                        {(form.watch(\"priorities\") || []).map((priority) => (\n                          <div key={priority.id} className=\"flex items-center gap-2 p-2 bg-gray-50 dark:bg-gray-800 rounded\">\n                            <span className=\"flex-1\">{priority.text}</span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"energyLevel\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Energy Level (1-10)</FormLabel>\n                        <FormControl>\n                          <Slider\n                            min={1}\n                            max={10}\n                            step={1}\n                            value={[field.value || 5]}\n                            onValueChange={(value) => field.onChange(value[0])}\n                            data-testid=\"slider-energy\"\n                          />\n                        </FormControl>\n                        <div className=\"text-center text-sm text-gray-600 dark:text-gray-400\">\n                          {field.value || 5}/10\n                        </div>\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"moodRating\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Mood Rating (1-10)</FormLabel>\n                        <FormControl>\n                          <Slider\n                            min={1}\n                            max={10}\n                            step={1}\n                            value={[field.value || 5]}\n                            onValueChange={(value) => field.onChange(value[0])}\n                            data-testid=\"slider-mood\"\n                          />\n                        </FormControl>\n                        <div className=\"text-center text-sm text-gray-600 dark:text-gray-400\">\n                          {field.value || 5}/10\n                        </div>\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\" \n                  disabled={createPlanMutation.isPending}\n                  data-testid=\"button-submit-plan\"\n                >\n                  {createPlanMutation.isPending ? \"Creating...\" : \"Create Daily Plan\"}\n                </Button>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Date Navigation */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center justify-between\">\n            <Button \n              variant=\"outline\" \n              onClick={() => navigateDate(\"prev\")}\n              data-testid=\"button-prev-day\"\n            >\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Previous Day\n            </Button>\n            \n            <div className=\"text-center\">\n              <h2 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                {format(selectedDate, \"EEEE, MMM dd, yyyy\")}\n              </h2>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                {format(selectedDate, \"yyyy-MM-dd\") === format(new Date(), \"yyyy-MM-dd\") ? \"Today\" : \n                 format(selectedDate, \"yyyy-MM-dd\") === format(addDays(new Date(), 1), \"yyyy-MM-dd\") ? \"Tomorrow\" :\n                 format(selectedDate, \"yyyy-MM-dd\") === format(subDays(new Date(), 1), \"yyyy-MM-dd\") ? \"Yesterday\" : \"\"}\n              </p>\n            </div>\n            \n            <Button \n              variant=\"outline\" \n              onClick={() => navigateDate(\"next\")}\n              data-testid=\"button-next-day\"\n            >\n              Next Day\n              <ArrowRight className=\"h-4 w-4 ml-2\" />\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Current Day Plan */}\n      {dailyPlan ? (\n        <div className=\"space-y-6\">\n          {/* Plan Overview */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Calendar className=\"h-5 w-5\" />\n                {dailyPlan.title}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid gap-4 md:grid-cols-3\">\n                <div className=\"flex items-center gap-2\">\n                  <Sun className=\"h-5 w-5 text-orange-500\" />\n                  <div>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">Energy Level</p>\n                    <p className=\"font-medium\">{dailyPlan.energyLevel || 'Not set'}/10</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center gap-2\">\n                  <Heart className=\"h-5 w-5 text-red-500\" />\n                  <div>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">Mood Rating</p>\n                    <p className=\"font-medium\">{dailyPlan.moodRating || 'Not set'}/10</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center gap-2\">\n                  <Clock className=\"h-5 w-5 text-blue-500\" />\n                  <div>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">Time Blocks</p>\n                    <p className=\"font-medium\">{(dailyPlan.timeBlocks || []).length} scheduled</p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Time Blocks and Priorities */}\n          <div className=\"grid gap-6 md:grid-cols-2\">\n            {/* Time Blocks */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Clock className=\"h-5 w-5\" />\n                  Time Blocks\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {!dailyPlan.timeBlocks || dailyPlan.timeBlocks.length === 0 ? (\n                  <p className=\"text-gray-500 dark:text-gray-400\">No time blocks scheduled</p>\n                ) : (\n                  <div className=\"space-y-3\">\n                    {dailyPlan.timeBlocks.map((block: any) => (\n                      <div \n                        key={block.id}\n                        className=\"flex items-center gap-3 p-3 border rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors\"\n                      >\n                        <button \n                          onClick={() => toggleTimeBlock(block.id)}\n                          data-testid={`button-toggle-block-${block.id}`}\n                        >\n                          {block.completed ? (\n                            <CheckCircle2 className=\"h-5 w-5 text-green-600\" />\n                          ) : (\n                            <Circle className=\"h-5 w-5 text-gray-400\" />\n                          )}\n                        </button>\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-2\">\n                            <span className=\"text-sm font-mono text-gray-600 dark:text-gray-400\">\n                              {block.startTime} - {block.endTime}\n                            </span>\n                            <Badge className={getBlockTypeColor(block.type)}>\n                              {block.type}\n                            </Badge>\n                          </div>\n                          <p className={`${block.completed ? \"line-through text-gray-500\" : \"text-gray-900 dark:text-white\"}`}>\n                            {block.title}\n                          </p>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Priorities */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Star className=\"h-5 w-5\" />\n                  Daily Priorities\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {!dailyPlan.priorities || dailyPlan.priorities.length === 0 ? (\n                  <p className=\"text-gray-500 dark:text-gray-400\">No priorities set</p>\n                ) : (\n                  <div className=\"space-y-3\">\n                    {dailyPlan.priorities.map((priority: any) => (\n                      <div \n                        key={priority.id}\n                        className=\"flex items-center gap-3 p-3 border rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors\"\n                      >\n                        <button \n                          onClick={() => togglePriority(priority.id)}\n                          data-testid={`button-toggle-priority-${priority.id}`}\n                        >\n                          {priority.completed ? (\n                            <CheckCircle2 className=\"h-5 w-5 text-green-600\" />\n                          ) : (\n                            <Circle className=\"h-5 w-5 text-gray-400\" />\n                          )}\n                        </button>\n                        <div className=\"flex-1\">\n                          <p className={`${priority.completed ? \"line-through text-gray-500\" : \"text-gray-900 dark:text-white\"}`}>\n                            {priority.text}\n                          </p>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Reflection */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Daily Reflection</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {dailyPlan.reflection ? (\n                <div className=\"space-y-3\">\n                  <p className=\"text-gray-600 dark:text-gray-400\">{dailyPlan.reflection}</p>\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\"\n                    onClick={() => {\n                      const newReflection = prompt(\"Update reflection:\", dailyPlan.reflection || \"\");\n                      if (newReflection !== null) {\n                        updateReflection(newReflection);\n                      }\n                    }}\n                    data-testid=\"button-edit-reflection\"\n                  >\n                    Edit Reflection\n                  </Button>\n                </div>\n              ) : (\n                <div className=\"text-center py-4\">\n                  <p className=\"text-gray-500 dark:text-gray-400 mb-3\">No reflection added yet</p>\n                  <Button \n                    onClick={() => {\n                      const reflection = prompt(\"Add your daily reflection:\");\n                      if (reflection) {\n                        updateReflection(reflection);\n                      }\n                    }}\n                    data-testid=\"button-add-reflection\"\n                  >\n                    Add Reflection\n                  </Button>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      ) : (\n        <Card>\n          <CardContent className=\"p-8 text-center\">\n            <Calendar className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">\n              No plan for this day\n            </h3>\n            <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\n              Create a daily plan to structure your day with time blocks and priorities.\n            </p>\n            <Button onClick={() => setIsDialogOpen(true)} data-testid=\"button-create-first-plan\">\n              <Plus className=\"mr-2 h-4 w-4\" />\n              Create Daily Plan\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":25459},"client/src/pages/screen-time.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { \n  Smartphone, \n  Clock, \n  Plus, \n  Download,\n  AlertTriangle,\n  Shield,\n  Target,\n  Calendar,\n  TrendingUp\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\nexport default function ScreenTimePage() {\n  const { toast } = useToast();\n  const [viewType, setViewType] = useState<\"day\" | \"week\">(\"day\");\n  const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split('T')[0]);\n  const [isLogDialogOpen, setIsLogDialogOpen] = useState(false);\n  const [isLimitDialogOpen, setIsLimitDialogOpen] = useState(false);\n  const [newEntry, setNewEntry] = useState({ appId: \"\", minutes: \"\" });\n  const [newLimit, setNewLimit] = useState({ appId: \"\", limitMinutes: \"\" });\n\n  // Calculate week start date (Monday)\n  const getWeekStart = (date: string) => {\n    const d = new Date(date);\n    const day = d.getDay();\n    const diff = d.getDate() - day + (day === 0 ? -6 : 1); // Monday\n    return new Date(d.setDate(diff)).toISOString().split('T')[0];\n  };\n\n  const weekStart = getWeekStart(selectedDate);\n\n  const { data: screenTimeApps = [] } = useQuery({\n    queryKey: ['/api/screen-time/apps'],\n    queryFn: () => fetch('/api/screen-time/apps').then(res => res.json())\n  });\n\n  const { data: screenTimeEntries = [] } = useQuery({\n    queryKey: ['/api/screen-time/entries', viewType, selectedDate],\n    queryFn: () => {\n      if (viewType === \"day\") {\n        return fetch(`/api/screen-time/entries?date=${selectedDate}`).then(res => res.json());\n      } else {\n        return fetch(`/api/screen-time/entries/week?startDate=${weekStart}`).then(res => res.json());\n      }\n    }\n  });\n\n  const { data: screenTimeLimits = [] } = useQuery({\n    queryKey: ['/api/screen-time/limits'],\n    queryFn: () => fetch('/api/screen-time/limits').then(res => res.json())\n  });\n\n  // Mutations\n  const addEntryMutation = useMutation({\n    mutationFn: (data: any) => apiRequest(\"POST\", \"/api/screen-time/entries\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/screen-time/entries'] });\n      setIsLogDialogOpen(false);\n      setNewEntry({ appId: \"\", minutes: \"\" });\n      toast({ title: \"Screen time logged!\", description: \"Entry added successfully.\" });\n    }\n  });\n\n  const addLimitMutation = useMutation({\n    mutationFn: (data: any) => apiRequest(\"POST\", \"/api/screen-time/limits\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/screen-time/limits'] });\n      setIsLimitDialogOpen(false);\n      setNewLimit({ appId: \"\", limitMinutes: \"\" });\n      toast({ title: \"Limit set!\", description: \"App limit configured successfully.\" });\n    }\n  });\n\n  const toggleAppPrivacyMutation = useMutation({\n    mutationFn: (data: { appId: string; isExcluded: boolean }) => \n      apiRequest(\"PUT\", `/api/screen-time/apps/${data.appId}`, { isExcluded: data.isExcluded }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/screen-time/apps'] });\n    }\n  });\n\n  // Calculate statistics\n  const calculateStats = () => {\n    const appMap = new Map(screenTimeApps.map((app: any) => [app.id, app]));\n    const appUsage = new Map<string, number>();\n\n    screenTimeEntries.forEach((entry: any) => {\n      const current = appUsage.get(entry.appId) || 0;\n      appUsage.set(entry.appId, current + entry.minutes);\n    });\n\n    const sortedApps = Array.from(appUsage.entries())\n      .map(([appId, minutes]) => ({\n        app: appMap.get(appId),\n        minutes\n      }))\n      .filter(item => item.app && !item.app.isExcluded)\n      .sort((a, b) => b.minutes - a.minutes);\n\n    const totalMinutes = sortedApps.reduce((sum, item) => sum + item.minutes, 0);\n    const topApps = sortedApps.slice(0, 5);\n\n    return { totalMinutes, topApps, appUsage };\n  };\n\n  const { totalMinutes, topApps, appUsage } = calculateStats();\n\n  const formatTime = (minutes: number) => {\n    if (minutes < 60) return `${minutes}m`;\n    const hours = Math.floor(minutes / 60);\n    const mins = minutes % 60;\n    return mins > 0 ? `${hours}h ${mins}m` : `${hours}h`;\n  };\n\n  const checkLimitWarnings = () => {\n    const warnings = [];\n    screenTimeLimits.forEach((limit: any) => {\n      const usage = appUsage.get(limit.appId) || 0;\n      const percentage = (usage / limit.limitMinutes) * 100;\n      \n      if (percentage >= 80) {\n        const app = screenTimeApps.find((a: any) => a.id === limit.appId);\n        warnings.push({\n          app: app?.name || \"Unknown\",\n          usage,\n          limit: limit.limitMinutes,\n          percentage\n        });\n      }\n    });\n    return warnings;\n  };\n\n  const warnings = checkLimitWarnings();\n\n  const handleExport = async () => {\n    try {\n      const response = await fetch('/api/screen-time/export');\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = 'screen-time-data.csv';\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      window.URL.revokeObjectURL(url);\n      toast({ title: \"Export complete!\", description: \"Screen time data exported to CSV.\" });\n    } catch (error) {\n      toast({ title: \"Export failed\", description: \"Could not export screen time data.\", variant: \"destructive\" });\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 max-w-6xl space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-3\">\n          <Smartphone className=\"h-8 w-8 text-blue-600\" />\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">Screen Time</h1>\n            <p className=\"text-gray-600\">Track and manage your digital usage</p>\n          </div>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" onClick={handleExport} data-testid=\"export-screen-time\">\n            <Download className=\"h-4 w-4 mr-2\" />\n            Export CSV\n          </Button>\n        </div>\n      </div>\n\n      {/* Limit Warnings */}\n      {warnings.length > 0 && (\n        <Card className=\"border-orange-200 bg-orange-50\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2 text-orange-800\">\n              <AlertTriangle className=\"h-5 w-5\" />\n              Limit Warnings\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              {warnings.map((warning, index) => (\n                <div key={index} className=\"flex items-center justify-between p-2 bg-white rounded\">\n                  <span className=\"font-medium\">{warning.app}</span>\n                  <div className=\"text-sm text-gray-600\">\n                    {formatTime(warning.usage)} / {formatTime(warning.limit)} \n                    ({Math.round(warning.percentage)}%)\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      <Tabs value={viewType} onValueChange={(value) => setViewType(value as \"day\" | \"week\")}>\n        <div className=\"flex items-center justify-between\">\n          <TabsList>\n            <TabsTrigger value=\"day\" data-testid=\"tab-day\">Today</TabsTrigger>\n            <TabsTrigger value=\"week\" data-testid=\"tab-week\">This Week</TabsTrigger>\n          </TabsList>\n          <div className=\"flex gap-2\">\n            <Dialog open={isLogDialogOpen} onOpenChange={setIsLogDialogOpen}>\n              <DialogTrigger asChild>\n                <Button data-testid=\"log-time-button\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Log Time\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>Log Screen Time</DialogTitle>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label>App</Label>\n                    <Select value={newEntry.appId} onValueChange={(value) => setNewEntry({...newEntry, appId: value})}>\n                      <SelectTrigger data-testid=\"select-app-entry\">\n                        <SelectValue placeholder=\"Choose app\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {screenTimeApps.map((app: any) => (\n                          <SelectItem key={app.id} value={app.id}>{app.name}</SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label>Minutes</Label>\n                    <Input \n                      type=\"number\" \n                      value={newEntry.minutes}\n                      onChange={(e) => setNewEntry({...newEntry, minutes: e.target.value})}\n                      placeholder=\"Enter minutes\"\n                      data-testid=\"input-minutes\"\n                    />\n                  </div>\n                  <Button \n                    onClick={() => addEntryMutation.mutate({\n                      appId: newEntry.appId,\n                      minutes: parseInt(newEntry.minutes),\n                      date: selectedDate\n                    })}\n                    disabled={!newEntry.appId || !newEntry.minutes || addEntryMutation.isPending}\n                    className=\"w-full\"\n                    data-testid=\"save-entry\"\n                  >\n                    {addEntryMutation.isPending ? \"Saving...\" : \"Save Entry\"}\n                  </Button>\n                </div>\n              </DialogContent>\n            </Dialog>\n\n            <Dialog open={isLimitDialogOpen} onOpenChange={setIsLimitDialogOpen}>\n              <DialogTrigger asChild>\n                <Button variant=\"outline\" data-testid=\"set-limit-button\">\n                  <Target className=\"h-4 w-4 mr-2\" />\n                  Set Limit\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>Set App Limit</DialogTitle>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label>App</Label>\n                    <Select value={newLimit.appId} onValueChange={(value) => setNewLimit({...newLimit, appId: value})}>\n                      <SelectTrigger data-testid=\"select-app-limit\">\n                        <SelectValue placeholder=\"Choose app\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {screenTimeApps.map((app: any) => (\n                          <SelectItem key={app.id} value={app.id}>{app.name}</SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label>Daily Limit (minutes)</Label>\n                    <Input \n                      type=\"number\" \n                      value={newLimit.limitMinutes}\n                      onChange={(e) => setNewLimit({...newLimit, limitMinutes: e.target.value})}\n                      placeholder=\"Enter limit in minutes\"\n                      data-testid=\"input-limit-minutes\"\n                    />\n                  </div>\n                  <Button \n                    onClick={() => addLimitMutation.mutate({\n                      appId: newLimit.appId,\n                      limitMinutes: parseInt(newLimit.limitMinutes)\n                    })}\n                    disabled={!newLimit.appId || !newLimit.limitMinutes || addLimitMutation.isPending}\n                    className=\"w-full\"\n                    data-testid=\"save-limit\"\n                  >\n                    {addLimitMutation.isPending ? \"Setting...\" : \"Set Limit\"}\n                  </Button>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </div>\n\n        <TabsContent value=\"day\" className=\"space-y-6\">\n          <div className=\"flex items-center gap-4 mb-4\">\n            <Label>Date:</Label>\n            <Input \n              type=\"date\" \n              value={selectedDate}\n              onChange={(e) => setSelectedDate(e.target.value)}\n              className=\"w-auto\"\n              data-testid=\"date-picker\"\n            />\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Clock className=\"h-5 w-5 text-blue-600\" />\n                  Total Time\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-3xl font-bold text-blue-600\">{formatTime(totalMinutes)}</div>\n                <p className=\"text-sm text-gray-600\">Today</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Top App</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {topApps.length > 0 ? (\n                  <div>\n                    <div className=\"font-semibold\">{topApps[0].app?.name}</div>\n                    <div className=\"text-sm text-gray-600\">{formatTime(topApps[0].minutes)}</div>\n                  </div>\n                ) : (\n                  <div className=\"text-gray-500\">No data</div>\n                )}\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Active Limits</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{screenTimeLimits.length}</div>\n                <p className=\"text-sm text-gray-600\">Apps with limits</p>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"week\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <TrendingUp className=\"h-5 w-5 text-green-600\" />\n                  Weekly Total\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-3xl font-bold text-green-600\">{formatTime(totalMinutes)}</div>\n                <p className=\"text-sm text-gray-600\">This week</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Daily Average</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{formatTime(Math.round(totalMinutes / 7))}</div>\n                <p className=\"text-sm text-gray-600\">Per day</p>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n\n      {/* Top Apps */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Top Apps</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {topApps.length > 0 ? (\n            <div className=\"space-y-3\">\n              {topApps.map((item, index) => (\n                <div key={item.app?.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center text-sm font-medium\">\n                      {index + 1}\n                    </div>\n                    <div>\n                      <div className=\"font-medium\">{item.app?.name}</div>\n                      <div className=\"text-sm text-gray-600\">{item.app?.category}</div>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"font-medium\">{formatTime(item.minutes)}</div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-8 text-gray-500\">\n              <Clock className=\"h-12 w-12 mx-auto mb-4 opacity-30\" />\n              <p>No screen time logged yet</p>\n              <p className=\"text-sm\">Start logging your app usage to see insights</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Privacy Controls */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Shield className=\"h-5 w-5\" />\n            Privacy Controls\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {screenTimeApps.map((app: any) => (\n              <div key={app.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                <div className=\"flex items-center gap-3\">\n                  <span className=\"font-medium\">{app.name}</span>\n                  <Badge variant=\"secondary\">{app.category}</Badge>\n                </div>\n                <Button\n                  variant={app.isExcluded ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => toggleAppPrivacyMutation.mutate({\n                    appId: app.id,\n                    isExcluded: !app.isExcluded\n                  })}\n                  data-testid={`toggle-privacy-${app.id}`}\n                >\n                  {app.isExcluded ? \"Show\" : \"Hide\"}\n                </Button>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":18271},"client/src/pages/systems.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { \n  Plus, Check, Clock, Flame, Calendar, Target, ChevronRight, BarChart3, \n  Activity, Heart, TrendingUp, Star, CheckCircle, Play, Pause, RotateCcw,\n  Moon, Zap, Utensils, Trophy, Brain, Timer, Dumbbell, Apple\n} from \"lucide-react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { format } from \"date-fns\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useTimer } from \"@/hooks/use-timer\";\nimport type { Habit, HabitEntry, Goal, HealthEntry, TimerSession } from \"@shared/schema\";\n\nconst habitFormSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  description: z.string().optional(),\n  category: z.string().min(1, \"Category is required\"),\n  frequency: z.enum([\"daily\", \"weekly\", \"custom\"]),\n  targetValue: z.number().min(1, \"Target must be at least 1\"),\n  unit: z.string().min(1, \"Unit is required\"),\n  trackingType: z.enum([\"boolean\", \"numeric\", \"duration\", \"custom\"]).default(\"numeric\")\n});\n\nconst goalFormSchema = z.object({\n  title: z.string().min(1, \"Title is required\"),\n  description: z.string().optional(),\n  deadline: z.string().optional(),\n  category: z.string().min(1, \"Category is required\"),\n  progress: z.number().min(0).max(100).default(0)\n});\n\ntype HabitFormData = z.infer<typeof habitFormSchema>;\ntype GoalFormData = z.infer<typeof goalFormSchema>;\n\nexport default function SystemsPage() {\n  const [showHabitDialog, setShowHabitDialog] = useState(false);\n  const [showGoalDialog, setShowGoalDialog] = useState(false);\n  const [showHealthDialog, setShowHealthDialog] = useState(false);\n  const [timerDuration, setTimerDuration] = useState(25); // 25 minutes\n  const [timerMode, setTimerMode] = useState<\"pomodoro\" | \"break\" | \"long-break\">(\"pomodoro\");\n  \n  // Health form state\n  const [sleepHours, setSleepHours] = useState(7);\n  const [sleepQuality, setSleepQuality] = useState([8]);\n  const [exerciseMinutes, setExerciseMinutes] = useState(0);\n  const [exerciseType, setExerciseType] = useState(\"\");\n  const [mood, setMood] = useState([7]);\n  const [healthNotes, setHealthNotes] = useState(\"\");\n\n  const { toast } = useToast();\n  const today = format(new Date(), \"yyyy-MM-dd\");\n\n  // Timer hook\n  const timer = useTimer({\n    duration: timerDuration,\n    onComplete: () => {\n      toast({\n        title: \"Timer Complete!\",\n        description: `${timerMode} session finished. Great work!`,\n      });\n    }\n  });\n\n  // Fetch all data\n  const { data: habits = [], isLoading: habitsLoading } = useQuery<Habit[]>({\n    queryKey: [\"/api/habits\"],\n  });\n\n  const { data: todayHabitEntries = [] } = useQuery<HabitEntry[]>({\n    queryKey: [\"/api/habit-entries\", { date: today }],\n    queryFn: () => fetch(`/api/habit-entries?date=${today}`).then(res => res.json())\n  });\n\n  const { data: goals = [] } = useQuery<Goal[]>({\n    queryKey: [\"/api/goals\"],\n  });\n\n  const { data: healthEntries = [] } = useQuery<HealthEntry[]>({\n    queryKey: [\"/api/health-entries\"],\n  });\n\n  const { data: timerSessions = [] } = useQuery<TimerSession[]>({\n    queryKey: [\"/api/timer-sessions\", { date: today }],\n    queryFn: () => fetch(`/api/timer-sessions?date=${today}`).then(res => res.json())\n  });\n\n  // Forms\n  const habitForm = useForm<HabitFormData>({\n    resolver: zodResolver(habitFormSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      category: \"\",\n      frequency: \"daily\",\n      targetValue: 1,\n      unit: \"\",\n      trackingType: \"numeric\"\n    }\n  });\n\n  const goalForm = useForm<GoalFormData>({\n    resolver: zodResolver(goalFormSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      deadline: \"\",\n      category: \"\",\n      progress: 0\n    }\n  });\n\n  // Mutations\n  const createHabitMutation = useMutation({\n    mutationFn: (data: HabitFormData) => apiRequest(\"/api/habits\", \"POST\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/habits\"] });\n      toast({ title: \"System created successfully!\" });\n      setShowHabitDialog(false);\n      habitForm.reset();\n    }\n  });\n\n  const logHabitMutation = useMutation({\n    mutationFn: ({ habitId, value = 1 }: { habitId: string; value?: number }) =>\n      apiRequest(\"/api/habit-entries\", \"POST\", { habitId, value, date: today }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/habit-entries\", { date: today }] });\n      toast({ title: \"Progress logged!\" });\n    }\n  });\n\n  const createGoalMutation = useMutation({\n    mutationFn: (data: GoalFormData) => apiRequest(\"/api/goals\", \"POST\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/goals\"] });\n      toast({ title: \"Goal created successfully!\" });\n      setShowGoalDialog(false);\n      goalForm.reset();\n    }\n  });\n\n  const updateGoalMutation = useMutation({\n    mutationFn: ({ id, progress }: { id: string; progress: number }) =>\n      apiRequest(`/api/goals/${id}`, \"PUT\", { progress }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/goals\"] });\n      toast({ title: \"Goal progress updated!\" });\n    }\n  });\n\n  const saveHealthMutation = useMutation({\n    mutationFn: (data: any) => {\n      const todayHealth = healthEntries.find(entry => entry.date === today);\n      if (todayHealth) {\n        return apiRequest(`/api/health-entries/${todayHealth.id}`, \"PUT\", data);\n      } else {\n        return apiRequest(\"/api/health-entries\", \"POST\", { ...data, date: today });\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/health-entries\"] });\n      toast({ title: \"Health data saved!\" });\n      setShowHealthDialog(false);\n    }\n  });\n\n  // Helper functions\n  const getTodayProgress = (habitId: string) => {\n    const entry = todayHabitEntries.find(entry => entry.habitId === habitId);\n    return entry?.value || 0;\n  };\n\n  const getStreakInfo = (habit: Habit) => {\n    return { current: habit.streakDays || 0, best: habit.streakDays || 0 };\n  };\n\n  // Calculations\n  const activeHabits = habits.filter(h => !h.isArchived);\n  const categories = [...new Set(habits.map(h => h.category).filter(Boolean))];\n  const completedHabitsToday = todayHabitEntries.filter(entry => {\n    const habit = habits.find(h => h.id === entry.habitId);\n    return habit && (entry.value || 0) >= (habit.targetValue || 1);\n  }).length;\n  const habitCompletionRate = activeHabits.length > 0 \n    ? Math.round((completedHabitsToday / activeHabits.length) * 100) \n    : 0;\n\n  const totalFocusMinutes = timerSessions\n    .filter(session => session.completed)\n    .reduce((sum, session) => sum + session.duration, 0);\n\n  const todayHealth = healthEntries.find(entry => entry.date === today);\n  const goalsOnTrack = goals.filter(goal => (goal.progress || 0) >= 50).length;\n\n  // Load existing health data\n  useEffect(() => {\n    if (todayHealth) {\n      setSleepHours(todayHealth.sleepHours || 7);\n      setSleepQuality([todayHealth.sleepQuality || 8]);\n      setExerciseMinutes(todayHealth.exerciseMinutes || 0);\n      setExerciseType(todayHealth.exerciseType || \"\");\n      setMood([todayHealth.mood || 7]);\n      setHealthNotes(todayHealth.notes || \"\");\n    }\n  }, [todayHealth]);\n\n  const onHabitSubmit = (data: HabitFormData) => {\n    createHabitMutation.mutate(data);\n  };\n\n  const onGoalSubmit = (data: GoalFormData) => {\n    createGoalMutation.mutate(data);\n  };\n\n  const handleLogHabit = (habitId: string, value: number = 1) => {\n    logHabitMutation.mutate({ habitId, value });\n  };\n\n  const handleSaveHealth = (e: React.FormEvent) => {\n    e.preventDefault();\n    saveHealthMutation.mutate({\n      sleepHours: sleepHours > 0 ? sleepHours : undefined,\n      sleepQuality: sleepQuality[0],\n      exerciseMinutes: exerciseMinutes > 0 ? exerciseMinutes : undefined,\n      exerciseType: exerciseType.trim() || undefined,\n      mood: mood[0],\n      notes: healthNotes.trim() || undefined,\n    });\n  };\n\n  if (habitsLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"text-center py-12\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600 dark:text-gray-400\">Loading systems...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-8\" data-testid=\"systems-page\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">Systems Dashboard</h1>\n          <p className=\"text-gray-600 dark:text-gray-400 mt-1\">\n            Comprehensive tracking for habits, health, goals, and productivity\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Dialog open={showHabitDialog} onOpenChange={setShowHabitDialog}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-add-habit\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add System\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-md\">\n              <DialogHeader>\n                <DialogTitle>Create New System</DialogTitle>\n              </DialogHeader>\n              <Form {...habitForm}>\n                <form onSubmit={habitForm.handleSubmit(onHabitSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={habitForm.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Name</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Morning meditation\" {...field} data-testid=\"input-name\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={habitForm.control}\n                      name=\"category\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Category</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-category\">\n                                <SelectValue placeholder=\"Select category\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"health\">Health</SelectItem>\n                              <SelectItem value=\"productivity\">Productivity</SelectItem>\n                              <SelectItem value=\"mindfulness\">Mindfulness</SelectItem>\n                              <SelectItem value=\"fitness\">Fitness</SelectItem>\n                              <SelectItem value=\"learning\">Learning</SelectItem>\n                              <SelectItem value=\"social\">Social</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={habitForm.control}\n                      name=\"frequency\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Frequency</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-frequency\">\n                                <SelectValue placeholder=\"Select frequency\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"daily\">Daily</SelectItem>\n                              <SelectItem value=\"weekly\">Weekly</SelectItem>\n                              <SelectItem value=\"custom\">Custom</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={habitForm.control}\n                      name=\"targetValue\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Target</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"number\" \n                              placeholder=\"1\" \n                              {...field} \n                              onChange={(e) => field.onChange(Number(e.target.value))}\n                              data-testid=\"input-target\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={habitForm.control}\n                      name=\"unit\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Unit</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"times, minutes, pages\" {...field} data-testid=\"input-unit\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={habitForm.control}\n                    name=\"description\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Description (Optional)</FormLabel>\n                        <FormControl>\n                          <Textarea placeholder=\"System description...\" {...field} data-testid=\"textarea-description\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full\" \n                    disabled={createHabitMutation.isPending}\n                    data-testid=\"button-submit-system\"\n                  >\n                    {createHabitMutation.isPending ? \"Creating...\" : \"Create System\"}\n                  </Button>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Quick Stats */}\n      <div className=\"grid gap-4 md:grid-cols-5\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <TrendingUp className=\"h-8 w-8 text-blue-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Active Systems</p>\n                <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">{activeHabits.length}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <Target className=\"h-8 w-8 text-green-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Completed Today</p>\n                <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">{completedHabitsToday}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <Clock className=\"h-8 w-8 text-purple-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Focus Time</p>\n                <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                  {Math.floor(totalFocusMinutes / 60)}h {totalFocusMinutes % 60}m\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <Trophy className=\"h-8 w-8 text-yellow-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Goals On Track</p>\n                <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">{goalsOnTrack}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <Heart className=\"h-8 w-8 text-red-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Sleep Quality</p>\n                <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                  {todayHealth?.sleepQuality ? `${todayHealth.sleepQuality}/10` : \"—\"}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Tabs */}\n      <Tabs defaultValue=\"habits\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-6\">\n          <TabsTrigger value=\"habits\" className=\"flex items-center gap-2\">\n            <TrendingUp className=\"h-4 w-4\" />\n            Habits\n          </TabsTrigger>\n          <TabsTrigger value=\"timer\" className=\"flex items-center gap-2\">\n            <Timer className=\"h-4 w-4\" />\n            Timer\n          </TabsTrigger>\n          <TabsTrigger value=\"health\" className=\"flex items-center gap-2\">\n            <Heart className=\"h-4 w-4\" />\n            Health\n          </TabsTrigger>\n          <TabsTrigger value=\"nutrition\" className=\"flex items-center gap-2\">\n            <Apple className=\"h-4 w-4\" />\n            Nutrition\n          </TabsTrigger>\n          <TabsTrigger value=\"goals\" className=\"flex items-center gap-2\">\n            <Target className=\"h-4 w-4\" />\n            Goals\n          </TabsTrigger>\n          <TabsTrigger value=\"analytics\" className=\"flex items-center gap-2\">\n            <BarChart3 className=\"h-4 w-4\" />\n            Analytics\n          </TabsTrigger>\n        </TabsList>\n\n        {/* Habits Tab */}\n        <TabsContent value=\"habits\" className=\"space-y-6\">\n          {activeHabits.length === 0 ? (\n            <Card>\n              <CardContent className=\"text-center py-12\">\n                <TrendingUp className=\"mx-auto h-12 w-12 text-gray-400\" />\n                <h3 className=\"mt-2 text-sm font-medium text-gray-900 dark:text-white\">No systems yet</h3>\n                <p className=\"mt-1 text-sm text-gray-500 dark:text-gray-400\">\n                  Create your first system to start tracking.\n                </p>\n                <Button \n                  className=\"mt-4\" \n                  onClick={() => setShowHabitDialog(true)}\n                  data-testid=\"button-create-first-habit\"\n                >\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Create System\n                </Button>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n              {activeHabits.map((habit: Habit) => {\n                const todayProgress = getTodayProgress(habit.id);\n                const streakInfo = getStreakInfo(habit);\n                const isCompleted = todayProgress >= (habit.targetValue || 1);\n\n                return (\n                  <Card key={habit.id} className={`transition-all ${isCompleted ? 'ring-2 ring-green-500' : ''}`}>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex justify-between items-start mb-3\">\n                        <div>\n                          <h3 className=\"font-semibold text-gray-900 dark:text-white\">{habit.name}</h3>\n                          <Badge variant=\"secondary\" className=\"text-xs mt-1\">\n                            {habit.category}\n                          </Badge>\n                        </div>\n                        {isCompleted && (\n                          <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                        )}\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-sm text-gray-600 dark:text-gray-400\">Progress</span>\n                          <span className=\"text-sm font-medium\">\n                            {todayProgress} / {habit.targetValue || 1} {habit.unit}\n                          </span>\n                        </div>\n                        \n                        <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\n                          <div \n                            className=\"bg-blue-600 h-2 rounded-full transition-all\"\n                            style={{ width: `${Math.min((todayProgress / (habit.targetValue || 1)) * 100, 100)}%` }}\n                          />\n                        </div>\n\n                        {habit.frequency === \"daily\" && (\n                          <div className=\"flex justify-between text-xs text-gray-500 dark:text-gray-400\">\n                            <span>Current streak: {streakInfo.current} days</span>\n                            <span>Best: {streakInfo.best} days</span>\n                          </div>\n                        )}\n                      </div>\n\n                      <div className=\"flex gap-2 mt-4\">\n                        <Button\n                          size=\"sm\"\n                          variant={isCompleted ? \"secondary\" : \"default\"}\n                          onClick={() => handleLogHabit(habit.id)}\n                          disabled={logHabitMutation.isPending}\n                          className=\"flex-1\"\n                          data-testid={`button-log-${habit.id}`}\n                        >\n                          {isCompleted ? \"Done!\" : \"Log +1\"}\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n          )}\n        </TabsContent>\n\n        {/* Timer Tab */}\n        <TabsContent value=\"timer\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Timer className=\"h-5 w-5\" />\n                Focus Timer\n              </CardTitle>\n              <CardDescription>\n                Use the Pomodoro technique to improve focus and productivity\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"text-center\">\n                <div className=\"text-6xl font-mono font-bold text-gray-900 dark:text-white mb-4\">\n                  {Math.floor(timer.time)}:{((timer.time % 1) * 60).toFixed(0).padStart(2, '0')}\n                </div>\n                \n                <div className=\"flex justify-center gap-4 mb-6\">\n                  <Button\n                    variant={timer.isRunning ? \"secondary\" : \"default\"}\n                    size=\"lg\"\n                    onClick={timer.isRunning ? timer.pause : timer.start}\n                    data-testid=\"button-timer-toggle\"\n                  >\n                    {timer.isRunning ? <Pause className=\"h-5 w-5\" /> : <Play className=\"h-5 w-5\" />}\n                  </Button>\n                  \n                  <Button\n                    variant=\"outline\"\n                    size=\"lg\"\n                    onClick={timer.reset}\n                    data-testid=\"button-timer-reset\"\n                  >\n                    <RotateCcw className=\"h-5 w-5\" />\n                  </Button>\n                </div>\n\n                <div className=\"flex justify-center gap-2 mb-4\">\n                  <Button\n                    variant={timerMode === \"pomodoro\" ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => {\n                      setTimerMode(\"pomodoro\");\n                      setTimerDuration(25);\n                      timer.reset();\n                    }}\n                  >\n                    Pomodoro (25m)\n                  </Button>\n                  <Button\n                    variant={timerMode === \"break\" ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => {\n                      setTimerMode(\"break\");\n                      setTimerDuration(5);\n                      timer.reset();\n                    }}\n                  >\n                    Break (5m)\n                  </Button>\n                  <Button\n                    variant={timerMode === \"long-break\" ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => {\n                      setTimerMode(\"long-break\");\n                      setTimerDuration(15);\n                      timer.reset();\n                    }}\n                  >\n                    Long Break (15m)\n                  </Button>\n                </div>\n\n                <Progress value={(1 - timer.time / timerDuration) * 100} className=\"w-full max-w-md mx-auto\" />\n              </div>\n\n              <div className=\"text-center\">\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  Focus sessions today: {timerSessions.filter((s: TimerSession) => s.completed).length}\n                </p>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  Total focus time: {Math.floor(totalFocusMinutes / 60)}h {totalFocusMinutes % 60}m\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Health Tab */}\n        <TabsContent value=\"health\" className=\"space-y-6\">\n          <div className=\"grid gap-6 md:grid-cols-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Heart className=\"h-5 w-5\" />\n                  Today's Health\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"text-center p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n                    <Moon className=\"h-6 w-6 mx-auto mb-1 text-blue-600\" />\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">Sleep</p>\n                    <p className=\"font-bold\">{todayHealth?.sleepHours || \"—\"}h</p>\n                  </div>\n                  <div className=\"text-center p-3 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n                    <Dumbbell className=\"h-6 w-6 mx-auto mb-1 text-green-600\" />\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">Exercise</p>\n                    <p className=\"font-bold\">{todayHealth?.exerciseMinutes || 0}m</p>\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-gray-600 dark:text-gray-400\">Sleep Quality</span>\n                    <span className=\"font-medium\">{todayHealth?.sleepQuality || \"—\"}/10</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-gray-600 dark:text-gray-400\">Mood</span>\n                    <span className=\"font-medium\">{todayHealth?.mood || \"—\"}/10</span>\n                  </div>\n                </div>\n\n                <Dialog open={showHealthDialog} onOpenChange={setShowHealthDialog}>\n                  <DialogTrigger asChild>\n                    <Button className=\"w-full\" data-testid=\"button-log-health\">\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Log Health Data\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent>\n                    <DialogHeader>\n                      <DialogTitle>Log Health Data</DialogTitle>\n                    </DialogHeader>\n                    <form onSubmit={handleSaveHealth} className=\"space-y-4\">\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div>\n                          <label className=\"block text-sm font-medium mb-2\">Sleep Hours</label>\n                          <Input\n                            type=\"number\"\n                            step=\"0.5\"\n                            value={sleepHours}\n                            onChange={(e) => setSleepHours(Number(e.target.value))}\n                            data-testid=\"input-sleep-hours\"\n                          />\n                        </div>\n                        <div>\n                          <label className=\"block text-sm font-medium mb-2\">Exercise (minutes)</label>\n                          <Input\n                            type=\"number\"\n                            value={exerciseMinutes}\n                            onChange={(e) => setExerciseMinutes(Number(e.target.value))}\n                            data-testid=\"input-exercise-minutes\"\n                          />\n                        </div>\n                      </div>\n\n                      <div>\n                        <label className=\"block text-sm font-medium mb-2\">Exercise Type</label>\n                        <Input\n                          value={exerciseType}\n                          onChange={(e) => setExerciseType(e.target.value)}\n                          placeholder=\"Running, weightlifting, yoga...\"\n                          data-testid=\"input-exercise-type\"\n                        />\n                      </div>\n\n                      <div>\n                        <label className=\"block text-sm font-medium mb-2\">\n                          Sleep Quality: {sleepQuality[0]}/10\n                        </label>\n                        <Slider\n                          value={sleepQuality}\n                          onValueChange={setSleepQuality}\n                          max={10}\n                          min={1}\n                          step={1}\n                          data-testid=\"slider-sleep-quality\"\n                        />\n                      </div>\n\n                      <div>\n                        <label className=\"block text-sm font-medium mb-2\">\n                          Mood: {mood[0]}/10\n                        </label>\n                        <Slider\n                          value={mood}\n                          onValueChange={setMood}\n                          max={10}\n                          min={1}\n                          step={1}\n                          data-testid=\"slider-mood\"\n                        />\n                      </div>\n\n                      <div>\n                        <label className=\"block text-sm font-medium mb-2\">Notes</label>\n                        <Textarea\n                          value={healthNotes}\n                          onChange={(e) => setHealthNotes(e.target.value)}\n                          placeholder=\"How are you feeling today?\"\n                          data-testid=\"textarea-health-notes\"\n                        />\n                      </div>\n\n                      <Button \n                        type=\"submit\" \n                        className=\"w-full\"\n                        disabled={saveHealthMutation.isPending}\n                        data-testid=\"button-save-health\"\n                      >\n                        {saveHealthMutation.isPending ? \"Saving...\" : \"Save Health Data\"}\n                      </Button>\n                    </form>\n                  </DialogContent>\n                </Dialog>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Health Trends</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center py-8\">\n                  <BarChart3 className=\"h-12 w-12 mx-auto text-gray-400 mb-2\" />\n                  <p className=\"text-gray-600 dark:text-gray-400\">Health analytics coming soon</p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* Nutrition Tab */}\n        <TabsContent value=\"nutrition\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Apple className=\"h-5 w-5\" />\n                Nutrition Tracking\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center py-12\">\n                <Utensils className=\"h-12 w-12 mx-auto text-gray-400 mb-2\" />\n                <p className=\"text-gray-600 dark:text-gray-400\">Nutrition tracking coming soon</p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Goals Tab */}\n        <TabsContent value=\"goals\" className=\"space-y-6\">\n          <div className=\"flex justify-between items-center\">\n            <h2 className=\"text-xl font-semibold\">Goals</h2>\n            <Dialog open={showGoalDialog} onOpenChange={setShowGoalDialog}>\n              <DialogTrigger asChild>\n                <Button data-testid=\"button-add-goal\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Goal\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>Create New Goal</DialogTitle>\n                </DialogHeader>\n                <Form {...goalForm}>\n                  <form onSubmit={goalForm.handleSubmit(onGoalSubmit)} className=\"space-y-4\">\n                    <FormField\n                      control={goalForm.control}\n                      name=\"title\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Title</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Learn Spanish\" {...field} data-testid=\"input-goal-title\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={goalForm.control}\n                      name=\"category\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Category</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-goal-category\">\n                                <SelectValue placeholder=\"Select category\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"personal\">Personal</SelectItem>\n                              <SelectItem value=\"professional\">Professional</SelectItem>\n                              <SelectItem value=\"health\">Health</SelectItem>\n                              <SelectItem value=\"financial\">Financial</SelectItem>\n                              <SelectItem value=\"learning\">Learning</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={goalForm.control}\n                      name=\"deadline\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Deadline (Optional)</FormLabel>\n                          <FormControl>\n                            <Input type=\"date\" {...field} data-testid=\"input-goal-deadline\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={goalForm.control}\n                      name=\"description\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Description</FormLabel>\n                          <FormControl>\n                            <Textarea placeholder=\"Goal description...\" {...field} data-testid=\"textarea-goal-description\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <Button \n                      type=\"submit\" \n                      className=\"w-full\"\n                      disabled={createGoalMutation.isPending}\n                      data-testid=\"button-submit-goal\"\n                    >\n                      {createGoalMutation.isPending ? \"Creating...\" : \"Create Goal\"}\n                    </Button>\n                  </form>\n                </Form>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          {goals.length === 0 ? (\n            <Card>\n              <CardContent className=\"text-center py-12\">\n                <Target className=\"mx-auto h-12 w-12 text-gray-400\" />\n                <h3 className=\"mt-2 text-sm font-medium text-gray-900 dark:text-white\">No goals yet</h3>\n                <p className=\"mt-1 text-sm text-gray-500 dark:text-gray-400\">\n                  Create your first goal to start tracking progress.\n                </p>\n                <Button \n                  className=\"mt-4\" \n                  onClick={() => setShowGoalDialog(true)}\n                  data-testid=\"button-create-first-goal\"\n                >\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Create Goal\n                </Button>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid gap-4 md:grid-cols-2\">\n              {goals.map((goal: Goal) => (\n                <Card key={goal.id}>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex justify-between items-start mb-3\">\n                      <div>\n                        <h3 className=\"font-semibold text-gray-900 dark:text-white\">{goal.title}</h3>\n                        <Badge variant=\"secondary\" className=\"text-xs mt-1\">\n                          {goal.category}\n                        </Badge>\n                      </div>\n                      {goal.deadline && (\n                        <span className=\"text-xs text-gray-500 dark:text-gray-400\">\n                          {format(new Date(goal.deadline), \"MMM dd\")}\n                        </span>\n                      )}\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm text-gray-600 dark:text-gray-400\">Progress</span>\n                        <span className=\"text-sm font-medium\">{goal.progress || 0}%</span>\n                      </div>\n                      \n                      <Progress value={goal.progress || 0} className=\"w-full\" />\n                    </div>\n\n                    <div className=\"flex gap-2 mt-4\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => updateGoalMutation.mutate({ \n                          id: goal.id, \n                          progress: Math.min((goal.progress || 0) + 10, 100) \n                        })}\n                        disabled={updateGoalMutation.isPending}\n                        className=\"flex-1\"\n                        data-testid={`button-progress-${goal.id}`}\n                      >\n                        +10%\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </TabsContent>\n\n        {/* Analytics Tab */}\n        <TabsContent value=\"analytics\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <BarChart3 className=\"h-5 w-5\" />\n                Analytics & Insights\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center py-12\">\n                <BarChart3 className=\"h-12 w-12 mx-auto text-gray-400 mb-2\" />\n                <p className=\"text-gray-600 dark:text-gray-400\">Advanced analytics coming soon</p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":42553},"client/src/pages/todos.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { \n  Plus, CheckSquare, Clock, Calendar, AlertCircle, Flame,\n  Filter, Search, MoreHorizontal, Edit, Trash2, \n  CheckCircle2, Circle, Clock3, XCircle, Star, \n  Target, ArrowUp, ArrowDown, ArrowRight, ArrowLeft\n} from \"lucide-react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { format, isToday, isPast, isTomorrow } from \"date-fns\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Todo, TodoCategory, InsertTodo, InsertTodoCategory } from \"@shared/schema\";\n\nconst todoFormSchema = z.object({\n  categoryId: z.string().min(1, \"Category is required\"),\n  title: z.string().min(1, \"Title is required\"),\n  description: z.string().optional(),\n  priority: z.enum([\"low\", \"medium\", \"high\", \"urgent\"]),\n  isUrgent: z.boolean().default(false),\n  isImportant: z.boolean().default(false),\n  priorityScore: z.number().min(1).max(5).default(3),\n  dueDate: z.string().optional(),\n  dueTime: z.string().optional(),\n  estimatedMinutes: z.number().optional(),\n  tags: z.array(z.string()).optional(),\n  notes: z.string().optional()\n});\n\nconst categoryFormSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  description: z.string().optional(),\n  color: z.string().default(\"#3B82F6\"),\n  icon: z.string().default(\"📝\")\n});\n\ntype TodoFormData = z.infer<typeof todoFormSchema>;\ntype CategoryFormData = z.infer<typeof categoryFormSchema>;\n\nexport default function TodoPage() {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [isCategoryDialogOpen, setIsCategoryDialogOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const { toast } = useToast();\n\n  const { data: categories = [], isLoading: categoriesLoading } = useQuery<TodoCategory[]>({\n    queryKey: [\"/api/todo-categories\"],\n  });\n\n  const { data: todos = [], isLoading: todosLoading } = useQuery<Todo[]>({\n    queryKey: [\"/api/todos\"],\n  });\n\n  const todoForm = useForm<TodoFormData>({\n    resolver: zodResolver(todoFormSchema),\n    defaultValues: {\n      categoryId: \"\",\n      title: \"\",\n      description: \"\",\n      priority: \"medium\",\n      isUrgent: false,\n      isImportant: false,\n      priorityScore: 3,\n      dueDate: \"\",\n      dueTime: \"\",\n      estimatedMinutes: undefined,\n      tags: [],\n      notes: \"\"\n    }\n  });\n\n  const categoryForm = useForm<CategoryFormData>({\n    resolver: zodResolver(categoryFormSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      color: \"#3B82F6\",\n      icon: \"📝\"\n    }\n  });\n\n  const createTodoMutation = useMutation({\n    mutationFn: (data: TodoFormData) => apiRequest(\"/api/todos\", \"POST\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/todos\"] });\n      setIsDialogOpen(false);\n      todoForm.reset();\n      toast({\n        title: \"Success\",\n        description: \"Todo created successfully!\"\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create todo\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const createCategoryMutation = useMutation({\n    mutationFn: (data: CategoryFormData) => apiRequest(\"/api/todo-categories\", \"POST\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/todo-categories\"] });\n      setIsCategoryDialogOpen(false);\n      categoryForm.reset();\n      toast({\n        title: \"Success\",\n        description: \"Category created successfully!\"\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create category\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const updateTodoMutation = useMutation({\n    mutationFn: ({ id, ...data }: { id: string } & Partial<Todo>) => \n      apiRequest(`/api/todos/${id}`, \"PUT\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/todos\"] });\n      toast({\n        title: \"Success\",\n        description: \"Todo updated successfully!\"\n      });\n    }\n  });\n\n  const deleteTodoMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(`/api/todos/${id}`, \"DELETE\"),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/todos\"] });\n      toast({\n        title: \"Success\",\n        description: \"Todo deleted successfully!\"\n      });\n    }\n  });\n\n  const deleteCategoryMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(`/api/todo-categories/${id}`, \"DELETE\"),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/todo-categories\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/todos\"] });\n      toast({\n        title: \"Success\",\n        description: \"Category deleted successfully!\"\n      });\n    }\n  });\n\n  // Filter todos based on search query\n  const filteredTodos = todos.filter(todo => \n    !searchQuery || \n    todo.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    (todo.description && todo.description.toLowerCase().includes(searchQuery.toLowerCase()))\n  );\n\n  // Eisenhower Matrix quadrants\n  const urgentImportant = filteredTodos.filter(todo => todo.isUrgent && todo.isImportant && todo.status !== \"completed\");\n  const notUrgentImportant = filteredTodos.filter(todo => !todo.isUrgent && todo.isImportant && todo.status !== \"completed\");\n  const urgentNotImportant = filteredTodos.filter(todo => todo.isUrgent && !todo.isImportant && todo.status !== \"completed\");\n  const notUrgentNotImportant = filteredTodos.filter(todo => !todo.isUrgent && !todo.isImportant && todo.status !== \"completed\");\n\n  // Most essential tasks (urgent & important with highest priority scores, plus overdue items)\n  const essentialTasks = filteredTodos\n    .filter(todo => todo.status !== \"completed\")\n    .filter(todo => \n      (todo.isUrgent && todo.isImportant) || \n      (todo.dueDate && isPast(new Date(todo.dueDate))) ||\n      (todo.priorityScore && todo.priorityScore >= 4)\n    )\n    .sort((a, b) => {\n      // Sort by urgency/importance first, then priority score, then due date\n      if (a.isUrgent && a.isImportant && !(b.isUrgent && b.isImportant)) return -1;\n      if (b.isUrgent && b.isImportant && !(a.isUrgent && a.isImportant)) return 1;\n      \n      const aScore = a.priorityScore || 3;\n      const bScore = b.priorityScore || 3;\n      if (aScore !== bScore) return bScore - aScore;\n      \n      if (a.dueDate && b.dueDate) return a.dueDate.localeCompare(b.dueDate);\n      if (a.dueDate) return -1;\n      if (b.dueDate) return 1;\n      \n      return 0;\n    })\n    .slice(0, 8); // Show top 8 essential tasks\n\n  const sortTodosInQuadrant = (todos: Todo[]) => {\n    return todos.sort((a, b) => {\n      const aScore = a.priorityScore || 3;\n      const bScore = b.priorityScore || 3;\n      if (aScore !== bScore) return bScore - aScore;\n      \n      if (a.dueDate && b.dueDate) return a.dueDate.localeCompare(b.dueDate);\n      if (a.dueDate) return -1;\n      if (b.dueDate) return 1;\n      \n      return new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime();\n    });\n  };\n\n  const handleToggleComplete = (todo: Todo) => {\n    updateTodoMutation.mutate({\n      id: todo.id,\n      status: todo.status === \"completed\" ? \"pending\" : \"completed\"\n    });\n  };\n\n  const renderPriorityStars = (score: number) => {\n    return (\n      <div className=\"flex gap-0.5\">\n        {[1, 2, 3, 4, 5].map(i => (\n          <Star \n            key={i} \n            className={`h-3 w-3 ${i <= score ? 'fill-yellow-400 text-yellow-400' : 'text-gray-300'}`} \n          />\n        ))}\n      </div>\n    );\n  };\n\n  const renderTodoCard = (todo: Todo) => {\n    const category = categories.find(c => c.id === todo.categoryId);\n    const isOverdue = todo.dueDate && isPast(new Date(todo.dueDate));\n    const isDueToday = todo.dueDate && isToday(new Date(todo.dueDate));\n    const isDueTomorrow = todo.dueDate && isTomorrow(new Date(todo.dueDate));\n\n    return (\n      <div \n        key={todo.id} \n        className={`p-3 border rounded-lg hover:shadow-sm transition-shadow ${\n          isOverdue ? 'border-red-300 bg-red-50 dark:bg-red-900/10' : \n          isDueToday ? 'border-orange-300 bg-orange-50 dark:bg-orange-900/10' : \n          'border-gray-200 dark:border-gray-700'\n        }`}\n      >\n        <div className=\"flex items-start gap-3\">\n          <button \n            onClick={() => handleToggleComplete(todo)}\n            className=\"mt-0.5 flex-shrink-0\"\n            data-testid={`button-toggle-${todo.id}`}\n          >\n            {todo.status === \"completed\" ? (\n              <CheckCircle2 className=\"h-5 w-5 text-green-600\" />\n            ) : (\n              <Circle className=\"h-5 w-5 text-gray-400 hover:text-gray-600\" />\n            )}\n          </button>\n          \n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-start justify-between\">\n              <h4 className={`font-medium ${todo.status === \"completed\" ? 'line-through text-gray-500' : 'text-gray-900 dark:text-white'}`}>\n                {todo.title}\n              </h4>\n              <div className=\"flex items-center gap-1 ml-2 flex-shrink-0\">\n                {renderPriorityStars(todo.priorityScore || 3)}\n              </div>\n            </div>\n            \n            {todo.description && (\n              <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">{todo.description}</p>\n            )}\n            \n            <div className=\"flex items-center gap-2 mt-2 flex-wrap\">\n              {category && (\n                <Badge variant=\"secondary\" className=\"text-xs\" style={{ color: category.color || '#3B82F6' }}>\n                  {category.icon} {category.name}\n                </Badge>\n              )}\n              \n              {todo.dueDate && (\n                <Badge \n                  variant={isOverdue ? \"destructive\" : isDueToday ? \"default\" : \"outline\"} \n                  className=\"text-xs\"\n                >\n                  <Clock className=\"h-3 w-3 mr-1\" />\n                  {isToday(new Date(todo.dueDate)) ? \"Today\" :\n                   isTomorrow(new Date(todo.dueDate)) ? \"Tomorrow\" :\n                   format(new Date(todo.dueDate), \"MMM dd\")}\n                </Badge>\n              )}\n              \n              {todo.estimatedMinutes && (\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  {todo.estimatedMinutes}min\n                </Badge>\n              )}\n            </div>\n          </div>\n          \n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => deleteTodoMutation.mutate(todo.id)}\n            data-testid={`button-delete-${todo.id}`}\n          >\n            <Trash2 className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n    );\n  };\n\n  const renderQuadrant = (todos: Todo[], title: string, icon: React.ReactNode, description: string) => (\n    <Card className=\"flex-1 min-h-[400px]\">\n      <CardHeader className=\"pb-4\">\n        <CardTitle className=\"flex items-center gap-2 text-lg\">\n          {icon}\n          {title}\n          <Badge variant=\"secondary\" className=\"ml-auto\">\n            {todos.length}\n          </Badge>\n        </CardTitle>\n        <p className=\"text-sm text-gray-600 dark:text-gray-400\">{description}</p>\n      </CardHeader>\n      <CardContent className=\"space-y-3 pt-0\">\n        {sortTodosInQuadrant(todos).map(renderTodoCard)}\n        {todos.length === 0 && (\n          <div className=\"text-center py-8 text-gray-500 dark:text-gray-400\">\n            <CheckCircle2 className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n            <p className=\"text-sm\">No tasks in this quadrant</p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n\n  if (todosLoading || categoriesLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"text-center py-12\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600 dark:text-gray-400\">Loading todos...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\" data-testid=\"todos-page\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">To Do Management</h1>\n          <p className=\"text-gray-600 dark:text-gray-400 mt-1\">\n            Organize tasks using the Eisenhower Matrix for maximum productivity\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Dialog open={isCategoryDialogOpen} onOpenChange={setIsCategoryDialogOpen}>\n            <DialogTrigger asChild>\n              <Button variant=\"outline\" data-testid=\"button-add-category\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Category\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Create New Category</DialogTitle>\n              </DialogHeader>\n              <Form {...categoryForm}>\n                <form onSubmit={categoryForm.handleSubmit((data) => createCategoryMutation.mutate(data))} className=\"space-y-4\">\n                  <FormField\n                    control={categoryForm.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Name</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Work, Personal, etc.\" {...field} data-testid=\"input-category-name\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={categoryForm.control}\n                      name=\"color\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Color</FormLabel>\n                          <FormControl>\n                            <Input type=\"color\" {...field} data-testid=\"input-category-color\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={categoryForm.control}\n                      name=\"icon\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Icon</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"📝\" {...field} data-testid=\"input-category-icon\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={categoryForm.control}\n                    name=\"description\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Description (Optional)</FormLabel>\n                        <FormControl>\n                          <Textarea placeholder=\"Category description...\" {...field} data-testid=\"textarea-category-description\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full\"\n                    disabled={createCategoryMutation.isPending}\n                    data-testid=\"button-submit-category\"\n                  >\n                    {createCategoryMutation.isPending ? \"Creating...\" : \"Create Category\"}\n                  </Button>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n\n          <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-add-todo\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Task\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-md max-h-[80vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>Create New Task</DialogTitle>\n              </DialogHeader>\n              <Form {...todoForm}>\n                <form onSubmit={todoForm.handleSubmit((data) => createTodoMutation.mutate(data))} className=\"space-y-4\">\n                  <FormField\n                    control={todoForm.control}\n                    name=\"title\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Title</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Task title\" {...field} data-testid=\"input-todo-title\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={todoForm.control}\n                    name=\"categoryId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Category</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-todo-category\">\n                              <SelectValue placeholder=\"Select category\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {categories.map((category) => (\n                              <SelectItem key={category.id} value={category.id}>\n                                <span style={{ color: category.color || '#3B82F6' }}>\n                                  {category.icon} {category.name}\n                                </span>\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {/* Eisenhower Matrix Classification */}\n                  <div className=\"space-y-3\">\n                    <h4 className=\"text-sm font-medium\">Eisenhower Matrix Classification</h4>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={todoForm.control}\n                        name=\"isUrgent\"\n                        render={({ field }) => (\n                          <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                            <FormControl>\n                              <Checkbox\n                                checked={field.value}\n                                onCheckedChange={field.onChange}\n                                data-testid=\"checkbox-urgent\"\n                              />\n                            </FormControl>\n                            <div className=\"space-y-1 leading-none\">\n                              <FormLabel>Urgent</FormLabel>\n                              <p className=\"text-xs text-gray-500\">Needs immediate action</p>\n                            </div>\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={todoForm.control}\n                        name=\"isImportant\"\n                        render={({ field }) => (\n                          <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                            <FormControl>\n                              <Checkbox\n                                checked={field.value}\n                                onCheckedChange={field.onChange}\n                                data-testid=\"checkbox-important\"\n                              />\n                            </FormControl>\n                            <div className=\"space-y-1 leading-none\">\n                              <FormLabel>Important</FormLabel>\n                              <p className=\"text-xs text-gray-500\">Significant impact</p>\n                            </div>\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                  </div>\n\n                  <FormField\n                    control={todoForm.control}\n                    name=\"priorityScore\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Priority Score (1-5)</FormLabel>\n                        <Select onValueChange={(value) => field.onChange(Number(value))} defaultValue={String(field.value)}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-priority-score\">\n                              <SelectValue placeholder=\"Select priority score\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {[1, 2, 3, 4, 5].map(num => (\n                              <SelectItem key={num} value={String(num)}>\n                                <div className=\"flex items-center gap-2\">\n                                  <span>{num}</span>\n                                  <div className=\"flex\">\n                                    {[1, 2, 3, 4, 5].map(i => (\n                                      <Star key={i} className={`h-3 w-3 ${i <= num ? 'fill-yellow-400 text-yellow-400' : 'text-gray-300'}`} />\n                                    ))}\n                                  </div>\n                                </div>\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={todoForm.control}\n                      name=\"dueDate\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Due Date</FormLabel>\n                          <FormControl>\n                            <Input type=\"date\" {...field} data-testid=\"input-due-date\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={todoForm.control}\n                      name=\"estimatedMinutes\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Est. Time (min)</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"number\" \n                              placeholder=\"30\"\n                              {...field}\n                              onChange={(e) => field.onChange(e.target.value ? Number(e.target.value) : undefined)}\n                              data-testid=\"input-estimated-minutes\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={todoForm.control}\n                    name=\"description\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Description</FormLabel>\n                        <FormControl>\n                          <Textarea placeholder=\"Task description...\" {...field} data-testid=\"textarea-todo-description\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full\"\n                    disabled={createTodoMutation.isPending}\n                    data-testid=\"button-submit-todo\"\n                  >\n                    {createTodoMutation.isPending ? \"Creating...\" : \"Create Task\"}\n                  </Button>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Search */}\n      <div className=\"flex items-center gap-4\">\n        <div className=\"relative flex-1 max-w-md\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n          <Input\n            placeholder=\"Search tasks...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10\"\n            data-testid=\"input-search\"\n          />\n        </div>\n      </div>\n\n      {/* Essential Overview */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Target className=\"h-5 w-5 text-red-600\" />\n            Most Essential Tasks\n            <Badge variant=\"secondary\">{essentialTasks.length}</Badge>\n          </CardTitle>\n          <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n            High-priority, urgent, important, and overdue tasks that need immediate attention\n          </p>\n        </CardHeader>\n        <CardContent className=\"space-y-3\">\n          {essentialTasks.length > 0 ? (\n            essentialTasks.map(renderTodoCard)\n          ) : (\n            <div className=\"text-center py-8 text-gray-500 dark:text-gray-400\">\n              <CheckCircle2 className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n              <p className=\"text-sm\">No essential tasks at the moment</p>\n              <p className=\"text-xs\">Great job staying on top of things!</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Eisenhower Matrix - 4 Quadrants */}\n      <div className=\"space-y-4\">\n        <h2 className=\"text-2xl font-semibold text-gray-900 dark:text-white\">Eisenhower Matrix</h2>\n        <div className=\"grid gap-4 lg:grid-cols-2\">\n          {/* Quadrant 1: Urgent & Important (Do First) */}\n          {renderQuadrant(\n            urgentImportant,\n            \"Do First\",\n            <Flame className=\"h-5 w-5 text-red-600\" />,\n            \"Crisis situations and urgent deadlines\"\n          )}\n\n          {/* Quadrant 2: Not Urgent & Important (Schedule) */}\n          {renderQuadrant(\n            notUrgentImportant,\n            \"Schedule\",\n            <Calendar className=\"h-5 w-5 text-blue-600\" />,\n            \"Important goals and planning activities\"\n          )}\n\n          {/* Quadrant 3: Urgent & Not Important (Delegate) */}\n          {renderQuadrant(\n            urgentNotImportant,\n            \"Delegate\",\n            <ArrowRight className=\"h-5 w-5 text-orange-600\" />,\n            \"Interruptions and some meetings\"\n          )}\n\n          {/* Quadrant 4: Not Urgent & Not Important (Eliminate) */}\n          {renderQuadrant(\n            notUrgentNotImportant,\n            \"Eliminate\",\n            <XCircle className=\"h-5 w-5 text-gray-600\" />,\n            \"Time wasters and excessive entertainment\"\n          )}\n        </div>\n      </div>\n\n      {/* Categories Section */}\n      <div className=\"space-y-4\">\n        <h2 className=\"text-2xl font-semibold text-gray-900 dark:text-white\">Categories</h2>\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n          {categories.map((category) => {\n            const categoryTodos = filteredTodos.filter(todo => todo.categoryId === category.id);\n            const completedInCategory = categoryTodos.filter(todo => todo.status === \"completed\").length;\n            const pendingInCategory = categoryTodos.filter(todo => todo.status !== \"completed\").length;\n            \n            return (\n              <Card key={category.id}>\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <span style={{ color: category.color || '#3B82F6' }}>{category.icon}</span>\n                      {category.name}\n                    </CardTitle>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => deleteCategoryMutation.mutate(category.id)}\n                      data-testid={`button-delete-category-${category.id}`}\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                  {category.description && (\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">{category.description}</p>\n                  )}\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    <div className=\"text-center p-2 bg-gray-50 dark:bg-gray-800 rounded\">\n                      <div className=\"font-semibold text-gray-900 dark:text-white\">{pendingInCategory}</div>\n                      <div className=\"text-xs text-gray-600 dark:text-gray-400\">Pending</div>\n                    </div>\n                    <div className=\"text-center p-2 bg-green-50 dark:bg-green-900/20 rounded\">\n                      <div className=\"font-semibold text-green-600\">{completedInCategory}</div>\n                      <div className=\"text-xs text-gray-600 dark:text-gray-400\">Completed</div>\n                    </div>\n                  </div>\n                  \n                  {pendingInCategory > 0 && (\n                    <div className=\"space-y-2 max-h-48 overflow-y-auto\">\n                      {categoryTodos\n                        .filter(todo => todo.status !== \"completed\")\n                        .slice(0, 5)\n                        .map(renderTodoCard)\n                      }\n                      {pendingInCategory > 5 && (\n                        <p className=\"text-xs text-gray-500 text-center py-2\">\n                          +{pendingInCategory - 5} more tasks\n                        </p>\n                      )}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":31629},"client/src/pages/watchlist.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { \n  Play, \n  Plus, \n  Download,\n  CheckCircle2,\n  Clock,\n  Calendar,\n  Trash2,\n  Edit,\n  Link as LinkIcon,\n  Star,\n  Filter\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\nexport default function WatchlistPage() {\n  const { toast } = useToast();\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [editingItem, setEditingItem] = useState<any>(null);\n  const [filterStatus, setFilterStatus] = useState<string>(\"all\");\n  const [filterType, setFilterType] = useState<string>(\"all\");\n  const [newItem, setNewItem] = useState({\n    title: \"\",\n    type: \"movie\",\n    source: \"\",\n    link: \"\",\n    length: \"\",\n    notes: \"\"\n  });\n\n  const { data: watchlistItems = [] } = useQuery({\n    queryKey: ['/api/watchlist'],\n    queryFn: () => fetch('/api/watchlist').then(res => res.json())\n  });\n\n  // Mutations\n  const addItemMutation = useMutation({\n    mutationFn: (data: any) => apiRequest(\"POST\", \"/api/watchlist\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/watchlist'] });\n      setIsAddDialogOpen(false);\n      resetNewItem();\n      toast({ title: \"Item added!\", description: \"Added to your watchlist.\" });\n    }\n  });\n\n  const updateItemMutation = useMutation({\n    mutationFn: (data: { id: string; updates: any }) => \n      apiRequest(\"PUT\", `/api/watchlist/${data.id}`, data.updates),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/watchlist'] });\n      setEditingItem(null);\n      toast({ title: \"Item updated!\", description: \"Watchlist item updated successfully.\" });\n    }\n  });\n\n  const deleteItemMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/watchlist/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/watchlist'] });\n      toast({ title: \"Item deleted\", description: \"Removed from your watchlist.\" });\n    }\n  });\n\n  const resetNewItem = () => {\n    setNewItem({\n      title: \"\",\n      type: \"movie\",\n      source: \"\",\n      link: \"\",\n      length: \"\",\n      notes: \"\"\n    });\n  };\n\n  const handleMarkDone = (item: any) => {\n    updateItemMutation.mutate({\n      id: item.id,\n      updates: { status: \"Done\" }\n    });\n  };\n\n  const handleStatusChange = (item: any, newStatus: string) => {\n    updateItemMutation.mutate({\n      id: item.id,\n      updates: { status: newStatus }\n    });\n  };\n\n  // Calculate stats\n  const stats = {\n    total: watchlistItems.length,\n    toWatch: watchlistItems.filter((item: any) => item.status === \"To Watch\").length,\n    inProgress: watchlistItems.filter((item: any) => item.status === \"In Progress\").length,\n    done: watchlistItems.filter((item: any) => item.status === \"Done\").length,\n    thisWeek: watchlistItems.filter((item: any) => {\n      if (!item.finishedAt) return false;\n      const finishedDate = new Date(item.finishedAt);\n      const weekAgo = new Date();\n      weekAgo.setDate(weekAgo.getDate() - 7);\n      return finishedDate >= weekAgo;\n    }).length\n  };\n\n  // Calculate streak (consecutive days with completed items)\n  const calculateStreak = () => {\n    const completedItems = watchlistItems\n      .filter((item: any) => item.finishedAt)\n      .sort((a: any, b: any) => new Date(b.finishedAt).getTime() - new Date(a.finishedAt).getTime());\n\n    if (completedItems.length === 0) return 0;\n\n    let streak = 0;\n    let currentDate = new Date();\n    currentDate.setHours(0, 0, 0, 0);\n\n    for (let i = 0; i < completedItems.length; i++) {\n      const itemDate = new Date(completedItems[i].finishedAt);\n      itemDate.setHours(0, 0, 0, 0);\n      \n      const daysDiff = Math.floor((currentDate.getTime() - itemDate.getTime()) / (1000 * 60 * 60 * 24));\n      \n      if (daysDiff === streak) {\n        streak++;\n      } else if (daysDiff === streak + 1) {\n        streak++;\n      } else {\n        break;\n      }\n    }\n\n    return streak;\n  };\n\n  const streak = calculateStreak();\n\n  // Filter items\n  const filteredItems = watchlistItems.filter((item: any) => {\n    if (filterStatus !== \"all\" && item.status !== filterStatus) return false;\n    if (filterType !== \"all\" && item.type !== filterType) return false;\n    return true;\n  });\n\n  // Get suggestions (random 3-5 items from \"To Watch\")\n  const suggestions = watchlistItems\n    .filter((item: any) => item.status === \"To Watch\")\n    .sort(() => Math.random() - 0.5)\n    .slice(0, Math.min(5, Math.max(3, Math.floor(watchlistItems.length / 4))));\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"To Watch\": return \"bg-blue-100 text-blue-800\";\n      case \"In Progress\": return \"bg-yellow-100 text-yellow-800\";\n      case \"Done\": return \"bg-green-100 text-green-800\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case \"movie\": return \"🎬\";\n      case \"show\": return \"📺\";\n      case \"podcast\": return \"🎧\";\n      case \"other\": return \"📱\";\n      default: return \"📝\";\n    }\n  };\n\n  const handleExport = async () => {\n    try {\n      const response = await fetch('/api/watchlist/export');\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = 'watchlist-data.csv';\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      window.URL.revokeObjectURL(url);\n      toast({ title: \"Export complete!\", description: \"Watchlist exported to CSV.\" });\n    } catch (error) {\n      toast({ title: \"Export failed\", description: \"Could not export watchlist data.\", variant: \"destructive\" });\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 max-w-6xl space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-3\">\n          <Play className=\"h-8 w-8 text-green-600\" />\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">Watchlist</h1>\n            <p className=\"text-gray-600\">Organize and track your entertainment</p>\n          </div>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" onClick={handleExport} data-testid=\"export-watchlist\">\n            <Download className=\"h-4 w-4 mr-2\" />\n            Export CSV\n          </Button>\n          <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"add-item-button\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Item\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-md\">\n              <DialogHeader>\n                <DialogTitle>Add to Watchlist</DialogTitle>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <div>\n                  <Label>Title *</Label>\n                  <Input \n                    value={newItem.title}\n                    onChange={(e) => setNewItem({...newItem, title: e.target.value})}\n                    placeholder=\"Enter title\"\n                    data-testid=\"input-title\"\n                  />\n                </div>\n                <div>\n                  <Label>Type *</Label>\n                  <Select value={newItem.type} onValueChange={(value) => setNewItem({...newItem, type: value})}>\n                    <SelectTrigger data-testid=\"select-type\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"movie\">Movie</SelectItem>\n                      <SelectItem value=\"show\">TV Show</SelectItem>\n                      <SelectItem value=\"podcast\">Podcast</SelectItem>\n                      <SelectItem value=\"other\">Other</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label>Source/Platform</Label>\n                  <Input \n                    value={newItem.source}\n                    onChange={(e) => setNewItem({...newItem, source: e.target.value})}\n                    placeholder=\"Netflix, YouTube, etc.\"\n                    data-testid=\"input-source\"\n                  />\n                </div>\n                <div>\n                  <Label>Link</Label>\n                  <Input \n                    value={newItem.link}\n                    onChange={(e) => setNewItem({...newItem, link: e.target.value})}\n                    placeholder=\"URL (optional)\"\n                    data-testid=\"input-link\"\n                  />\n                </div>\n                <div>\n                  <Label>Runtime (minutes)</Label>\n                  <Input \n                    type=\"number\"\n                    value={newItem.length}\n                    onChange={(e) => setNewItem({...newItem, length: e.target.value})}\n                    placeholder=\"Optional\"\n                    data-testid=\"input-length\"\n                  />\n                </div>\n                <div>\n                  <Label>Notes</Label>\n                  <Textarea \n                    value={newItem.notes}\n                    onChange={(e) => setNewItem({...newItem, notes: e.target.value})}\n                    placeholder=\"Optional notes\"\n                    data-testid=\"input-notes\"\n                  />\n                </div>\n                <Button \n                  onClick={() => addItemMutation.mutate({\n                    ...newItem,\n                    length: newItem.length ? parseInt(newItem.length) : null\n                  })}\n                  disabled={!newItem.title || !newItem.type || addItemMutation.isPending}\n                  className=\"w-full\"\n                  data-testid=\"save-item\"\n                >\n                  {addItemMutation.isPending ? \"Adding...\" : \"Add to Watchlist\"}\n                </Button>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Stats */}\n      <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4\">\n        <Card>\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-2xl font-bold text-blue-600\">{stats.total}</div>\n            <div className=\"text-sm text-gray-600\">Total Items</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-2xl font-bold text-yellow-600\">{stats.toWatch}</div>\n            <div className=\"text-sm text-gray-600\">To Watch</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-2xl font-bold text-orange-600\">{stats.inProgress}</div>\n            <div className=\"text-sm text-gray-600\">In Progress</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-2xl font-bold text-green-600\">{stats.done}</div>\n            <div className=\"text-sm text-gray-600\">Completed</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-2xl font-bold text-purple-600\">{stats.thisWeek}</div>\n            <div className=\"text-sm text-gray-600\">This Week</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Suggestions */}\n      {suggestions.length > 0 && (\n        <Card className=\"border-green-200 bg-green-50\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Star className=\"h-5 w-5 text-green-600\" />\n              Suggested for You\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {suggestions.slice(0, 3).map((item: any) => (\n                <div key={item.id} className=\"p-3 bg-white rounded-lg border\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"font-medium\">{getTypeIcon(item.type)} {item.title}</div>\n                      {item.source && (\n                        <div className=\"text-sm text-gray-600 mt-1\">{item.source}</div>\n                      )}\n                      {item.length && (\n                        <div className=\"text-sm text-gray-600\">{item.length} min</div>\n                      )}\n                    </div>\n                    <Button \n                      size=\"sm\" \n                      onClick={() => handleMarkDone(item)}\n                      disabled={updateItemMutation.isPending}\n                      data-testid={`mark-done-${item.id}`}\n                    >\n                      <CheckCircle2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Filter className=\"h-5 w-5\" />\n            Filters\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex gap-4\">\n            <div>\n              <Label>Status</Label>\n              <Select value={filterStatus} onValueChange={setFilterStatus}>\n                <SelectTrigger className=\"w-32\" data-testid=\"filter-status\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All</SelectItem>\n                  <SelectItem value=\"To Watch\">To Watch</SelectItem>\n                  <SelectItem value=\"In Progress\">In Progress</SelectItem>\n                  <SelectItem value=\"Done\">Done</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label>Type</Label>\n              <Select value={filterType} onValueChange={setFilterType}>\n                <SelectTrigger className=\"w-32\" data-testid=\"filter-type\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All</SelectItem>\n                  <SelectItem value=\"movie\">Movies</SelectItem>\n                  <SelectItem value=\"show\">TV Shows</SelectItem>\n                  <SelectItem value=\"podcast\">Podcasts</SelectItem>\n                  <SelectItem value=\"other\">Other</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Watchlist Items */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Your Watchlist ({filteredItems.length} items)</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {filteredItems.length > 0 ? (\n            <div className=\"space-y-3\">\n              {filteredItems.map((item: any) => (\n                <div key={item.id} className=\"flex items-center gap-4 p-4 bg-gray-50 rounded-lg\">\n                  <div className=\"text-2xl\">{getTypeIcon(item.type)}</div>\n                  \n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-2 mb-1\">\n                      <span className=\"font-medium\">{item.title}</span>\n                      <Badge className={getStatusColor(item.status)}>\n                        {item.status}\n                      </Badge>\n                    </div>\n                    \n                    <div className=\"flex items-center gap-4 text-sm text-gray-600\">\n                      {item.source && <span>{item.source}</span>}\n                      {item.length && <span>{item.length} min</span>}\n                      {item.link && (\n                        <a \n                          href={item.link} \n                          target=\"_blank\" \n                          rel=\"noopener noreferrer\"\n                          className=\"flex items-center gap-1 text-blue-600 hover:underline\"\n                        >\n                          <LinkIcon className=\"h-3 w-3\" />\n                          Link\n                        </a>\n                      )}\n                    </div>\n                    \n                    {item.notes && (\n                      <div className=\"text-sm text-gray-600 mt-1\">{item.notes}</div>\n                    )}\n                    \n                    {item.finishedAt && (\n                      <div className=\"text-xs text-gray-500 mt-1\">\n                        Completed on {new Date(item.finishedAt).toLocaleDateString()}\n                      </div>\n                    )}\n                  </div>\n                  \n                  <div className=\"flex items-center gap-2\">\n                    {item.status !== \"Done\" && (\n                      <div className=\"flex gap-1\">\n                        {item.status === \"To Watch\" && (\n                          <Button \n                            size=\"sm\" \n                            variant=\"outline\"\n                            onClick={() => handleStatusChange(item, \"In Progress\")}\n                            data-testid={`start-${item.id}`}\n                          >\n                            Start\n                          </Button>\n                        )}\n                        <Button \n                          size=\"sm\"\n                          onClick={() => handleMarkDone(item)}\n                          disabled={updateItemMutation.isPending}\n                          data-testid={`mark-done-${item.id}`}\n                        >\n                          <CheckCircle2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    )}\n                    \n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => setEditingItem(item)}\n                      data-testid={`edit-${item.id}`}\n                    >\n                      <Edit className=\"h-4 w-4\" />\n                    </Button>\n                    \n                    <Button\n                      size=\"sm\"\n                      variant=\"destructive\"\n                      onClick={() => deleteItemMutation.mutate(item.id)}\n                      disabled={deleteItemMutation.isPending}\n                      data-testid={`delete-${item.id}`}\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-8 text-gray-500\">\n              <Play className=\"h-12 w-12 mx-auto mb-4 opacity-30\" />\n              <p>No items found</p>\n              <p className=\"text-sm\">\n                {watchlistItems.length === 0 \n                  ? \"Add your first movie, show, or podcast to get started\"\n                  : \"Try adjusting your filters\"\n                }\n              </p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Edit Dialog */}\n      <Dialog open={!!editingItem} onOpenChange={() => setEditingItem(null)}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Edit Item</DialogTitle>\n          </DialogHeader>\n          {editingItem && (\n            <div className=\"space-y-4\">\n              <div>\n                <Label>Title</Label>\n                <Input \n                  value={editingItem.title}\n                  onChange={(e) => setEditingItem({...editingItem, title: e.target.value})}\n                  data-testid=\"edit-title\"\n                />\n              </div>\n              <div>\n                <Label>Status</Label>\n                <Select value={editingItem.status} onValueChange={(value) => setEditingItem({...editingItem, status: value})}>\n                  <SelectTrigger data-testid=\"edit-status\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"To Watch\">To Watch</SelectItem>\n                    <SelectItem value=\"In Progress\">In Progress</SelectItem>\n                    <SelectItem value=\"Done\">Done</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label>Source/Platform</Label>\n                <Input \n                  value={editingItem.source || \"\"}\n                  onChange={(e) => setEditingItem({...editingItem, source: e.target.value})}\n                  data-testid=\"edit-source\"\n                />\n              </div>\n              <div>\n                <Label>Notes</Label>\n                <Textarea \n                  value={editingItem.notes || \"\"}\n                  onChange={(e) => setEditingItem({...editingItem, notes: e.target.value})}\n                  data-testid=\"edit-notes\"\n                />\n              </div>\n              <Button \n                onClick={() => updateItemMutation.mutate({\n                  id: editingItem.id,\n                  updates: editingItem\n                })}\n                disabled={updateItemMutation.isPending}\n                className=\"w-full\"\n                data-testid=\"save-edit\"\n              >\n                {updateItemMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n              </Button>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":22242},"client/src/pages/weekly-plan.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Plus, Calendar, Target, CheckCircle2, Circle, \n  Star, Clock, ArrowLeft, ArrowRight, Edit\n} from \"lucide-react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { format, startOfWeek, addWeeks, subWeeks } from \"date-fns\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { WeeklyPlan, InsertWeeklyPlan } from \"@shared/schema\";\n\nconst weeklyPlanFormSchema = z.object({\n  title: z.string().min(1, \"Title is required\"),\n  goals: z.array(z.object({\n    id: z.string(),\n    text: z.string().min(1, \"Goal text is required\"),\n    completed: z.boolean().default(false),\n    category: z.string().min(1, \"Category is required\")\n  })).optional(),\n  priorities: z.array(z.object({\n    id: z.string(),\n    text: z.string().min(1, \"Priority text is required\"),\n    category: z.string().min(1, \"Category is required\"),\n    completed: z.boolean().default(false)\n  })).optional(),\n  notes: z.string().optional(),\n  reflection: z.string().optional()\n});\n\ntype WeeklyPlanFormData = z.infer<typeof weeklyPlanFormSchema>;\n\nexport default function WeeklyPlanPage() {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [selectedWeek, setSelectedWeek] = useState(new Date());\n  const [newGoal, setNewGoal] = useState(\"\");\n  const [newGoalCategory, setNewGoalCategory] = useState(\"\");\n  const [newPriority, setNewPriority] = useState(\"\");\n  const [newPriorityCategory, setNewPriorityCategory] = useState(\"\");\n  const { toast } = useToast();\n\n  const weekStartDate = format(startOfWeek(selectedWeek, { weekStartsOn: 1 }), \"yyyy-MM-dd\");\n\n  const { data: weeklyPlan, isLoading } = useQuery({\n    queryKey: [\"/api/weekly-plans\", { weekStartDate }],\n    queryFn: () => apiRequest(`/api/weekly-plans?weekStartDate=${weekStartDate}`, \"GET\")\n  });\n\n  const { data: allPlans = [] } = useQuery({\n    queryKey: [\"/api/weekly-plans\"],\n  });\n\n  const form = useForm<WeeklyPlanFormData>({\n    resolver: zodResolver(weeklyPlanFormSchema),\n    defaultValues: {\n      title: `Week of ${format(startOfWeek(selectedWeek, { weekStartsOn: 1 }), \"MMM dd, yyyy\")}`,\n      goals: [],\n      priorities: [],\n      notes: \"\",\n      reflection: \"\"\n    }\n  });\n\n  const createPlanMutation = useMutation({\n    mutationFn: (data: WeeklyPlanFormData) => \n      apiRequest(\"/api/weekly-plans\", \"POST\", {\n        ...data,\n        weekStartDate\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/weekly-plans\"] });\n      setIsDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Weekly plan created successfully!\"\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create weekly plan\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const updatePlanMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<WeeklyPlan> }) =>\n      apiRequest(`/api/weekly-plans/${id}`, \"PUT\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/weekly-plans\"] });\n      toast({\n        title: \"Success\",\n        description: \"Weekly plan updated!\"\n      });\n    }\n  });\n\n  const onSubmit = (data: WeeklyPlanFormData) => {\n    createPlanMutation.mutate(data);\n  };\n\n  const addGoal = () => {\n    if (!newGoal || !newGoalCategory) return;\n    \n    const currentGoals = form.getValues(\"goals\") || [];\n    const newGoalItem = {\n      id: Math.random().toString(36).substr(2, 9),\n      text: newGoal,\n      completed: false,\n      category: newGoalCategory\n    };\n    \n    form.setValue(\"goals\", [...currentGoals, newGoalItem]);\n    setNewGoal(\"\");\n    setNewGoalCategory(\"\");\n  };\n\n  const addPriority = () => {\n    if (!newPriority || !newPriorityCategory) return;\n    \n    const currentPriorities = form.getValues(\"priorities\") || [];\n    const newPriorityItem = {\n      id: Math.random().toString(36).substr(2, 9),\n      text: newPriority,\n      category: newPriorityCategory,\n      completed: false\n    };\n    \n    form.setValue(\"priorities\", [...currentPriorities, newPriorityItem]);\n    setNewPriority(\"\");\n    setNewPriorityCategory(\"\");\n  };\n\n  const toggleGoal = (goalId: string) => {\n    if (!weeklyPlan) return;\n    \n    const updatedGoals = (weeklyPlan.goals || []).map((goal: any) => \n      goal.id === goalId ? { ...goal, completed: !goal.completed } : goal\n    );\n    \n    updatePlanMutation.mutate({\n      id: weeklyPlan.id,\n      data: { goals: updatedGoals }\n    });\n  };\n\n  const togglePriority = (priorityId: string) => {\n    if (!weeklyPlan) return;\n    \n    const updatedPriorities = (weeklyPlan.priorities || []).map((priority: any) => \n      priority.id === priorityId ? { ...priority, completed: !priority.completed } : priority\n    );\n    \n    updatePlanMutation.mutate({\n      id: weeklyPlan.id,\n      data: { priorities: updatedPriorities }\n    });\n  };\n\n  const navigateWeek = (direction: \"prev\" | \"next\") => {\n    setSelectedWeek(prev => direction === \"prev\" ? subWeeks(prev, 1) : addWeeks(prev, 1));\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-gray-200 dark:bg-gray-700 rounded w-1/4 mb-6\"></div>\n          <div className=\"grid gap-4\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"h-32 bg-gray-200 dark:bg-gray-700 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\" data-testid=\"weekly-plan-page\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">Weekly Planning</h1>\n          <p className=\"text-gray-600 dark:text-gray-400 mt-1\">\n            Plan your week with goals and priorities\n          </p>\n        </div>\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-create-plan\">\n              <Plus className=\"mr-2 h-4 w-4\" />\n              Create Plan\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Create Weekly Plan</DialogTitle>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"title\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Plan Title</FormLabel>\n                      <FormControl>\n                        <Input {...field} data-testid=\"input-plan-title\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"space-y-4\">\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                      Weekly Goals\n                    </label>\n                    <div className=\"mt-2 space-y-2\">\n                      <div className=\"flex gap-2\">\n                        <Input\n                          placeholder=\"Add a goal...\"\n                          value={newGoal}\n                          onChange={(e) => setNewGoal(e.target.value)}\n                          data-testid=\"input-new-goal\"\n                        />\n                        <Input\n                          placeholder=\"Category\"\n                          value={newGoalCategory}\n                          onChange={(e) => setNewGoalCategory(e.target.value)}\n                          className=\"w-32\"\n                          data-testid=\"input-goal-category\"\n                        />\n                        <Button \n                          type=\"button\" \n                          onClick={addGoal}\n                          data-testid=\"button-add-goal\"\n                        >\n                          <Plus className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                      <div className=\"space-y-1\">\n                        {(form.watch(\"goals\") || []).map((goal, index) => (\n                          <div key={goal.id} className=\"flex items-center gap-2 p-2 bg-gray-50 dark:bg-gray-800 rounded\">\n                            <Badge variant=\"outline\">{goal.category}</Badge>\n                            <span className=\"flex-1\">{goal.text}</span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                      Weekly Priorities\n                    </label>\n                    <div className=\"mt-2 space-y-2\">\n                      <div className=\"flex gap-2\">\n                        <Input\n                          placeholder=\"Add a priority...\"\n                          value={newPriority}\n                          onChange={(e) => setNewPriority(e.target.value)}\n                          data-testid=\"input-new-priority\"\n                        />\n                        <Input\n                          placeholder=\"Category\"\n                          value={newPriorityCategory}\n                          onChange={(e) => setNewPriorityCategory(e.target.value)}\n                          className=\"w-32\"\n                          data-testid=\"input-priority-category\"\n                        />\n                        <Button \n                          type=\"button\" \n                          onClick={addPriority}\n                          data-testid=\"button-add-priority\"\n                        >\n                          <Plus className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                      <div className=\"space-y-1\">\n                        {(form.watch(\"priorities\") || []).map((priority, index) => (\n                          <div key={priority.id} className=\"flex items-center gap-2 p-2 bg-gray-50 dark:bg-gray-800 rounded\">\n                            <Badge variant=\"outline\">{priority.category}</Badge>\n                            <span className=\"flex-1\">{priority.text}</span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"notes\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Notes</FormLabel>\n                      <FormControl>\n                        <Textarea placeholder=\"Additional notes...\" {...field} data-testid=\"textarea-notes\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\" \n                  disabled={createPlanMutation.isPending}\n                  data-testid=\"button-submit-plan\"\n                >\n                  {createPlanMutation.isPending ? \"Creating...\" : \"Create Weekly Plan\"}\n                </Button>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Week Navigation */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center justify-between\">\n            <Button \n              variant=\"outline\" \n              onClick={() => navigateWeek(\"prev\")}\n              data-testid=\"button-prev-week\"\n            >\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Previous Week\n            </Button>\n            \n            <div className=\"text-center\">\n              <h2 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                Week of {format(startOfWeek(selectedWeek, { weekStartsOn: 1 }), \"MMM dd, yyyy\")}\n              </h2>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                {format(startOfWeek(selectedWeek, { weekStartsOn: 1 }), \"MMM dd\")} - {format(new Date(startOfWeek(selectedWeek, { weekStartsOn: 1 }).getTime() + 6 * 24 * 60 * 60 * 1000), \"MMM dd\")}\n              </p>\n            </div>\n            \n            <Button \n              variant=\"outline\" \n              onClick={() => navigateWeek(\"next\")}\n              data-testid=\"button-next-week\"\n            >\n              Next Week\n              <ArrowRight className=\"h-4 w-4 ml-2\" />\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Current Week Plan */}\n      {weeklyPlan ? (\n        <div className=\"space-y-6\">\n          {/* Plan Overview */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Calendar className=\"h-5 w-5\" />\n                {weeklyPlan.title}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {weeklyPlan.notes && (\n                <p className=\"text-gray-600 dark:text-gray-400\">{weeklyPlan.notes}</p>\n              )}\n              \n              <div className=\"grid gap-4 md:grid-cols-2 mt-4\">\n                <div>\n                  <h3 className=\"font-medium text-gray-900 dark:text-white mb-2\">Progress</h3>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span>Goals Completed</span>\n                      <span>{(weeklyPlan.goals || []).filter((g: any) => g.completed).length} / {(weeklyPlan.goals || []).length}</span>\n                    </div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span>Priorities Completed</span>\n                      <span>{(weeklyPlan.priorities || []).filter((p: any) => p.completed).length} / {(weeklyPlan.priorities || []).length}</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Goals and Priorities */}\n          <div className=\"grid gap-6 md:grid-cols-2\">\n            {/* Goals */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Target className=\"h-5 w-5\" />\n                  Weekly Goals\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {!weeklyPlan.goals || weeklyPlan.goals.length === 0 ? (\n                  <p className=\"text-gray-500 dark:text-gray-400\">No goals set for this week</p>\n                ) : (\n                  <div className=\"space-y-3\">\n                    {weeklyPlan.goals.map((goal: any) => (\n                      <div \n                        key={goal.id}\n                        className=\"flex items-center gap-3 p-3 border rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors\"\n                      >\n                        <button \n                          onClick={() => toggleGoal(goal.id)}\n                          data-testid={`button-toggle-goal-${goal.id}`}\n                        >\n                          {goal.completed ? (\n                            <CheckCircle2 className=\"h-5 w-5 text-green-600\" />\n                          ) : (\n                            <Circle className=\"h-5 w-5 text-gray-400\" />\n                          )}\n                        </button>\n                        <div className=\"flex-1\">\n                          <p className={`${goal.completed ? \"line-through text-gray-500\" : \"text-gray-900 dark:text-white\"}`}>\n                            {goal.text}\n                          </p>\n                          <Badge variant=\"outline\" className=\"text-xs mt-1\">\n                            {goal.category}\n                          </Badge>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Priorities */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Star className=\"h-5 w-5\" />\n                  Weekly Priorities\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {!weeklyPlan.priorities || weeklyPlan.priorities.length === 0 ? (\n                  <p className=\"text-gray-500 dark:text-gray-400\">No priorities set for this week</p>\n                ) : (\n                  <div className=\"space-y-3\">\n                    {weeklyPlan.priorities.map((priority: any) => (\n                      <div \n                        key={priority.id}\n                        className=\"flex items-center gap-3 p-3 border rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors\"\n                      >\n                        <button \n                          onClick={() => togglePriority(priority.id)}\n                          data-testid={`button-toggle-priority-${priority.id}`}\n                        >\n                          {priority.completed ? (\n                            <CheckCircle2 className=\"h-5 w-5 text-green-600\" />\n                          ) : (\n                            <Circle className=\"h-5 w-5 text-gray-400\" />\n                          )}\n                        </button>\n                        <div className=\"flex-1\">\n                          <p className={`${priority.completed ? \"line-through text-gray-500\" : \"text-gray-900 dark:text-white\"}`}>\n                            {priority.text}\n                          </p>\n                          <Badge variant=\"outline\" className=\"text-xs mt-1\">\n                            {priority.category}\n                          </Badge>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Reflection */}\n          {weeklyPlan.reflection && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Weekly Reflection</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-600 dark:text-gray-400\">{weeklyPlan.reflection}</p>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      ) : (\n        <Card>\n          <CardContent className=\"p-8 text-center\">\n            <Calendar className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">\n              No plan for this week\n            </h3>\n            <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\n              Create a weekly plan to set goals and priorities for this week.\n            </p>\n            <Button onClick={() => setIsDialogOpen(true)} data-testid=\"button-create-first-plan\">\n              <Plus className=\"mr-2 h-4 w-4\" />\n              Create Weekly Plan\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Previous Plans */}\n      {allPlans.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Previous Weekly Plans</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {allPlans.slice(0, 5).map((plan: WeeklyPlan) => (\n                <div \n                  key={plan.id}\n                  className=\"flex items-center justify-between p-3 border rounded-lg\"\n                >\n                  <div>\n                    <h4 className=\"font-medium text-gray-900 dark:text-white\">{plan.title}</h4>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                      Week of {format(new Date(plan.weekStartDate), \"MMM dd, yyyy\")}\n                    </p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                      {(plan.goals || []).filter((g: any) => g.completed).length}/{(plan.goals || []).length} goals completed\n                    </p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":21333},"client/src/pages/workout.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Play, \n  Square, \n  Plus, \n  Trash2, \n  Edit,\n  Timer,\n  Dumbbell,\n  History,\n  Download,\n  Settings,\n  ChevronRight,\n  Activity\n} from \"lucide-react\";\nimport { Sidebar } from \"@/components/layout/unified-sidebar\";\nimport type { Exercise, Workout, Set, CardioEntry } from \"@shared/schema\";\n\ninterface WorkoutWithSets extends Workout {\n  sets?: Set[];\n}\n\nconst CARDIO_TYPES = [\n  { id: \"run\", label: \"Run\" },\n  { id: \"ride\", label: \"Bike\" },\n  { id: \"row\", label: \"Row\" },\n  { id: \"swim\", label: \"Swim\" },\n  { id: \"other\", label: \"Other\" }\n];\n\nexport default function WorkoutPage() {\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const [activeWorkout, setActiveWorkout] = useState<string | null>(null);\n  const [selectedExercise, setSelectedExercise] = useState<string>(\"\");\n  const [newWeight, setNewWeight] = useState<string>(\"20\");\n  const [newReps, setNewReps] = useState<string>(\"10\");\n  const [useKg, setUseKg] = useState(true);\n  const [selectedWorkout, setSelectedWorkout] = useState<string | null>(null);\n  \n  // Cardio form states\n  const [cardioType, setCardioType] = useState(\"run\");\n  const [cardioMinutes, setCardioMinutes] = useState<string>(\"30\");\n  const [cardioDistance, setCardioDistance] = useState<string>(\"\");\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch exercises\n  const { data: exercises = [] } = useQuery<Exercise[]>({\n    queryKey: ['/api/exercises']\n  });\n\n  // Fetch workout history\n  const { data: workouts = [] } = useQuery<Workout[]>({\n    queryKey: ['/api/workouts/history']\n  });\n\n  // Get current workout with sets\n  const { data: currentWorkoutData } = useQuery<WorkoutWithSets>({\n    queryKey: ['/api/workouts', activeWorkout],\n    enabled: !!activeWorkout,\n    refetchInterval: 2000 // Refresh every 2 seconds during active workout\n  });\n\n  // Get selected workout detail\n  const { data: workoutDetail } = useQuery<WorkoutWithSets>({\n    queryKey: ['/api/workouts', selectedWorkout],\n    enabled: !!selectedWorkout\n  });\n\n  // Start workout mutation\n  const startWorkoutMutation = useMutation({\n    mutationFn: () => apiRequest(\"POST\", \"/api/workouts/start\", {}),\n    onSuccess: (data: any) => {\n      setActiveWorkout(data.workoutId || data.id);\n      queryClient.invalidateQueries({ queryKey: ['/api/workouts'] });\n      toast({\n        title: \"Workout started!\",\n        description: \"Let's get moving! Add some exercises.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to start workout\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Finish workout mutation\n  const finishWorkoutMutation = useMutation({\n    mutationFn: (notes?: string) => apiRequest(\"POST\", `/api/workouts/${activeWorkout}/finish`, { notes }),\n    onSuccess: () => {\n      setActiveWorkout(null);\n      queryClient.invalidateQueries({ queryKey: ['/api/workouts'] });\n      toast({\n        title: \"Workout complete!\",\n        description: \"Great job! Check your workout summary.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to finish workout\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Add set mutation\n  const addSetMutation = useMutation({\n    mutationFn: (data: any) => \n      apiRequest(\"POST\", `/api/workouts/${activeWorkout}/set`, {\n        action: \"add\",\n        ...data\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/workouts', activeWorkout] });\n      setNewWeight(\"20\");\n      setNewReps(\"10\");\n      toast({\n        title: \"Set added!\",\n        description: \"Keep it up!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add set\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Delete set mutation\n  const deleteSetMutation = useMutation({\n    mutationFn: (setId: string) => \n      apiRequest(\"POST\", `/api/workouts/${activeWorkout}/set`, {\n        action: \"delete\",\n        setId\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/workouts', activeWorkout] });\n      toast({\n        title: \"Set deleted\",\n        description: \"Set removed from workout\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete set\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Log cardio mutation\n  const logCardioMutation = useMutation({\n    mutationFn: (data: any) => apiRequest(\"POST\", \"/api/cardio\", data),\n    onSuccess: () => {\n      setCardioMinutes(\"30\");\n      setCardioDistance(\"\");\n      toast({\n        title: \"Cardio logged!\",\n        description: \"Great cardio session!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to log cardio\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleAddSet = () => {\n    if (!selectedExercise || !newWeight || !newReps) {\n      toast({\n        title: \"Missing information\",\n        description: \"Please select exercise and enter weight/reps\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const weight = parseFloat(newWeight);\n    const reps = parseInt(newReps);\n\n    if (isNaN(weight) || isNaN(reps) || weight <= 0 || reps <= 0) {\n      toast({\n        title: \"Invalid values\",\n        description: \"Weight and reps must be positive numbers\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    addSetMutation.mutate({\n      exerciseId: selectedExercise,\n      weight,\n      reps\n    });\n  };\n\n  const handleLogCardio = () => {\n    const minutes = parseInt(cardioMinutes);\n    const distance = cardioDistance ? parseFloat(cardioDistance) : null;\n\n    if (isNaN(minutes) || minutes <= 0) {\n      toast({\n        title: \"Invalid duration\",\n        description: \"Duration must be a positive number\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    logCardioMutation.mutate({\n      date: new Date().toISOString().split('T')[0],\n      type: cardioType,\n      durationSec: minutes * 60,\n      distanceMeters: distance ? distance * 1000 : null // Convert km to meters\n    });\n  };\n\n  const getWorkoutSummary = (workout: WorkoutWithSets) => {\n    if (!workout.sets) return { exercises: 0, totalSets: 0, totalVolume: 0 };\n    \n    const exerciseIds = new Set(workout.sets.map(set => set.exerciseId));\n    const totalVolume = workout.sets.reduce((sum, set) => sum + (set.weight * set.reps), 0);\n    \n    return {\n      exercises: exerciseIds.size,\n      totalSets: workout.sets.length,\n      totalVolume: totalVolume.toFixed(1)\n    };\n  };\n\n  const formatDuration = (start: string, end?: string) => {\n    const startTime = new Date(start).getTime();\n    const endTime = end ? new Date(end).getTime() : Date.now();\n    const minutes = Math.round((endTime - startTime) / 60000);\n    return `${minutes} min`;\n  };\n\n  const convertWeight = (weight: number) => {\n    return useKg ? weight : (weight * 2.205).toFixed(1);\n  };\n\n  const getWeightUnit = () => useKg ? \"kg\" : \"lb\";\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"flex\">\n        <Sidebar \n          mobileMenuOpen={mobileMenuOpen} \n          setMobileMenuOpen={setMobileMenuOpen}\n          currentPage=\"/workout\"\n        />\n        \n        <main className=\"flex-1 p-6 lg:ml-64\">\n          <div className=\"max-w-6xl mx-auto\">\n            <div className=\"flex items-center justify-between mb-8\">\n              <div>\n                <h1 className=\"text-3xl font-bold text-gray-900\">Workout Tracker</h1>\n                <p className=\"text-gray-600 mt-2\">Log your strength training and cardio sessions</p>\n              </div>\n              <div className=\"flex items-center gap-4\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setUseKg(!useKg)}\n                  data-testid=\"toggle-units\"\n                >\n                  <Settings className=\"h-4 w-4 mr-2\" />\n                  {useKg ? \"kg\" : \"lb\"}\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => window.open('/api/export.csv', '_blank')}\n                  data-testid=\"export-csv\"\n                >\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Export CSV\n                </Button>\n              </div>\n            </div>\n\n            <Tabs defaultValue=\"logger\" className=\"space-y-6\">\n              <TabsList className=\"grid w-full grid-cols-3\">\n                <TabsTrigger value=\"logger\" data-testid=\"tab-logger\">\n                  <Dumbbell className=\"h-4 w-4 mr-2\" />\n                  Logger\n                </TabsTrigger>\n                <TabsTrigger value=\"history\" data-testid=\"tab-history\">\n                  <History className=\"h-4 w-4 mr-2\" />\n                  History\n                </TabsTrigger>\n                <TabsTrigger value=\"cardio\" data-testid=\"tab-cardio\">\n                  <Activity className=\"h-4 w-4 mr-2\" />\n                  Cardio\n                </TabsTrigger>\n              </TabsList>\n\n              {/* Logger Tab */}\n              <TabsContent value=\"logger\" className=\"space-y-6\">\n                {!activeWorkout ? (\n                  <Card>\n                    <CardHeader className=\"text-center\">\n                      <CardTitle className=\"flex items-center justify-center gap-2\">\n                        <Play className=\"h-6 w-6\" />\n                        Ready to Start?\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"text-center\">\n                      <p className=\"text-gray-600 mb-6\">Begin a new workout session to start logging your exercises</p>\n                      <Button\n                        onClick={() => startWorkoutMutation.mutate()}\n                        disabled={startWorkoutMutation.isPending}\n                        size=\"lg\"\n                        data-testid=\"start-workout\"\n                      >\n                        <Play className=\"h-5 w-5 mr-2\" />\n                        {startWorkoutMutation.isPending ? \"Starting...\" : \"Start Workout\"}\n                      </Button>\n                    </CardContent>\n                  </Card>\n                ) : (\n                  <div className=\"space-y-6\">\n                    {/* Active Workout Header */}\n                    <Card className=\"border-blue-200 bg-blue-50\">\n                      <CardHeader>\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center gap-3\">\n                            <div className=\"w-3 h-3 bg-green-500 rounded-full animate-pulse\" />\n                            <div>\n                              <CardTitle className=\"text-lg\">Workout in Progress</CardTitle>\n                              <p className=\"text-sm text-gray-600\">\n                                Started {currentWorkoutData ? formatDuration(currentWorkoutData.startedAt.toString()) : '0 min'} ago\n                              </p>\n                            </div>\n                          </div>\n                          <Button\n                            onClick={() => finishWorkoutMutation.mutate(undefined)}\n                            disabled={finishWorkoutMutation.isPending}\n                            data-testid=\"finish-workout\"\n                          >\n                            <Square className=\"h-4 w-4 mr-2\" />\n                            {finishWorkoutMutation.isPending ? \"Finishing...\" : \"Finish\"}\n                          </Button>\n                        </div>\n                      </CardHeader>\n                    </Card>\n\n                    {/* Add Exercise */}\n                    <Card>\n                      <CardHeader>\n                        <CardTitle className=\"flex items-center gap-2\">\n                          <Plus className=\"h-5 w-5\" />\n                          Add Set\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                          <div className=\"md:col-span-2\">\n                            <label className=\"block text-sm font-medium mb-2\">Exercise</label>\n                            <Select value={selectedExercise} onValueChange={setSelectedExercise}>\n                              <SelectTrigger data-testid=\"select-exercise\">\n                                <SelectValue placeholder=\"Choose exercise\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                {exercises.map((exercise) => (\n                                  <SelectItem key={exercise.id} value={exercise.id}>\n                                    {exercise.name} {exercise.isCustom && \"(Custom)\"}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                          </div>\n\n                          <div>\n                            <label className=\"block text-sm font-medium mb-2\">\n                              Weight ({getWeightUnit()})\n                            </label>\n                            <Input\n                              type=\"number\"\n                              value={newWeight}\n                              onChange={(e) => setNewWeight(e.target.value)}\n                              placeholder=\"20\"\n                              min=\"0\"\n                              step=\"0.5\"\n                              data-testid=\"input-weight\"\n                            />\n                          </div>\n\n                          <div>\n                            <label className=\"block text-sm font-medium mb-2\">Reps</label>\n                            <Input\n                              type=\"number\"\n                              value={newReps}\n                              onChange={(e) => setNewReps(e.target.value)}\n                              placeholder=\"10\"\n                              min=\"1\"\n                              data-testid=\"input-reps\"\n                            />\n                          </div>\n                        </div>\n\n                        <Button\n                          onClick={handleAddSet}\n                          disabled={addSetMutation.isPending || !selectedExercise}\n                          className=\"mt-4\"\n                          data-testid=\"add-set\"\n                        >\n                          <Plus className=\"h-4 w-4 mr-2\" />\n                          {addSetMutation.isPending ? \"Adding...\" : \"Add Set\"}\n                        </Button>\n                      </CardContent>\n                    </Card>\n\n                    {/* Current Workout Sets */}\n                    {currentWorkoutData?.sets && currentWorkoutData.sets.length > 0 && (\n                      <Card>\n                        <CardHeader>\n                          <CardTitle>Current Workout</CardTitle>\n                        </CardHeader>\n                        <CardContent className=\"space-y-3\">\n                          {currentWorkoutData.sets.map((set, index) => {\n                            const exercise = exercises.find(e => e.id === set.exerciseId);\n                            return (\n                              <div key={set.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                                <div className=\"flex items-center gap-4\">\n                                  <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center text-sm font-medium\">\n                                    {index + 1}\n                                  </div>\n                                  <div>\n                                    <div className=\"font-medium\">{exercise?.name || \"Unknown Exercise\"}</div>\n                                    <div className=\"text-sm text-gray-600\">\n                                      {convertWeight(set.weight)} {getWeightUnit()} × {set.reps} reps\n                                    </div>\n                                  </div>\n                                </div>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  onClick={() => deleteSetMutation.mutate(set.id)}\n                                  disabled={deleteSetMutation.isPending}\n                                  data-testid={`delete-set-${set.id}`}\n                                >\n                                  <Trash2 className=\"h-4 w-4 text-red-500\" />\n                                </Button>\n                              </div>\n                            );\n                          })}\n                        </CardContent>\n                      </Card>\n                    )}\n                  </div>\n                )}\n              </TabsContent>\n\n              {/* History Tab */}\n              <TabsContent value=\"history\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Workout History</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    {workouts.length === 0 ? (\n                      <div className=\"text-center py-8 text-gray-500\">\n                        <Dumbbell className=\"h-12 w-12 mx-auto mb-4 opacity-30\" />\n                        <p>No workouts logged yet</p>\n                        <p className=\"text-sm\">Start your first workout to see it here!</p>\n                      </div>\n                    ) : (\n                      <div className=\"space-y-3\">\n                        {workouts.map((workout) => {\n                          const summary = getWorkoutSummary(workout as WorkoutWithSets);\n                          return (\n                            <div \n                              key={workout.id}\n                              className=\"p-4 border rounded-lg hover:bg-gray-50 cursor-pointer transition-colors\"\n                              onClick={() => setSelectedWorkout(workout.id)}\n                              data-testid={`workout-${workout.id}`}\n                            >\n                              <div className=\"flex items-center justify-between\">\n                                <div>\n                                  <div className=\"font-medium\">\n                                    {new Date(workout.startedAt).toLocaleDateString()}\n                                  </div>\n                                  <div className=\"text-sm text-gray-600\">\n                                    {summary.exercises} exercises • {summary.totalSets} sets\n                                    {workout.endedAt && ` • ${formatDuration(workout.startedAt.toString(), workout.endedAt.toString())}`}\n                                  </div>\n                                </div>\n                                <div className=\"text-right\">\n                                  <div className=\"font-medium\">{summary.totalVolume} {getWeightUnit()}</div>\n                                  <div className=\"text-sm text-gray-600\">Total Volume</div>\n                                </div>\n                                <ChevronRight className=\"h-5 w-5 text-gray-400\" />\n                              </div>\n                            </div>\n                          );\n                        })}\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n\n                {/* Workout Detail Modal */}\n                {selectedWorkout && workoutDetail && (\n                  <Card>\n                    <CardHeader>\n                      <div className=\"flex items-center justify-between\">\n                        <CardTitle>\n                          Workout - {new Date(workoutDetail.startedAt).toLocaleDateString()}\n                        </CardTitle>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => setSelectedWorkout(null)}\n                          data-testid=\"close-workout-detail\"\n                        >\n                          ×\n                        </Button>\n                      </div>\n                      <p className=\"text-gray-600\">\n                        {workoutDetail.endedAt \n                          ? `${formatDuration(workoutDetail.startedAt.toString(), workoutDetail.endedAt.toString())}`\n                          : \"In Progress\"\n                        }\n                      </p>\n                    </CardHeader>\n                    <CardContent>\n                      {workoutDetail.sets && workoutDetail.sets.length > 0 ? (\n                        <div className=\"space-y-4\">\n                          {workoutDetail.sets.map((set, index) => {\n                            const exercise = exercises.find(e => e.id === set.exerciseId);\n                            return (\n                              <div key={set.id} className=\"flex items-center gap-4 p-3 bg-gray-50 rounded-lg\">\n                                <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center text-sm font-medium\">\n                                  {index + 1}\n                                </div>\n                                <div className=\"flex-1\">\n                                  <div className=\"font-medium\">{exercise?.name || \"Unknown Exercise\"}</div>\n                                  <div className=\"text-sm text-gray-600\">\n                                    {convertWeight(set.weight)} {getWeightUnit()} × {set.reps} reps = {(set.weight * set.reps).toFixed(1)} {getWeightUnit()} volume\n                                  </div>\n                                </div>\n                              </div>\n                            );\n                          })}\n                        </div>\n                      ) : (\n                        <p className=\"text-gray-500\">No sets recorded</p>\n                      )}\n                    </CardContent>\n                  </Card>\n                )}\n              </TabsContent>\n\n              {/* Cardio Tab */}\n              <TabsContent value=\"cardio\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Activity className=\"h-5 w-5\" />\n                      Log Cardio Session\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                      <div>\n                        <label className=\"block text-sm font-medium mb-2\">Activity Type</label>\n                        <Select value={cardioType} onValueChange={setCardioType}>\n                          <SelectTrigger data-testid=\"select-cardio-type\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {CARDIO_TYPES.map((type) => (\n                              <SelectItem key={type.id} value={type.id}>\n                                {type.label}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      <div>\n                        <label className=\"block text-sm font-medium mb-2\">Duration (minutes)</label>\n                        <Input\n                          type=\"number\"\n                          value={cardioMinutes}\n                          onChange={(e) => setCardioMinutes(e.target.value)}\n                          placeholder=\"30\"\n                          min=\"1\"\n                          data-testid=\"input-cardio-duration\"\n                        />\n                      </div>\n\n                      <div>\n                        <label className=\"block text-sm font-medium mb-2\">Distance (km) - Optional</label>\n                        <Input\n                          type=\"number\"\n                          value={cardioDistance}\n                          onChange={(e) => setCardioDistance(e.target.value)}\n                          placeholder=\"5.0\"\n                          min=\"0\"\n                          step=\"0.1\"\n                          data-testid=\"input-cardio-distance\"\n                        />\n                      </div>\n                    </div>\n\n                    <Button\n                      onClick={handleLogCardio}\n                      disabled={logCardioMutation.isPending}\n                      className=\"mt-4\"\n                      data-testid=\"log-cardio\"\n                    >\n                      <Timer className=\"h-4 w-4 mr-2\" />\n                      {logCardioMutation.isPending ? \"Logging...\" : \"Log Cardio\"}\n                    </Button>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":25925}},"version":1}